<?xml version="1.0" encoding="utf-8"?>
<RhinoUI major_ver="3" minor_ver="0" guid="69f5f9b3-2baf-42aa-910f-b7d558cf5498" localize="False" default_language_id="1033" dpi_scale="100">
  <extend_rhino_menus>
    <menu guid="d58ceae7-fdb0-4104-80da-274b94ad44a9">
      <text>
        <locale_1033>Extend Rhino Menus</locale_1033>
      </text>
    </menu>
  </extend_rhino_menus>
  <menus />
  <tool_bar_groups>
    <tool_bar_group guid="610cd420-2a2b-4b19-8264-5be4c3de81b0" dock_bar_guid32="00000000-0000-0000-0000-000000000000" dock_bar_guid64="b31f03b3-0481-4a57-bc4b-fd730b53639b" active_tool_bar_group="6907acd4-2802-4c69-bb33-4b9e88e311ac" single_file="False" hide_single_tab="False" point_floating="1829,371">
      <text>
        <locale_1033>LandArch Tools</locale_1033>
      </text>
      <tool_bar_group_item guid="6907acd4-2802-4c69-bb33-4b9e88e311ac" major_version="1" minor_version="1">
        <text>
          <locale_1033>LandArch Tools</locale_1033>
        </text>
        <tool_bar_id>69b13ca2-e1a4-4e0c-94a5-019b137651fb</tool_bar_id>
      </tool_bar_group_item>
      <dock_bar_info dpi_scale="100" dock_bar="False" docking="True" horz="False" visible="True" floating="True" mru_float_style="8192" bar_id="59487" mru_width="868" point_pos="-2,-2" float_point="1829,371" rect_mru_dock_pos="0,0,0,0" dock_location_u="59419" dock_location="top" float_size="357,62" />
    </tool_bar_group>
  </tool_bar_groups>
  <tool_bars>
    <tool_bar guid="69b13ca2-e1a4-4e0c-94a5-019b137651fb" ImportedFromFileGuid="c7da84fc-2991-4824-832a-4f2509bd0ede" ImportedFromItemGuid="39f76644-e61b-4f33-a48a-bad0c5783f8e" bitmap_id="533ba74d-f27a-4b1c-9147-3c4708a9e5f3">
      <text>
        <locale_1033>LandArch Tools</locale_1033>
      </text>
      <tool_bar_item guid="2ee12efd-cc4a-4e9c-84ad-d9f68a37090d">
        <left_macro_id>fbaa7976-2606-4c4e-8d83-5651d4cd4f02</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2d2448ae-0a40-48ab-a6f4-8eb00afccc05">
        <left_macro_id>028fa608-63a7-42b4-82fb-7259b7003fb5</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="69312408-5959-4514-848a-7fa6641712f6">
        <left_macro_id>e76e7ea7-0d25-44a6-9ed3-43a85f3df8b0</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="42e59df8-428c-46ac-a65a-8cd64e4cdcff">
        <left_macro_id>4b67e1a0-373f-44d5-aa82-30382b12f599</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="3476ac1b-b6f5-41f5-8a54-f37403e244d2">
        <left_macro_id>653f86bb-d8a8-4779-a37c-f7e9bac0ea13</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="f5bac3a7-b3f6-4f0a-9398-7f8f9385f327">
        <left_macro_id>d5a1b6a2-dd5f-44bf-b366-59b113417446</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="31a8080e-aa95-41b3-a180-65982b8f05e6">
        <left_macro_id>1581c648-c6a9-472c-a4df-21de69dd9d67</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="1c0a0c76-8c5b-4aaa-aa65-446fee135a3e">
        <left_macro_id>b1e8b7d5-35eb-4e09-b40d-1ca5c016c284</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="470e1e96-83c9-47f6-a146-70af6b4334f3">
        <left_macro_id>15802b3c-73a7-4a79-9623-87e3d964e6b6</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="dfcb8d93-24a0-4be5-b0d9-476c5a4a3af9">
        <left_macro_id>edc1fa6a-b52a-4f0f-bff9-be07c0792526</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="d02ab720-13d4-4161-8fd7-241249f8f698">
        <left_macro_id>b6fe7c88-bd20-4eb0-9fe6-d9ed1baed13e</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="fadf52b8-758b-4755-8491-c42b99025f56">
        <left_macro_id>bb7fe420-22dc-4aaf-971e-e924031f82ca</left_macro_id>
      </tool_bar_item>
    </tool_bar>
  </tool_bars>
  <macros>
    <macro_item guid="fbaa7976-2606-4c4e-8d83-5651d4cd4f02" bitmap_id="2216bb3c-41b0-4cdf-85c7-2063576e4934">
      <text>
        <locale_1033>Macro 00</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Calculate grade between two points</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Calculate grade between two points</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Calculate grade between two given points
#By Thomas Chapman on 11/01/2021

import rhinoscriptsyntax as rs
import math as m

# Get points from user
pt1 = rs.GetPoint('Pick the first point')
pt2 = rs.GetPoint('Pick the second point')
hypotenuse = rs.Distance(pt1, pt2)

rs.EnableRedraw(False)


# Find the rise of given points in any order
if pt1.Z &gt; pt2.Z:
    rise = pt1.Z - pt2.Z
elif pt1.Z &lt; pt2.Z:
    rise = pt2.Z - pt1.Z

# Find the run of given points
run = m.sqrt(hypotenuse**2 - rise**2)

# Detect model units and scale to mm, if mm do nothing
if rs.UnitSystem == 3:
    rise = rise*100
if rs.UnitSystem == 4:
    rise = rise*1000

# Calculate grade based on rise and run
try:
    grade = run / rise

except ZeroDivisionError:
    print('No Grade Found')
    exit()

# Print text dot to screen
curve = rs.AddCurve([pt1,pt2])
midpoint = rs.CurveMidPoint(curve)
rs.DeleteObject(curve)
rs.AddTextDot('1:' + str(abs(m.trunc(grade))),midpoint)

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="028fa608-63a7-42b4-82fb-7259b7003fb5" bitmap_id="7b06dbf2-0f37-4775-8cf6-b95e350262ec">
      <text>
        <locale_1033>Macro 02</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Display the RL of a given point</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Display the RL of a given point</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''


# Show RL of specified point and copy to clipboard
# By Thomas Chapman on 01/10/2021

import rhinoscriptsyntax as rs
import os

point = rs.GetPoint('Select point')
pointZ = point.Z

if rs.UnitSystem() == 3: #if doc is in CM
    pointZ = pointZ *0.01
if rs.UnitSystem() == 2:#if doc is in MM
     pointZ = pointZ *0.001

rs.AddTextDot('+RL ' + str(round(pointZ,3)),point)

#Copy RL to Clipboard

RL = str(round(pointZ,3))

rs.ClipboardText(RL)


)</script>
    </macro_item>
    <macro_item guid="e76e7ea7-0d25-44a6-9ed3-43a85f3df8b0" bitmap_id="e44ae002-8838-4cd5-976b-3ca23f2ffeff">
      <text>
        <locale_1033>Macro 03</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

# MOVE OBJECT TO SPECIFIED RL
# BY THOMAS CHAPMAN ON 01/10/2021

import rhinoscriptsyntax as rs
import Rhino.Geometry as geo

obj = rs.GetObjects('Select objects',preselect=True)

if obj:
    current = rs.GetPoint('Select point')
    
    if current: 
        rl = rs.GetString('RL to move to?')
        rl = float(rl)
        
        if rs.UnitSystem() == 3: #if model is in cm scale by 100
            rl = rl*100
        elif rs.UnitSystem() == 2: #if model is in mm scale by 1000
            rl = rl*1000
        
        if rl == 0.000: #move objects to the 0 coord
            target3 = current.Z
            if target3:
                target3 = target3 *-1
                target4 = geo.Point3d(0,0,target3)
                rs.MoveObject(obj, target4)

        elif rl &gt; 0.000:
            target = rl - current.Z #+ or - number to target location
            target2 = geo.Point3d(0,0,target) #translated vector needed to hit target
            rs.MoveObject(obj, target2)
)</script>
    </macro_item>
    <macro_item guid="4b67e1a0-373f-44d5-aa82-30382b12f599" bitmap_id="c590aa56-d692-479c-97ab-ae3379d66083">
      <text>
        <locale_1033>Macro 01</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#RANDOM ROTATE BLOCK INSTANCES AROUND INSERTION POINT
#BY THOMAS CHAPMAN ON 01/09/2021

import rhinoscriptsyntax as rs
import random as r

vec = rs.VectorCreate([0,0,1],[0,0,0])
obj = rs.GetObjects('pick Blocks to rotate randomly', filter=4096, preselect=True)

rs.EnableRedraw(False)

for object in obj:
    num = r.randrange(-180,180)
    point = rs.BlockInstanceInsertPoint(object)
    rs.RotateObject(object, point, num, vec)

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="653f86bb-d8a8-4779-a37c-f7e9bac0ea13" bitmap_id="e7ab65e5-f772-4c22-bc8d-e7fa8e6c1d1f">
      <text>
        <locale_1033>Macro 04</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Drop objects to surface

#By Thomas Chapman on 17/01/2021
#24/04/2021 revision to capture most error messages

import rhinoscriptsyntax as rs
import itertools

def main():

    # prompt user for obj and surface
    obj = rs.GetObjects('Pick objects',preselect=True,filter=(8+16+32+4096+1073741824))
    surface = rs.GetObjects('Pick Surface/Mesh')
    
    #Check selects are valid
    
    if obj == None:
        return
    if surface == None:
        return
    
    
    meshCheck = rs.IsMesh(surface[0])
    indexnum = []
    surfacetypes = []
    
    
    
    #Check if mixed surface types
    for thing in surface:
        result = rs.IsMesh(thing)
        surfacetypes.append(str(result))
    
    if ('True' in surfacetypes) and ('False' in surfacetypes):
        print ('Please select only one surface type')
        return
    
    
    
    #Turn off redraw to speed up script
    rs.EnableRedraw(False)
    
    # Generate bounding box around obj and find distance between obj and surface
    for objects in obj:
        ptlist = []
    
        # Get bounding box and make a square on lower half and find centroid
        bounds = rs.BoundingBox(objects)
        pl = rs.AddPolyline((bounds[0:4]+[bounds[0]]))
        centroid = rs.CurveAreaCentroid(pl)
    
        # Add three points at the centroid and move them in both z direction
        pt00 = rs.AddPoint(centroid[0])
        pt000 = rs.AddPoint(centroid[0])
        lowpoint = rs.AddPoint(centroid[0])
        pt01 = rs.MoveObject(pt00, (0,0,100000))
        pt02 = rs.MoveObject(pt000, (0,0,-100000))
    
        #Check if Mesh else use nurb instersect
        if meshCheck is True:
            curve = rs.AddCurve((pt01, pt02))
            for plane in surface:
                intersection = rs.CurveMeshIntersection(curve, plane)
                if intersection is None:
                    continue
                ptlist.append(list(filter(None,intersection)))
            merged = list(itertools.chain(*ptlist))
            merged = list(itertools.chain(*merged))
    
        # Create curve to intersect with surface to find distance from obj
        elif meshCheck is False:
            curve = rs.AddCurve((pt01, pt02))
            for plane in surface:
                intersection = rs.CurveBrepIntersect(curve, plane)
                if intersection is None:
                    continue
                ptlist.append(list(filter(None,intersection)))
            merged = list(itertools.chain(*ptlist))
            merged = list(itertools.chain(*merged))
    
        if merged is not None and merged != []:
            # Find the highest Z value and use that to target
            sorted = rs.SortPoints((rs.coerce3dpointlist(merged)), ascending=False, order=4)
            inter = (sorted[0])
            dist = rs.Distance(lowpoint, inter)
    
            # Convert Guid to point list
            intCon = rs.coerce3dpoint(inter)
            lowCon = rs.coerce3dpoint(lowpoint)
    
            # Find if obj is below or above surface and change dist to + or - accordingly
            if lowCon[2] &lt; intCon[2]:
                distCon = abs(dist)
            if lowCon[2] &gt; intCon[2]:
                distCon = (dist)*-1
            elif lowCon[2] == intCon[2]:
                rs.DeleteObjects([curve, pt01, pt02, pl, lowpoint]+merged)
                continue
    
            # Move obj to intersection
            rs.MoveObject(objects, (0,0,distCon))
    
            #deleate construction geo
            try:
               rs.DeleteObjects([curve, pt01, pt02, pl, lowpoint]+merged)
            except:
                continue
    
    
    
            #Clear list values for second run through loop
            del intersection
            del merged
            del ptlist
    
    
    
    #delete any polysurfaces created
    if isinstance(indexnum, int):
        rs.DeleteObjects(surface[indexnum])
    
    # Enable redraw to show results
    rs.EnableRedraw(True)


main()
)</script>
    </macro_item>
    <macro_item guid="d5a1b6a2-dd5f-44bf-b366-59b113417446" bitmap_id="9c341c8d-cab8-4c2f-99ce-b21684c641aa">
      <text>
        <locale_1033>Macro</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
'''

#Model Standard Australian DDA Ramps

import rhinoscriptsyntax as rs
import math as m


if rs.UnitSystem() == 4: #if doc is in M
    Mult = 1
if rs.UnitSystem() == 3: #if doc is in CM
    Mult = 100
if rs.UnitSystem() == 2:#if doc is in MM
    Mult = 1000



pt00 = rs.GetPoint('Pick insertion point')
pt01 = rs.CreatePoint(pt00.X,pt00.Y)
RampOptions = 'Step Ramp', 'Kerb Ramp', 'Ramp', 'Walkway'
RampType = rs.PopupMenu(RampOptions)

rs.EnableRedraw(False)


if RampType == -1:
    exit()

if RampType == 0: #Step Ramp
    Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.9*Mult),pt01.Y,pt01.Z),(pt01)])
    Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
    rs.CapPlanarHoles(Surface)
    rs.DeleteObject(Curve)

if RampType == 1: #Kerb Ramp
#main ramp portion
    Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.52*Mult),pt01.Y,pt01.Z),(pt01)])
    Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
    rs.CapPlanarHoles(Surface)
    rs.DeleteObject(Curve)

if RampType == 2: #Ramp
    Grade = '1:19','1:18','1:17','1:16','1:15','1:14'
    Index = rs.PopupMenu(Grade)
    GradeNum = [19,18,17,16,15,14]
    if Index == 5:
        Rise = 9/(GradeNum[Index])
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+9*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)
    elif Index != 5:
        Rise = 15/(GradeNum[Index])
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)

if RampType == 3: #Walkway
    Grade = '1:33','1:32','1:31','1:30','1:29','1:28','1:27','1:26','1:25','1:24','1:23','1:22','1:21','1:20'
    Index = rs.PopupMenu(Grade)
    GradeNum = [33,32,31,30,29,28,27,26,25,24,23,22,21,20]
    if Index == 0:
        Rise = 25/(GradeNum[Index])
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+25*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)
    if Index == 13:
        Rise = 15/(GradeNum[Index])
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)
    elif Index != 0 or Index != 13:
        Interp = m.floor((( GradeNum[Index] - 20)*(25 - 15)/(33 - 20))+15) #Linear interpolation of landing distance - DDA requirement...Srsly?
        Rise = Interp/(GradeNum[Index])
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+Interp*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="1581c648-c6a9-472c-a4df-21de69dd9d67" bitmap_id="8530d493-afea-4e64-8236-a83bb2807fe2">
      <text>
        <locale_1033>Macro 05</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Patch Multiple Individual closed polylines
#By Thomas Chapman 04/22/2021

import rhinoscriptsyntax as rs

geo = rs.GetObjects('Select Closed Polylines',preselect=True)

uv1 = rs.GetInteger('enter number of UV divisions',number=1,minimum=1)

rs.EnableRedraw(False)
for objects in geo:
    rs.AddPatch((objects),(uv1,uv1),tolerance=0.0001)
rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="b1e8b7d5-35eb-4e09-b40d-1ca5c016c284" bitmap_id="3edf817e-9a97-4d3b-ad86-07e5bc3c8ead">
      <text>
        <locale_1033>Macro 06</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Isolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Isolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

# Get object and find layer it is on
obj = rs.GetObjects('select an object on the layer to isolate',preselect=True)

rs.EnableRedraw(False)

# Create list of selected obj layers
selectedlayers = []
for i in obj:
    layer = rs.ObjectLayer(i)
    selectedlayers.append(layer)

# Select all objects on each layer

for i in selectedlayers:
    rs.ObjectsByLayer(i,True)
isolate = rs.SelectedObjects()

allObjects = rs.AllObjects()

for i in isolate:
    allObjects.remove(i)

# Hide selected objects

rs.HideObjects(allObjects)

rs.UnselectAllObjects()

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="15802b3c-73a7-4a79-9623-87e3d964e6b6" bitmap_id="f5b1b5ee-555a-4a82-9442-1f1a7e8f08b9">
      <text>
        <locale_1033>Macro 07</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Unisolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Unisolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Unisolate All objects
#By Thomas Chapman 21/05/01

import rhinoscriptsyntax as rs

obj = rs.HiddenObjects()

rs.ShowObjects(obj)
)</script>
    </macro_item>
    <macro_item guid="3b206331-c392-4654-8a1e-f1c1f6b8c2c2" bitmap_id="851cec9a-c6f5-4a02-80a6-7f4bc2339a2f">
      <text>
        <locale_1033>Macro 08</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Deleat All Text Dots</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Deleat All Text Dots</locale_1033>
      </button_text>
    </macro_item>
    <macro_item guid="edc1fa6a-b52a-4f0f-bff9-be07c0792526" bitmap_id="5e16d0af-b8b5-48e3-9dd1-7eb53a5e3ce0">
      <text>
        <locale_1033>Macro 09</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Plan View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Plan View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _T")

)</script>
    </macro_item>
    <macro_item guid="b6fe7c88-bd20-4eb0-9fe6-d9ed1baed13e" bitmap_id="f71862a8-8dbe-47f7-8f06-8975974defa6">
      <text>
        <locale_1033>Macro 10</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Perspective View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Perspective View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _p")

)
</script>
    </macro_item>
    <macro_item guid="bb7fe420-22dc-4aaf-971e-e924031f82ca" bitmap_id="53217aca-78b5-4615-87cc-67af85b75127">
      <text>
        <locale_1033>Macro 11</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </tooltip>
      <help_text>
        <locale_1033 />
      </help_text>
      <button_text>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </button_text>
      <menu_text>
        <locale_1033 />
      </menu_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import glob
import struct
import imghdr
import rhinoscriptsyntax as rs

#Check document units
units = rs.UnitSystem()

if units == 2: #mm
    scale = 1000
if units == 3: #cm
    scale = 100
if units == 4: #m
    scale = 1

def get_image_size(fname):
    '''Determine the image type of fhandle and return its size.
    from draco'''
    with open(fname, 'rb') as fhandle:
        head = fhandle.read(24)
        if len(head) != 24:
            return
        if imghdr.what(fname) == 'png':
            check = struct.unpack('&gt;i', head[4:8])[0]
            if check != 0x0d0a1a0a:
                return
            width, height = struct.unpack('&gt;ii', head[16:24])
        elif imghdr.what(fname) == 'gif':
            width, height = struct.unpack('&lt;HH', head[6:10])
        elif imghdr.what(fname) == 'jpeg':
            try:
                fhandle.seek(0) # Read 0xff next
                size = 2
                ftype = 0
                while not 0xc0 &lt;= ftype &lt;= 0xcf:
                    fhandle.seek(size, 1)
                    byte = fhandle.read(1)
                    while ord(byte) == 0xff:
                        byte = fhandle.read(1)
                    ftype = ord(byte)
                    size = struct.unpack('&gt;H', fhandle.read(2))[0] - 2
                # We are at a SOFn block
                fhandle.seek(1, 1)  # Skip `precision' byte.
                height, width = struct.unpack('&gt;HH', fhandle.read(4))
            except Exception: #IGNORE:W0703
                return
        else:
            return
        return width, height



#Find and open jgw file, extract scalefactor and x and y coordinates

jgw = rs.OpenFileName(title= 'Select .JGW file',filter="JGW Files (*.JGW)|*.JGW||" )

with open(jgw,'rt') as f:
    numslist = f.read().splitlines()

scaleFactor01 = numslist[0]

worldx = float(numslist[4])*int(scale)
worldy = float(numslist[5])*int(scale)

#Find and open jpg file, extract pixel size

jpg = rs.OpenFileName(title= 'Select .JPG image File',filter="JPG Files (*.JPG)|*.JPG||")

size = get_image_size(jpg)

scaleFactor02 = (float(size[0])*int(scale))
scaleFactor03 = (float(size[1])*int(scale))

# Calculate scale factor

scaleFactorWidth = (float(scaleFactor01))*(float(scaleFactor02))
scaleFactorHeight = (float(scaleFactor01))*(float(scaleFactor03))

origin = (float(worldx), (float(worldy) - float(scaleFactorHeight)), 0)

picturePlane = rs.PlaneFromFrame(origin,(1,0,0),(0,1,0))

rs.AddPictureFrame(picturePlane,jpg,width=(float(scaleFactorWidth)), height=(float(scaleFactorHeight)))

)</script>
    </macro_item>
  </macros>
  <bitmaps>
    <small_bitmap item_width="16" item_height="16">
      <bitmap_item guid="2216bb3c-41b0-4cdf-85c7-2063576e4934" index="0" />
      <bitmap_item guid="7b06dbf2-0f37-4775-8cf6-b95e350262ec" index="1" />
      <bitmap_item guid="e44ae002-8838-4cd5-976b-3ca23f2ffeff" index="2" />
      <bitmap_item guid="c590aa56-d692-479c-97ab-ae3379d66083" index="3" />
      <bitmap_item guid="e7ab65e5-f772-4c22-bc8d-e7fa8e6c1d1f" index="4" />
      <bitmap_item guid="533ba74d-f27a-4b1c-9147-3c4708a9e5f3" index="5" />
      <bitmap_item guid="9c341c8d-cab8-4c2f-99ce-b21684c641aa" index="6" />
      <bitmap_item guid="8530d493-afea-4e64-8236-a83bb2807fe2" index="7" />
      <bitmap_item guid="3edf817e-9a97-4d3b-ad86-07e5bc3c8ead" index="8" />
      <bitmap_item guid="f5b1b5ee-555a-4a82-9442-1f1a7e8f08b9" index="9" />
      <bitmap_item guid="851cec9a-c6f5-4a02-80a6-7f4bc2339a2f" index="10" />
      <bitmap_item guid="5e16d0af-b8b5-48e3-9dd1-7eb53a5e3ce0" index="11" />
      <bitmap_item guid="f71862a8-8dbe-47f7-8f06-8975974defa6" index="12" />
      <bitmap_item guid="53217aca-78b5-4615-87cc-67af85b75127" index="13" />
      <bitmap>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</bitmap>
    </small_bitmap>
    <normal_bitmap item_width="24" item_height="24">
      <bitmap_item guid="2216bb3c-41b0-4cdf-85c7-2063576e4934" index="0" />
      <bitmap_item guid="7b06dbf2-0f37-4775-8cf6-b95e350262ec" index="1" />
      <bitmap_item guid="e44ae002-8838-4cd5-976b-3ca23f2ffeff" index="2" />
      <bitmap_item guid="c590aa56-d692-479c-97ab-ae3379d66083" index="3" />
      <bitmap_item guid="e7ab65e5-f772-4c22-bc8d-e7fa8e6c1d1f" index="4" />
      <bitmap_item guid="533ba74d-f27a-4b1c-9147-3c4708a9e5f3" index="5" />
      <bitmap_item guid="9c341c8d-cab8-4c2f-99ce-b21684c641aa" index="6" />
      <bitmap_item guid="8530d493-afea-4e64-8236-a83bb2807fe2" index="7" />
      <bitmap_item guid="3edf817e-9a97-4d3b-ad86-07e5bc3c8ead" index="8" />
      <bitmap_item guid="f5b1b5ee-555a-4a82-9442-1f1a7e8f08b9" index="9" />
      <bitmap_item guid="851cec9a-c6f5-4a02-80a6-7f4bc2339a2f" index="10" />
      <bitmap_item guid="5e16d0af-b8b5-48e3-9dd1-7eb53a5e3ce0" index="11" />
      <bitmap_item guid="f71862a8-8dbe-47f7-8f06-8975974defa6" index="12" />
      <bitmap_item guid="53217aca-78b5-4615-87cc-67af85b75127" index="13" />
      <bitmap>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</bitmap>
    </normal_bitmap>
    <large_bitmap item_width="32" item_height="32">
      <bitmap_item guid="2216bb3c-41b0-4cdf-85c7-2063576e4934" index="0" />
      <bitmap_item guid="7b06dbf2-0f37-4775-8cf6-b95e350262ec" index="1" />
      <bitmap_item guid="e44ae002-8838-4cd5-976b-3ca23f2ffeff" index="2" />
      <bitmap_item guid="c590aa56-d692-479c-97ab-ae3379d66083" index="3" />
      <bitmap_item guid="e7ab65e5-f772-4c22-bc8d-e7fa8e6c1d1f" index="4" />
      <bitmap_item guid="533ba74d-f27a-4b1c-9147-3c4708a9e5f3" index="5" />
      <bitmap_item guid="9c341c8d-cab8-4c2f-99ce-b21684c641aa" index="6" />
      <bitmap_item guid="8530d493-afea-4e64-8236-a83bb2807fe2" index="7" />
      <bitmap_item guid="3edf817e-9a97-4d3b-ad86-07e5bc3c8ead" index="8" />
      <bitmap_item guid="f5b1b5ee-555a-4a82-9442-1f1a7e8f08b9" index="9" />
      <bitmap_item guid="851cec9a-c6f5-4a02-80a6-7f4bc2339a2f" index="10" />
      <bitmap_item guid="5e16d0af-b8b5-48e3-9dd1-7eb53a5e3ce0" index="11" />
      <bitmap_item guid="f71862a8-8dbe-47f7-8f06-8975974defa6" index="12" />
      <bitmap_item guid="53217aca-78b5-4615-87cc-67af85b75127" index="13" />
      <bitmap>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</bitmap>
    </large_bitmap>
  </bitmaps>
  <scripts />
</RhinoUI>