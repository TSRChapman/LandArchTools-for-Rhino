<?xml version="1.0" encoding="utf-8"?>
<RhinoUI major_ver="3" minor_ver="0" guid="0804c739-59c2-4cd7-86d9-ddaf63e97340" localize="False" default_language_id="1033" dpi_scale="100">
  <extend_rhino_menus />
  <menus />
  <tool_bar_groups>
    <tool_bar_group guid="4830f6fe-5b84-4155-9c85-a8ae8942b65e" dock_bar_guid32="00000000-0000-0000-0000-000000000000" dock_bar_guid64="00000000-0000-0000-0000-000000000000" active_tool_bar_group="c0ddb15f-03f5-4dff-86f7-7745ab4674f7" single_file="False" hide_single_tab="True" point_floating="-5,1218">
      <text>
        <locale_1033>LandArch Tools</locale_1033>
      </text>
      <tool_bar_group_item guid="c0ddb15f-03f5-4dff-86f7-7745ab4674f7" major_version="1" minor_version="1">
        <text>
          <locale_1033>LandArch Tools</locale_1033>
        </text>
        <tool_bar_id>d8dc19cb-56d8-4f50-b015-76d6b2e6fb1f</tool_bar_id>
      </tool_bar_group_item>
      <dock_bar_info dpi_scale="100" dock_bar="False" docking="True" horz="False" visible="True" floating="True" mru_float_style="8192" bar_id="59474" mru_width="868" point_pos="0,551" float_point="-5,1218" rect_mru_dock_pos="0,551,64,1065" dock_location_u="59420" dock_location="left" float_size="433,62" />
    </tool_bar_group>
  </tool_bar_groups>
  <tool_bars>
    <tool_bar guid="d8dc19cb-56d8-4f50-b015-76d6b2e6fb1f" ImportedFromFileGuid="b382fe76-0933-4260-9f20-10e304027e90" ImportedFromItemGuid="f31347de-b949-4ea4-89ed-3d89808e6bd4" bitmap_id="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb">
      <text>
        <locale_1033>LandArch Tools</locale_1033>
      </text>
      <tool_bar_item guid="bcc9156a-6e1d-4be5-8f0e-7bfcfc3e4f0c">
        <left_macro_id>5bb60bb6-b5e1-4cf6-b207-2aa05bd6bf0f</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="49c53416-e30d-414d-a4e3-f9daca5032dc">
        <left_macro_id>ba483181-ff75-4d51-9bba-974118b80da5</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="e021088f-3f01-4ec2-b7f8-7e141567db90">
        <left_macro_id>4211923b-f22f-4ab1-8745-e05f836d0bf8</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="70198725-314c-45f3-be45-e35fdd8208df">
        <left_macro_id>ef338e36-b652-464e-9f92-9d8c746720f3</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="eef8629f-6a85-4738-8531-046c164ab354">
        <left_macro_id>5a023420-191b-433d-9347-d6221ccc57d3</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9f05992f-75c6-4360-8a00-5412592b1130">
        <left_macro_id>d1ca3149-4600-4d59-891a-116db286a114</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9d56baae-f374-4ee4-8917-a3170cadab27">
        <left_macro_id>161b2a13-4700-4945-9dae-25c70928152b</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="5598f291-9102-4785-ad1f-89305c097143">
        <left_macro_id>4055eaa6-4427-427c-b6a5-e6cdbac914c2</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="31d82a86-c02b-4786-9489-884129774c95">
        <left_macro_id>652506ee-7343-475c-a018-6ed9c0a76b29</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="1c7275d2-d2bb-4582-835c-2dc2ea64040d">
        <left_macro_id>87791b70-7cac-4efc-a5c4-deece16831aa</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9b1ad1b4-64b4-46ff-a3b6-2df1205041f4">
        <left_macro_id>96e93532-81ce-4156-b7f7-b7ff1364c489</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="0c1a0eb2-86c5-4735-a356-9ab261bf6b7c">
        <left_macro_id>d16957a9-f662-446d-9801-c0533fb38255</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2dce03e3-13e1-4b50-a92c-2f59b9947d33">
        <left_macro_id>c047d19d-b398-41b0-9fd8-74fe11b70e04</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="135b9233-ad6d-4ea1-b6b8-967e3eb44a41">
        <left_macro_id>cfb1aa22-1db1-4869-b63d-8a0474245511</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2d5840f3-4ba6-4be7-b14d-725b51e62bb2">
        <left_macro_id>63812035-1fa4-4e2a-8e3c-41fae14a9a2c</left_macro_id>
      </tool_bar_item>
    </tool_bar>
  </tool_bars>
  <macros>
    <macro_item guid="5bb60bb6-b5e1-4cf6-b207-2aa05bd6bf0f" ImportedFromFileGuid="b382fe76-0933-4260-9f20-10e304027e90" ImportedFromItemGuid="7910c8bc-290b-4a16-b7fd-434b98cc2b24" bitmap_id="f9c5b694-dced-4977-a15f-92d9fff043bc">
      <text>
        <locale_1033>Macro 00</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Calculate grade between two points</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Calculate grade between two points</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Calculate grade between two given points
#By Thomas Chapman on 11/01/2021

import rhinoscriptsyntax as rs
import math as m

# Get points from user
pt1 = rs.GetPoint('Pick the first point')
pt2 = rs.GetPoint('Pick the second point')
hypotenuse = rs.Distance(pt1, pt2)

rs.EnableRedraw(False)


# Find the rise of given points in any order
if pt1.Z &gt; pt2.Z:
    rise = pt1.Z - pt2.Z
elif pt1.Z &lt; pt2.Z:
    rise = pt2.Z - pt1.Z

# Find the run of given points
run = m.sqrt(hypotenuse**2 - rise**2)

# Detect model units and scale to mm, if mm do nothing
if rs.UnitSystem == 3:
    rise = rise*100
if rs.UnitSystem == 4:
    rise = rise*1000

# Calculate grade based on rise and run
try:
    grade = run / rise

except ZeroDivisionError:
    print('No Grade Found')
    exit()

# Print text dot to screen
curve = rs.AddCurve([pt1,pt2])
midpoint = rs.CurveMidPoint(curve)
rs.DeleteObject(curve)
rs.AddTextDot('1:' + str(abs(round(grade,2))),midpoint)

rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="ba483181-ff75-4d51-9bba-974118b80da5" ImportedFromFileGuid="b382fe76-0933-4260-9f20-10e304027e90" ImportedFromItemGuid="0e5500e8-bcec-4185-93cf-eccdfd6abd3c" bitmap_id="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92">
      <text>
        <locale_1033>Macro 02</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Display the RL of a given point</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Display the RL of a given point</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''


# Show RL of specified point and copy to clipboard
# By Thomas Chapman on 01/10/2021

import rhinoscriptsyntax as rs
import os

point = rs.GetPoint('Select point')
pointZ = point.Z

if rs.UnitSystem() == 3: #if doc is in CM
    pointZ = pointZ *0.01
if rs.UnitSystem() == 2:#if doc is in MM
     pointZ = pointZ *0.001

rs.AddTextDot('+RL ' + str(round(pointZ,3)),point)

#Copy RL to Clipboard

RL = str(round(pointZ,3))

rs.ClipboardText(RL)


)</script>
    </macro_item>
    <macro_item guid="4211923b-f22f-4ab1-8745-e05f836d0bf8" ImportedFromFileGuid="b382fe76-0933-4260-9f20-10e304027e90" ImportedFromItemGuid="dfacc9e6-343b-473b-b568-a88fc8e744be" bitmap_id="8a465cae-79a9-4baa-b77e-ef3d92b27f3c">
      <text>
        <locale_1033>Macro 03</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

# MOVE OBJECT TO SPECIFIED RL
# BY THOMAS CHAPMAN ON 01/10/2021

import rhinoscriptsyntax as rs
import Rhino.Geometry as geo

obj = rs.GetObjects('Select objects',preselect=True)

if obj:
    current = rs.GetPoint('Select point')
    
    if current: 
        rl = rs.GetString('RL to move to?')
        rl = float(rl)
        
        if rs.UnitSystem() == 3: #if model is in cm scale by 100
            rl = rl*100
        elif rs.UnitSystem() == 2: #if model is in mm scale by 1000
            rl = rl*1000
        
        if rl == 0.000: #move objects to the 0 coord
            target3 = current.Z
            if target3:
                target3 = target3 *-1
                target4 = geo.Point3d(0,0,target3)
                rs.MoveObject(obj, target4)

        elif rl &gt; 0.000:
            target = rl - current.Z #+ or - number to target location
            target2 = geo.Point3d(0,0,target) #translated vector needed to hit target
            rs.MoveObject(obj, target2)
)</script>
    </macro_item>
    <macro_item guid="ef338e36-b652-464e-9f92-9d8c746720f3" ImportedFromFileGuid="b382fe76-0933-4260-9f20-10e304027e90" ImportedFromItemGuid="c82d4819-a307-4463-8f01-db5f7f00613d" bitmap_id="bca0a23f-5397-475b-9a42-1ef72c11f863">
      <text>
        <locale_1033>Macro 01</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#RANDOM ROTATE BLOCK INSTANCES AROUND INSERTION POINT
#BY THOMAS CHAPMAN ON 01/09/2021

import rhinoscriptsyntax as rs
import random as r

vec = rs.VectorCreate([0,0,1],[0,0,0])
obj = rs.GetObjects('pick Blocks to rotate randomly', filter=4096, preselect=True)

rs.EnableRedraw(False)

for object in obj:
    num = r.randrange(-180,180)
    point = rs.BlockInstanceInsertPoint(object)
    rs.RotateObject(object, point, num, vec)

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="5a023420-191b-433d-9347-d6221ccc57d3" ImportedFromFileGuid="b382fe76-0933-4260-9f20-10e304027e90" ImportedFromItemGuid="7c818e2f-ada1-4fd0-92fd-76634ab174e8" bitmap_id="f3c1fd4a-470f-412b-98a3-4374e134c963">
      <text>
        <locale_1033>Macro 12</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Random Drop Block</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Random Drop Block</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs
import random as r


obj = rs.GetObjects('Pick blocks to drop randomly', filter=4096, preselect=True)
dropnum = rs.GetReal("Enter max drop distance")


rs.EnableRedraw(False)

for object in obj:
    num = r.uniform((-abs(dropnum)),0)
    print num
    vec = rs.VectorCreate([0,0,num],[0,0,0])
    point = rs.BlockInstanceInsertPoint(object)
    rs.MoveObject(object,vec)

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="d1ca3149-4600-4d59-891a-116db286a114" ImportedFromFileGuid="b382fe76-0933-4260-9f20-10e304027e90" ImportedFromItemGuid="8b7db927-bc09-45a2-a1ae-d97348b9228c" bitmap_id="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24">
      <text>
        <locale_1033>Macro 04</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Drop objects to surface

#By Thomas Chapman on 17/01/2021
#24/04/2021 revision to capture most error messages

import rhinoscriptsyntax as rs
import itertools

def main():

    # prompt user for obj and surface
    obj = rs.GetObjects('Pick objects',preselect=True,filter=(8+16+32+4096+1073741824))
    surface = rs.GetObjects('Pick Surface/Mesh')
    
    #Check selects are valid
    
    if obj == None:
        return
    if surface == None:
        return
    
    
    meshCheck = rs.IsMesh(surface[0])
    indexnum = []
    surfacetypes = []
    
    
    
    #Check if mixed surface types
    for thing in surface:
        result = rs.IsMesh(thing)
        surfacetypes.append(str(result))
    
    if ('True' in surfacetypes) and ('False' in surfacetypes):
        print ('Please select only one surface type')
        return
    
    
    
    #Turn off redraw to speed up script
    rs.EnableRedraw(False)
    
    # Generate bounding box around obj and find distance between obj and surface
    for objects in obj:
        ptlist = []
    
        # Get bounding box and make a square on lower half and find centroid
        bounds = rs.BoundingBox(objects)
        pl = rs.AddPolyline((bounds[0:4]+[bounds[0]]))
        centroid = rs.CurveAreaCentroid(pl)
    
        # Add three points at the centroid and move them in both z direction
        pt00 = rs.AddPoint(centroid[0])
        pt000 = rs.AddPoint(centroid[0])
        lowpoint = rs.AddPoint(centroid[0])
        pt01 = rs.MoveObject(pt00, (0,0,100000))
        pt02 = rs.MoveObject(pt000, (0,0,-100000))
    
        #Check if Mesh else use nurb instersect
        if meshCheck is True:
            curve = rs.AddCurve((pt01, pt02))
            for plane in surface:
                intersection = rs.CurveMeshIntersection(curve, plane)
                if intersection is None:
                    continue
                ptlist.append(list(filter(None,intersection)))
            merged = list(itertools.chain(*ptlist))
            merged = list(itertools.chain(*merged))
    
        # Create curve to intersect with surface to find distance from obj
        elif meshCheck is False:
            curve = rs.AddCurve((pt01, pt02))
            for plane in surface:
                intersection = rs.CurveBrepIntersect(curve, plane)
                if intersection is None:
                    continue
                ptlist.append(list(filter(None,intersection)))
            merged = list(itertools.chain(*ptlist))
            merged = list(itertools.chain(*merged))
    
        if merged is not None and merged != []:
            # Find the highest Z value and use that to target
            sorted = rs.SortPoints((rs.coerce3dpointlist(merged)), ascending=False, order=4)
            inter = (sorted[0])
            dist = rs.Distance(lowpoint, inter)
    
            # Convert Guid to point list
            intCon = rs.coerce3dpoint(inter)
            lowCon = rs.coerce3dpoint(lowpoint)
    
            # Find if obj is below or above surface and change dist to + or - accordingly
            if lowCon[2] &lt; intCon[2]:
                distCon = abs(dist)
            if lowCon[2] &gt; intCon[2]:
                distCon = (dist)*-1
            elif lowCon[2] == intCon[2]:
                rs.DeleteObjects([curve, pt01, pt02, pl, lowpoint]+merged)
                continue
    
            # Move obj to intersection
            rs.MoveObject(objects, (0,0,distCon))
    
            #deleate construction geo
            try:
               rs.DeleteObjects([curve, pt01, pt02, pl, lowpoint]+merged)
            except:
                continue
    
    
    
            #Clear list values for second run through loop
            del intersection
            del merged
            del ptlist
    
    
    
    #delete any polysurfaces created
    if isinstance(indexnum, int):
        rs.DeleteObjects(surface[indexnum])
    
    # Enable redraw to show results
    rs.EnableRedraw(True)


main()
)</script>
    </macro_item>
    <macro_item guid="161b2a13-4700-4945-9dae-25c70928152b" ImportedFromFileGuid="b382fe76-0933-4260-9f20-10e304027e90" ImportedFromItemGuid="21dfb0af-ee36-440b-bd80-7b54481d6593" bitmap_id="bd3a0457-e280-44b4-95ec-68bf6d152c4f">
      <text>
        <locale_1033>Macro</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
'''

#Model Standard Australian DDA Ramps

import rhinoscriptsyntax as rs
import math as m


if rs.UnitSystem() == 4: #if doc is in M
    Mult = 1
if rs.UnitSystem() == 3: #if doc is in CM
    Mult = 100
if rs.UnitSystem() == 2:#if doc is in MM
    Mult = 1000



pt00 = rs.GetPoint('Pick insertion point')
pt01 = rs.CreatePoint(pt00.X,pt00.Y)
RampOptions = 'Step Ramp', 'Kerb Ramp', 'Ramp', 'Walkway'
RampType = rs.PopupMenu(RampOptions)

rs.EnableRedraw(False)


if RampType == -1:
    exit()

if RampType == 0: #Step Ramp
    Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.9*Mult),pt01.Y,pt01.Z),(pt01)])
    Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
    rs.CapPlanarHoles(Surface)
    rs.DeleteObject(Curve)

if RampType == 1: #Kerb Ramp
#main ramp portion
    Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.52*Mult),pt01.Y,pt01.Z),(pt01)])
    Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
    rs.CapPlanarHoles(Surface)
    rs.DeleteObject(Curve)

if RampType == 2: #Ramp
    Grade = '1:19','1:18','1:17','1:16','1:15','1:14'
    Index = rs.PopupMenu(Grade)
    GradeNum = [19,18,17,16,15,14]
    if Index == 5:
        Rise = 9/(GradeNum[Index])
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+9*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)
    elif Index != 5:
        Rise = 15/(GradeNum[Index])
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)

if RampType == 3: #Walkway
    Grade = '1:33','1:32','1:31','1:30','1:29','1:28','1:27','1:26','1:25','1:24','1:23','1:22','1:21','1:20'
    Index = rs.PopupMenu(Grade)
    GradeNum = [33,32,31,30,29,28,27,26,25,24,23,22,21,20]
    if Index == 0:
        Rise = 25/(GradeNum[Index])
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+25*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)
    if Index == 13:
        Rise = 15/(GradeNum[Index])
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)
    elif Index != 0 or Index != 13:
        Interp = m.floor((( GradeNum[Index] - 20)*(25 - 15)/(33 - 20))+15) #Linear interpolation of landing distance - DDA requirement...Srsly?
        Rise = Interp/(GradeNum[Index])
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+Interp*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="4055eaa6-4427-427c-b6a5-e6cdbac914c2" ImportedFromFileGuid="b382fe76-0933-4260-9f20-10e304027e90" ImportedFromItemGuid="7d96d1b3-a869-475b-8ea7-7f13be4cc035" bitmap_id="4bec978a-dd98-4658-b848-0f810eefd6bf">
      <text>
        <locale_1033>Macro 05</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Patch Multiple Individual closed polylines
#By Thomas Chapman 04/22/2021

import rhinoscriptsyntax as rs

geo = rs.GetObjects('Select Closed Polylines',preselect=True)

uv1 = rs.GetInteger('enter number of UV divisions',number=1,minimum=1)

rs.EnableRedraw(False)
for objects in geo:
    rs.AddPatch((objects),(uv1,uv1),tolerance=0.0001)
rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="652506ee-7343-475c-a018-6ed9c0a76b29" ImportedFromFileGuid="b382fe76-0933-4260-9f20-10e304027e90" ImportedFromItemGuid="0708f468-593b-431e-b1be-9ab12ee37438" bitmap_id="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676">
      <text>
        <locale_1033>Macro 06</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Isolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Isolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

# Get object and find layer it is on
obj = rs.GetObjects('select an object on the layer to isolate',preselect=True)

rs.EnableRedraw(False)

# Create list of selected obj layers
selectedlayers = []
for i in obj:
    layer = rs.ObjectLayer(i)
    selectedlayers.append(layer)

# Select all objects on each layer

for i in selectedlayers:
    rs.ObjectsByLayer(i,True)
isolate = rs.SelectedObjects()

allObjects = rs.AllObjects()

for i in isolate:
    allObjects.remove(i)

# Hide selected objects

rs.HideObjects(allObjects)

rs.UnselectAllObjects()

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="87791b70-7cac-4efc-a5c4-deece16831aa" ImportedFromFileGuid="b382fe76-0933-4260-9f20-10e304027e90" ImportedFromItemGuid="243e2ae2-2b17-4a32-bfbc-c31f0a69f698" bitmap_id="7c225bac-4566-4c22-8529-19795734ecf8">
      <text>
        <locale_1033>Macro 07</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Unisolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Unisolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Unisolate All objects
#By Thomas Chapman 21/05/01

import rhinoscriptsyntax as rs

obj = rs.HiddenObjects()

rs.ShowObjects(obj)
)</script>
    </macro_item>
    <macro_item guid="96e93532-81ce-4156-b7f7-b7ff1364c489" ImportedFromFileGuid="b382fe76-0933-4260-9f20-10e304027e90" ImportedFromItemGuid="6a439abb-5310-41af-b9c1-62bb1e5793c5" bitmap_id="3a30ba51-3cf2-4d5a-ae4e-e7727296e181">
      <text>
        <locale_1033>Macro 08</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Turn Selected Object Layers Off</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Turn Selected Object Layers Off</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

import rhinoscriptsyntax as rs

obj = rs.GetObjects("select obj Layers to turn off")

rs.EnableRedraw(False)

for i in obj:
    layer = rs.ObjectLayer(i)
    rs.LayerVisible(layer, visible=False)

rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="d16957a9-f662-446d-9801-c0533fb38255" ImportedFromFileGuid="b382fe76-0933-4260-9f20-10e304027e90" ImportedFromItemGuid="cfada43d-fe35-43e7-89b1-d34c46709dea" bitmap_id="5ecdbeb8-4c26-464d-965a-d29084b78338">
      <text>
        <locale_1033>Macro 09</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Plan View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Plan View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _T")

)</script>
    </macro_item>
    <macro_item guid="c047d19d-b398-41b0-9fd8-74fe11b70e04" ImportedFromFileGuid="b382fe76-0933-4260-9f20-10e304027e90" ImportedFromItemGuid="1033b894-7cba-4b48-b041-396bd841201e" bitmap_id="3f736f77-7940-4134-9713-dac547abd1c6">
      <text>
        <locale_1033>Macro 10</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Perspective View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Perspective View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _p")

)
</script>
    </macro_item>
    <macro_item guid="cfb1aa22-1db1-4869-b63d-8a0474245511" ImportedFromFileGuid="b382fe76-0933-4260-9f20-10e304027e90" ImportedFromItemGuid="48d9dcdc-e0a5-4cf2-8a34-fcbc0b8e9bc1" bitmap_id="c351dd99-b010-4a89-86fe-835dd645a1b8">
      <text>
        <locale_1033>Macro 11</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import glob
import struct
import imghdr
import rhinoscriptsyntax as rs

#Check document units
units = rs.UnitSystem()

if units == 2: #mm
    scale = 1000
if units == 3: #cm
    scale = 100
if units == 4: #m
    scale = 1

def get_image_size(fname):
    '''Determine the image type of fhandle and return its size.
    from draco'''
    with open(fname, 'rb') as fhandle:
        head = fhandle.read(24)
        if len(head) != 24:
            return
        if imghdr.what(fname) == 'png':
            check = struct.unpack('&gt;i', head[4:8])[0]
            if check != 0x0d0a1a0a:
                return
            width, height = struct.unpack('&gt;ii', head[16:24])
        elif imghdr.what(fname) == 'gif':
            width, height = struct.unpack('&lt;HH', head[6:10])
        elif imghdr.what(fname) == 'jpeg':
            try:
                fhandle.seek(0) # Read 0xff next
                size = 2
                ftype = 0
                while not 0xc0 &lt;= ftype &lt;= 0xcf:
                    fhandle.seek(size, 1)
                    byte = fhandle.read(1)
                    while ord(byte) == 0xff:
                        byte = fhandle.read(1)
                    ftype = ord(byte)
                    size = struct.unpack('&gt;H', fhandle.read(2))[0] - 2
                # We are at a SOFn block
                fhandle.seek(1, 1)  # Skip `precision' byte.
                height, width = struct.unpack('&gt;HH', fhandle.read(4))
            except Exception: #IGNORE:W0703
                return
        else:
            return
        return width, height



#Find and open jgw file, extract scalefactor and x and y coordinates

jgw = rs.OpenFileName(title= 'Select .JGW file',filter="JGW Files (*.JGW)|*.JGW||" )

with open(jgw,'rt') as f:
    numslist = f.read().splitlines()

scaleFactor01 = numslist[0]

worldx = float(numslist[4])*int(scale)
worldy = float(numslist[5])*int(scale)

#Find and open jpg file, extract pixel size

jpg = rs.OpenFileName(title= 'Select .JPG image File',filter="JPG Files (*.JPG)|*.JPG||")

size = get_image_size(jpg)

scaleFactor02 = (float(size[0])*int(scale))
scaleFactor03 = (float(size[1])*int(scale))

# Calculate scale factor

scaleFactorWidth = (float(scaleFactor01))*(float(scaleFactor02))
scaleFactorHeight = (float(scaleFactor01))*(float(scaleFactor03))

origin = (float(worldx), (float(worldy) - float(scaleFactorHeight)), 0)

picturePlane = rs.PlaneFromFrame(origin,(1,0,0),(0,1,0))

rs.AddPictureFrame(picturePlane,jpg,width=(float(scaleFactorWidth)), height=(float(scaleFactorHeight)))

)</script>
    </macro_item>
    <macro_item guid="63812035-1fa4-4e2a-8e3c-41fae14a9a2c" ImportedFromFileGuid="b382fe76-0933-4260-9f20-10e304027e90" ImportedFromItemGuid="c291bc48-843c-4777-9b72-89e46c1ca1ab" bitmap_id="5bb47664-de86-4b8e-88ce-835cfa2b3981">
      <text>
        <locale_1033>Macro 13</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Create Standard Layers</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Create Standard Layers</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Create Standard Layers

import rhinoscriptsyntax as rs
import random as r

#Change Document to Meters, give option to scale



#Add Layers to document

layerList = [
"L_BLDS", 
"L_BNDY_WRKS", 
"L_EDGE",
"L_HARD_ROCK",
"L_HARD_WALL",
"L_HARD_STEP",
"L_HARD_RAMP",
"L_HARD_FNCE",
"L_HARD_PAVE",
"L_LGHT",
"L_ENTO",
"L_PLAY_EQUI",
"L_PLNT",
"L_STRU",
"L_TEXT",
"L_TREE_PROP",
"L_TREE_RETN",
"L_WALL",
"_L_WORKING",
"L_SOFT_GRDN",
"L_SOFT_MLCH",
"L_SOFT_LAWN",
"L_FURN",
"L_SOFT_SHUB"

]



layerList.sort()

parentLayer = rs.AddLayer(name="LANDSCAPE", color=None, visible=True, locked=False, parent=None)

for layer in layerList:
    rs.AddLayer(layer,(r.randrange(255),r.randrange(255),r.randrange(255)),visible=True, locked=False, parent= parentLayer)
)</script>
    </macro_item>
  </macros>
  <bitmaps>
    <small_bitmap item_width="16" item_height="16">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap>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
zBteEwAAAABJRU5ErkJggg==</bitmap>
    </small_bitmap>
    <normal_bitmap item_width="24" item_height="24">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap>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
Eej6kkkAAAAASUVORK5CYII=</bitmap>
    </normal_bitmap>
    <large_bitmap item_width="32" item_height="32">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap>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
gg==</bitmap>
    </large_bitmap>
  </bitmaps>
  <scripts />
</RhinoUI>