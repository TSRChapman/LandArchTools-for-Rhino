<?xml version="1.0" encoding="utf-8"?>
<RhinoUI major_ver="3" minor_ver="0" guid="003cc0c1-1fb4-4fed-b3e0-592c5fc71f3d" localize="False" default_language_id="1033" dpi_scale="100">
  <extend_rhino_menus />
  <menus />
  <tool_bar_groups>
    <tool_bar_group guid="0a94f3e3-88a8-400f-809b-8af7ce7b27e8" dock_bar_guid32="00000000-0000-0000-0000-000000000000" dock_bar_guid64="00000000-0000-0000-0000-000000000000" active_tool_bar_group="02c9cabb-7051-4db9-894c-985f4ca9f4e0" single_file="False" hide_single_tab="True" point_floating="724,505">
      <text>
        <locale_1033>LandArch Tools</locale_1033>
      </text>
      <tool_bar_group_item guid="02c9cabb-7051-4db9-894c-985f4ca9f4e0" major_version="1" minor_version="1">
        <text>
          <locale_1033>LandArch Tools</locale_1033>
        </text>
        <tool_bar_id>1f79bafb-addb-442c-a526-316c1c25c1e3</tool_bar_id>
      </tool_bar_group_item>
      <dock_bar_info dpi_scale="100" dock_bar="False" docking="True" horz="False" visible="True" floating="True" mru_float_style="8192" bar_id="59476" mru_width="868" point_pos="-2,-2" float_point="724,505" rect_mru_dock_pos="0,596,64,966" dock_location_u="59420" dock_location="left" float_size="462,80" />
    </tool_bar_group>
  </tool_bar_groups>
  <tool_bars>
    <tool_bar guid="1f79bafb-addb-442c-a526-316c1c25c1e3" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="d8dc19cb-56d8-4f50-b015-76d6b2e6fb1f" bitmap_id="2031774d-b619-4d50-a94c-51a649570b12">
      <text>
        <locale_1033>LandArch Tools</locale_1033>
      </text>
      <tool_bar_item guid="468ca40e-077a-4076-b4ee-d8c8485693a2">
        <left_macro_id>2e50e8fc-fe18-46af-8250-76b3dd2894f4</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="29ee0aca-d012-4200-b49c-0d5eea8275cc">
        <left_macro_id>9c08eeb1-d56b-4da8-ac47-b738c2cfba75</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="bb59f3de-90f9-46d4-ab26-f7f0b4f33bc4">
        <left_macro_id>136eedeb-b6cb-4706-9479-38e3d5610e62</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="92b7f059-aa41-43e7-8e9b-e664ae714244">
        <left_macro_id>79e85ae5-4866-4711-b150-811cb34ff462</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="3d8ec3c1-e578-4934-bbce-b2b713529b65">
        <left_macro_id>b316c9d5-34ee-4084-a4bc-4ae2e0639f3b</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="b700b9e6-64d3-45f2-9c7a-aa297fcbe7d8">
        <left_macro_id>08b4077f-3e49-4dd7-ae88-975adc26ede5</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="50458a78-96ba-4bbf-b5b1-1177ad501f45">
        <left_macro_id>fc889649-86b3-4e92-b68d-b8ae70323fb0</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9460c1fc-aa4c-43d5-b099-269eeb150bf6">
        <left_macro_id>c9b73a4d-0cb7-4325-82d0-cd41f3eac74d</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="e6157002-56d1-4b6a-a6be-16fbde236e27">
        <left_macro_id>7f01ea08-6bc0-48ca-b230-0d1fe2cab4b5</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="00c05d8b-fd1e-4c95-8cff-ede413d1bbaa">
        <left_macro_id>aa6d38c2-fddc-486f-aa79-ed42d09f5436</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="26541e59-0335-40c1-8f36-20b9dd2d27eb">
        <left_macro_id>b200dd82-2a96-4323-82be-ee1cfa9b8846</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="5e8f48e1-2f6a-4934-837c-ba6d116c786e">
        <left_macro_id>9949a6ce-3f6f-4d76-905b-87fda0216b9a</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="19535442-9ff5-46c4-8526-d29e4b97d8cb">
        <left_macro_id>174277e4-c49e-4b52-8549-49ee868ff707</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="3156980a-3f4b-464f-afa3-6c075b7a3b8d">
        <left_macro_id>cc2bf10e-3bde-4651-8066-e7aa44046d6a</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="ebd2813f-b271-4033-b09a-f30e0d538db5">
        <left_macro_id>8dd66716-9904-4fd1-a67e-a07c44885074</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="1130d146-3b3d-4300-8745-0e0cbba31fc2">
        <left_macro_id>dc01f22c-d20f-4ac5-afb6-5885930fb521</left_macro_id>
      </tool_bar_item>
    </tool_bar>
  </tool_bars>
  <macros>
    <macro_item guid="2e50e8fc-fe18-46af-8250-76b3dd2894f4" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="5bb60bb6-b5e1-4cf6-b207-2aa05bd6bf0f" bitmap_id="fa0e5a7a-0a96-478d-9efb-0c3db555c776">
      <text>
        <locale_1033>Macro 00</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Calculate grade between two points</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Calculate grade between two points</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Calculate grade between two given points
#By Thomas Chapman on 11/01/2021

import rhinoscriptsyntax as rs
import math as m

# Get points from user
pt1 = rs.GetPoint('Pick the first point')
pt2 = rs.GetPoint('Pick the second point')
hypotenuse = rs.Distance(pt1, pt2)

rs.EnableRedraw(False)


# Find the rise of given points in any order
if pt1.Z &gt; pt2.Z:
    rise = pt1.Z - pt2.Z
elif pt1.Z &lt; pt2.Z:
    rise = pt2.Z - pt1.Z

# Find the run of given points
run = m.sqrt(hypotenuse**2 - rise**2)

# Detect model units and scale to mm, if mm do nothing
if rs.UnitSystem == 3:
    rise = rise*100
if rs.UnitSystem == 4:
    rise = rise*1000

# Calculate grade based on rise and run
try:
    grade = run / rise

except ZeroDivisionError:
    print('No Grade Found')
    exit()

# Print text dot to screen
curve = rs.AddCurve([pt1,pt2])
midpoint = rs.CurveMidPoint(curve)
rs.DeleteObject(curve)
rs.AddTextDot('1:' + str(abs(round(grade,2))),midpoint)

rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="9c08eeb1-d56b-4da8-ac47-b738c2cfba75" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="ba483181-ff75-4d51-9bba-974118b80da5" bitmap_id="bb7cccfc-50f6-4b1f-8e49-d256e6abfe1c">
      <text>
        <locale_1033>Macro 02</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Display the RL of a given point</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Display the RL of a given point</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''


# Show RL of specified point and copy to clipboard
# By Thomas Chapman on 01/10/2021

import rhinoscriptsyntax as rs
import os

point = rs.GetPoint('Select point')
pointZ = point.Z

if rs.UnitSystem() == 3: #if doc is in CM
    pointZ = pointZ *0.01
if rs.UnitSystem() == 2:#if doc is in MM
     pointZ = pointZ *0.001

rs.AddTextDot('+RL ' + str(round(pointZ,3)),point)

#Copy RL to Clipboard

RL = str(round(pointZ,3))

rs.ClipboardText(RL)


)</script>
    </macro_item>
    <macro_item guid="136eedeb-b6cb-4706-9479-38e3d5610e62" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="812b1c36-0e85-4b6c-9982-e2b575bf9c7b" bitmap_id="ebf37e0d-1171-4541-8024-0b954df1556f">
      <text>
        <locale_1033>Macro 14</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Calculate Height difference between two points</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Calculate Height difference between two points</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

pt01 = rs.GetPoint('Select first point to measure from')
pt02 = rs.GetPoint('Select second point to measure to')

pt01Z = pt01.Z
pt02Z = pt02.Z

height = abs(pt01Z-pt02Z)
height = round(height, 3)

rs.ClipboardText(height)

rs.MessageBox(height, buttons=0, title="Height difference - Value copied to clipboard")

)</script>
    </macro_item>
    <macro_item guid="79e85ae5-4866-4711-b150-811cb34ff462" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="4211923b-f22f-4ab1-8745-e05f836d0bf8" bitmap_id="fd6c65ba-1ec1-4fc0-a24c-d8403b53cacd">
      <text>
        <locale_1033>Macro 03</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

# MOVE OBJECT TO SPECIFIED RL
# BY THOMAS CHAPMAN ON 01/10/2021

import rhinoscriptsyntax as rs
import Rhino.Geometry as geo

obj = rs.GetObjects('Select objects',preselect=True)

if obj:
    current = rs.GetPoint('Select point')
    
    if current: 
        rl = rs.GetString('RL to move to?')
        rl = float(rl)
        
        if rs.UnitSystem() == 3: #if model is in cm scale by 100
            rl = rl*100
        elif rs.UnitSystem() == 2: #if model is in mm scale by 1000
            rl = rl*1000
        
        if rl == 0.000: #move objects to the 0 coord
            target3 = current.Z
            if target3:
                target3 = target3 *-1
                target4 = geo.Point3d(0,0,target3)
                rs.MoveObject(obj, target4)

        elif rl &gt; 0.000:
            target = rl - current.Z #+ or - number to target location
            target2 = geo.Point3d(0,0,target) #translated vector needed to hit target
            rs.MoveObject(obj, target2)
)</script>
    </macro_item>
    <macro_item guid="b316c9d5-34ee-4084-a4bc-4ae2e0639f3b" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="ef338e36-b652-464e-9f92-9d8c746720f3" bitmap_id="355f8fe2-3d87-4588-a2fe-e1c46fb86cc9">
      <text>
        <locale_1033>Macro 01</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#RANDOM ROTATE BLOCK INSTANCES AROUND INSERTION POINT
#BY THOMAS CHAPMAN ON 01/09/2021

import rhinoscriptsyntax as rs
import random as r

vec = rs.VectorCreate([0,0,1],[0,0,0])
obj = rs.GetObjects('pick Blocks to rotate randomly', filter=4096, preselect=True)

rs.EnableRedraw(False)

for object in obj:
    num = r.randrange(-180,180)
    point = rs.BlockInstanceInsertPoint(object)
    rs.RotateObject(object, point, num, vec)

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="08b4077f-3e49-4dd7-ae88-975adc26ede5" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="5a023420-191b-433d-9347-d6221ccc57d3" bitmap_id="09d62932-5402-4636-a1fd-d2529a7be312">
      <text>
        <locale_1033>Macro 12</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Random Drop Block</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Random Drop Block</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs
import random as r


obj = rs.GetObjects('Pick blocks to drop randomly', filter=4096, preselect=True)
dropnum = rs.GetReal("Enter max drop distance")


rs.EnableRedraw(False)

for object in obj:
    num = r.uniform((-abs(dropnum)),0)
    print num
    vec = rs.VectorCreate([0,0,num],[0,0,0])
    point = rs.BlockInstanceInsertPoint(object)
    rs.MoveObject(object,vec)

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="fc889649-86b3-4e92-b68d-b8ae70323fb0" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="d1ca3149-4600-4d59-891a-116db286a114" bitmap_id="8f6c9e56-471e-45d6-9935-5a31716076a0">
      <text>
        <locale_1033>Macro 04</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Drop objects to surface

#By Thomas Chapman on 17/01/2021
#24/04/2021 revision to capture most error messages

import rhinoscriptsyntax as rs
import itertools

def main():

    # prompt user for obj and surface
    obj = rs.GetObjects('Pick objects',preselect=True,filter=(8+16+32+4096+1073741824))
    surface = rs.GetObjects('Pick Surface/Mesh')
    
    #Check selects are valid
    
    if obj == None:
        return
    if surface == None:
        return
    
    
    meshCheck = rs.IsMesh(surface[0])
    indexnum = []
    surfacetypes = []
    
    
    
    #Check if mixed surface types
    for thing in surface:
        result = rs.IsMesh(thing)
        surfacetypes.append(str(result))
    
    if ('True' in surfacetypes) and ('False' in surfacetypes):
        print ('Please select only one surface type')
        return
    
    
    
    #Turn off redraw to speed up script
    rs.EnableRedraw(False)
    
    # Generate bounding box around obj and find distance between obj and surface
    for objects in obj:
        ptlist = []
    
        # Get bounding box and make a square on lower half and find centroid
        bounds = rs.BoundingBox(objects)
        pl = rs.AddPolyline((bounds[0:4]+[bounds[0]]))
        centroid = rs.CurveAreaCentroid(pl)
    
        # Add three points at the centroid and move them in both z direction
        pt00 = rs.AddPoint(centroid[0])
        pt000 = rs.AddPoint(centroid[0])
        lowpoint = rs.AddPoint(centroid[0])
        pt01 = rs.MoveObject(pt00, (0,0,100000))
        pt02 = rs.MoveObject(pt000, (0,0,-100000))
    
        #Check if Mesh else use nurb instersect
        if meshCheck is True:
            curve = rs.AddCurve((pt01, pt02))
            for plane in surface:
                intersection = rs.CurveMeshIntersection(curve, plane)
                if intersection is None:
                    continue
                ptlist.append(list(filter(None,intersection)))
            merged = list(itertools.chain(*ptlist))
            merged = list(itertools.chain(*merged))
    
        # Create curve to intersect with surface to find distance from obj
        elif meshCheck is False:
            curve = rs.AddCurve((pt01, pt02))
            for plane in surface:
                intersection = rs.CurveBrepIntersect(curve, plane)
                if intersection is None:
                    continue
                ptlist.append(list(filter(None,intersection)))
            merged = list(itertools.chain(*ptlist))
            merged = list(itertools.chain(*merged))
    
        if merged is not None and merged != []:
            # Find the highest Z value and use that to target
            sorted = rs.SortPoints((rs.coerce3dpointlist(merged)), ascending=False, order=4)
            inter = (sorted[0])
            dist = rs.Distance(lowpoint, inter)
    
            # Convert Guid to point list
            intCon = rs.coerce3dpoint(inter)
            lowCon = rs.coerce3dpoint(lowpoint)
    
            # Find if obj is below or above surface and change dist to + or - accordingly
            if lowCon[2] &lt; intCon[2]:
                distCon = abs(dist)
            if lowCon[2] &gt; intCon[2]:
                distCon = (dist)*-1
            elif lowCon[2] == intCon[2]:
                rs.DeleteObjects([curve, pt01, pt02, pl, lowpoint]+merged)
                continue
    
            # Move obj to intersection
            rs.MoveObject(objects, (0,0,distCon))
    
            #deleate construction geo
            try:
               rs.DeleteObjects([curve, pt01, pt02, pl, lowpoint]+merged)
            except:
                continue
    
    
    
            #Clear list values for second run through loop
            del intersection
            del merged
            del ptlist
    
    
    
    #delete any polysurfaces created
    if isinstance(indexnum, int):
        rs.DeleteObjects(surface[indexnum])
    
    # Enable redraw to show results
    rs.EnableRedraw(True)


main()
)</script>
    </macro_item>
    <macro_item guid="c9b73a4d-0cb7-4325-82d0-cd41f3eac74d" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="161b2a13-4700-4945-9dae-25c70928152b" bitmap_id="5b23c4e1-eb31-4a50-9c29-fe4c22f7013f">
      <text>
        <locale_1033>Macro</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
'''

#Model Standard Australian DDA Ramps

import rhinoscriptsyntax as rs
import math as m


if rs.UnitSystem() == 4: #if doc is in M
    Mult = 1
if rs.UnitSystem() == 3: #if doc is in CM
    Mult = 100
if rs.UnitSystem() == 2:#if doc is in MM
    Mult = 1000



pt00 = rs.GetPoint('Pick insertion point')
pt01 = rs.CreatePoint(pt00.X,pt00.Y)
RampOptions = 'Step Ramp', 'Kerb Ramp', 'Ramp', 'Walkway'
RampType = rs.PopupMenu(RampOptions)

rs.EnableRedraw(False)


if RampType == -1:
    exit()

if RampType == 0: #Step Ramp
    Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.9*Mult),pt01.Y,pt01.Z),(pt01)])
    Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
    rs.CapPlanarHoles(Surface)
    rs.DeleteObject(Curve)

if RampType == 1: #Kerb Ramp
#main ramp portion
    Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.52*Mult),pt01.Y,pt01.Z),(pt01)])
    Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
    rs.CapPlanarHoles(Surface)
    rs.DeleteObject(Curve)

if RampType == 2: #Ramp
    Grade = '1:19','1:18','1:17','1:16','1:15','1:14'
    Index = rs.PopupMenu(Grade)
    GradeNum = [19,18,17,16,15,14]
    if Index == 5:
        Rise = 9/(GradeNum[Index])
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+9*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)
    elif Index != 5:
        Rise = 15/(GradeNum[Index])
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)

if RampType == 3: #Walkway
    Grade = '1:33','1:32','1:31','1:30','1:29','1:28','1:27','1:26','1:25','1:24','1:23','1:22','1:21','1:20'
    Index = rs.PopupMenu(Grade)
    GradeNum = [33,32,31,30,29,28,27,26,25,24,23,22,21,20]
    if Index == 0:
        Rise = 25/(GradeNum[Index])
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+25*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)
    if Index == 13:
        Rise = 15/(GradeNum[Index])
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)
    elif Index != 0 or Index != 13:
        Interp = m.floor((( GradeNum[Index] - 20)*(25 - 15)/(33 - 20))+15) #Linear interpolation of landing distance - DDA requirement...Srsly?
        Rise = Interp/(GradeNum[Index])
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+Interp*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="7f01ea08-6bc0-48ca-b230-0d1fe2cab4b5" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="4055eaa6-4427-427c-b6a5-e6cdbac914c2" bitmap_id="5804bfe3-63d7-4a7d-8c76-b6157cd558af">
      <text>
        <locale_1033>Macro 05</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Patch Multiple Individual closed polylines
#By Thomas Chapman 04/22/2021

import rhinoscriptsyntax as rs

geo = rs.GetObjects('Select Closed Polylines',preselect=True)

uv1 = rs.GetInteger('enter number of UV divisions',number=1,minimum=1)

rs.EnableRedraw(False)
for objects in geo:
    rs.AddPatch((objects),(uv1,uv1),tolerance=0.0001)
rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="aa6d38c2-fddc-486f-aa79-ed42d09f5436" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="652506ee-7343-475c-a018-6ed9c0a76b29" bitmap_id="9c8a596d-bb18-4d78-a1bd-3c9f36b54003">
      <text>
        <locale_1033>Macro 06</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Isolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Isolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

# Get object and find layer it is on
obj = rs.GetObjects('select an object on the layer to isolate',preselect=True)

rs.EnableRedraw(False)

# Create list of selected obj layers
selectedlayers = []
for i in obj:
    layer = rs.ObjectLayer(i)
    selectedlayers.append(layer)

# Select all objects on each layer

for i in selectedlayers:
    rs.ObjectsByLayer(i,True)
isolate = rs.SelectedObjects()

allObjects = rs.AllObjects()

for i in isolate:
    allObjects.remove(i)

# Hide selected objects

rs.HideObjects(allObjects)

rs.UnselectAllObjects()

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="b200dd82-2a96-4323-82be-ee1cfa9b8846" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="87791b70-7cac-4efc-a5c4-deece16831aa" bitmap_id="f216ff59-87e0-4779-b23a-f59f489fd9af">
      <text>
        <locale_1033>Macro 07</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Unisolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Unisolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Unisolate All objects
#By Thomas Chapman 21/05/01

import rhinoscriptsyntax as rs

obj = rs.HiddenObjects()

rs.ShowObjects(obj)
)</script>
    </macro_item>
    <macro_item guid="9949a6ce-3f6f-4d76-905b-87fda0216b9a" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="96e93532-81ce-4156-b7f7-b7ff1364c489" bitmap_id="0715c02f-c6d9-4315-ab98-e9bc2b50c469">
      <text>
        <locale_1033>Macro 08</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Turn Selected Object Layers Off</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Turn Selected Object Layers Off</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

import rhinoscriptsyntax as rs

obj = rs.GetObjects("select obj Layers to turn off")

rs.EnableRedraw(False)

for i in obj:
    layer = rs.ObjectLayer(i)
    rs.LayerVisible(layer, visible=False)

rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="174277e4-c49e-4b52-8549-49ee868ff707" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="d16957a9-f662-446d-9801-c0533fb38255" bitmap_id="66c9b1fa-5c01-43e2-b445-bb46d95317aa">
      <text>
        <locale_1033>Macro 09</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Plan View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Plan View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _T")

)</script>
    </macro_item>
    <macro_item guid="cc2bf10e-3bde-4651-8066-e7aa44046d6a" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="c047d19d-b398-41b0-9fd8-74fe11b70e04" bitmap_id="bb1fc722-6a03-4eb0-8bb3-f31a3c768877">
      <text>
        <locale_1033>Macro 10</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Perspective View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Perspective View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _p")

)
</script>
    </macro_item>
    <macro_item guid="8dd66716-9904-4fd1-a67e-a07c44885074" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="cfb1aa22-1db1-4869-b63d-8a0474245511" bitmap_id="6a10c9e6-4eb8-4bdb-9267-29d2f5b36376">
      <text>
        <locale_1033>Macro 11</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import glob
import struct
import imghdr
import rhinoscriptsyntax as rs

#Check document units
units = rs.UnitSystem()

if units == 2: #mm
    scale = 1000
if units == 3: #cm
    scale = 100
if units == 4: #m
    scale = 1

def get_image_size(fname):
    '''Determine the image type of fhandle and return its size.
    from draco'''
    with open(fname, 'rb') as fhandle:
        head = fhandle.read(24)
        if len(head) != 24:
            return
        if imghdr.what(fname) == 'png':
            check = struct.unpack('&gt;i', head[4:8])[0]
            if check != 0x0d0a1a0a:
                return
            width, height = struct.unpack('&gt;ii', head[16:24])
        elif imghdr.what(fname) == 'gif':
            width, height = struct.unpack('&lt;HH', head[6:10])
        elif imghdr.what(fname) == 'jpeg':
            try:
                fhandle.seek(0) # Read 0xff next
                size = 2
                ftype = 0
                while not 0xc0 &lt;= ftype &lt;= 0xcf:
                    fhandle.seek(size, 1)
                    byte = fhandle.read(1)
                    while ord(byte) == 0xff:
                        byte = fhandle.read(1)
                    ftype = ord(byte)
                    size = struct.unpack('&gt;H', fhandle.read(2))[0] - 2
                # We are at a SOFn block
                fhandle.seek(1, 1)  # Skip `precision' byte.
                height, width = struct.unpack('&gt;HH', fhandle.read(4))
            except Exception: #IGNORE:W0703
                return
        else:
            return
        return width, height



#Find and open jgw file, extract scalefactor and x and y coordinates

jgw = rs.OpenFileName(title= 'Select .JGW file',filter="JGW Files (*.JGW)|*.JGW||" )

with open(jgw,'rt') as f:
    numslist = f.read().splitlines()

scaleFactor01 = numslist[0]

worldx = float(numslist[4])*int(scale)
worldy = float(numslist[5])*int(scale)

#Find and open jpg file, extract pixel size

jpg = rs.OpenFileName(title= 'Select .JPG image File',filter="JPG Files (*.JPG)|*.JPG||")

size = get_image_size(jpg)

scaleFactor02 = (float(size[0])*int(scale))
scaleFactor03 = (float(size[1])*int(scale))

# Calculate scale factor

scaleFactorWidth = (float(scaleFactor01))*(float(scaleFactor02))
scaleFactorHeight = (float(scaleFactor01))*(float(scaleFactor03))

origin = (float(worldx), (float(worldy) - float(scaleFactorHeight)), 0)

picturePlane = rs.PlaneFromFrame(origin,(1,0,0),(0,1,0))

rs.AddPictureFrame(picturePlane,jpg,width=(float(scaleFactorWidth)), height=(float(scaleFactorHeight)))

)</script>
    </macro_item>
    <macro_item guid="dc01f22c-d20f-4ac5-afb6-5885930fb521" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="63812035-1fa4-4e2a-8e3c-41fae14a9a2c" bitmap_id="453e4754-ad6c-4387-bd62-ebb302ed6b62">
      <text>
        <locale_1033>Macro 13</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Create Standard Layers</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Create Standard Layers</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Create Standard Layers

import rhinoscriptsyntax as rs
import random as r

#Change Document to Meters, give option to scale



#Add Layers to document

layerList = [
"L_BLDS", 
"L_BNDY_WRKS", 
"L_EDGE",
"L_HARD_ROCK",
"L_HARD_WALL",
"L_HARD_STEP",
"L_HARD_RAMP",
"L_HARD_FNCE",
"L_HARD_PAVE",
"L_LGHT",
"L_ENTO",
"L_PLAY_EQUI",
"L_PLNT",
"L_STRU",
"L_TEXT",
"L_TREE_PROP",
"L_TREE_RETN",
"L_WALL",
"_L_WORKING",
"L_SOFT_GRDN",
"L_SOFT_MLCH",
"L_SOFT_LAWN",
"L_FURN",
"L_SOFT_SHUB"

]



layerList.sort()

parentLayer = rs.AddLayer(name="LANDSCAPE", color=None, visible=True, locked=False, parent=None)

for layer in layerList:
    rs.AddLayer(layer,(r.randrange(255),r.randrange(255),r.randrange(255)),visible=True, locked=False, parent= parentLayer)
)</script>
    </macro_item>
  </macros>
  <bitmaps>
    <small_bitmap item_width="16" item_height="16">
      <bitmap_item guid="fa0e5a7a-0a96-478d-9efb-0c3db555c776" index="0" />
      <bitmap_item guid="bb7cccfc-50f6-4b1f-8e49-d256e6abfe1c" index="1" />
      <bitmap_item guid="ebf37e0d-1171-4541-8024-0b954df1556f" index="2" />
      <bitmap_item guid="fd6c65ba-1ec1-4fc0-a24c-d8403b53cacd" index="3" />
      <bitmap_item guid="355f8fe2-3d87-4588-a2fe-e1c46fb86cc9" index="4" />
      <bitmap_item guid="09d62932-5402-4636-a1fd-d2529a7be312" index="5" />
      <bitmap_item guid="8f6c9e56-471e-45d6-9935-5a31716076a0" index="6" />
      <bitmap_item guid="5b23c4e1-eb31-4a50-9c29-fe4c22f7013f" index="7" />
      <bitmap_item guid="5804bfe3-63d7-4a7d-8c76-b6157cd558af" index="8" />
      <bitmap_item guid="9c8a596d-bb18-4d78-a1bd-3c9f36b54003" index="9" />
      <bitmap_item guid="f216ff59-87e0-4779-b23a-f59f489fd9af" index="10" />
      <bitmap_item guid="0715c02f-c6d9-4315-ab98-e9bc2b50c469" index="11" />
      <bitmap_item guid="66c9b1fa-5c01-43e2-b445-bb46d95317aa" index="12" />
      <bitmap_item guid="bb1fc722-6a03-4eb0-8bb3-f31a3c768877" index="13" />
      <bitmap_item guid="6a10c9e6-4eb8-4bdb-9267-29d2f5b36376" index="14" />
      <bitmap_item guid="453e4754-ad6c-4387-bd62-ebb302ed6b62" index="15" />
      <bitmap_item guid="2031774d-b619-4d50-a94c-51a649570b12" index="16" />
      <bitmap>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
aGoAAAAASUVORK5CYII=</bitmap>
    </small_bitmap>
    <normal_bitmap item_width="24" item_height="24">
      <bitmap_item guid="fa0e5a7a-0a96-478d-9efb-0c3db555c776" index="0" />
      <bitmap_item guid="bb7cccfc-50f6-4b1f-8e49-d256e6abfe1c" index="1" />
      <bitmap_item guid="ebf37e0d-1171-4541-8024-0b954df1556f" index="2" />
      <bitmap_item guid="fd6c65ba-1ec1-4fc0-a24c-d8403b53cacd" index="3" />
      <bitmap_item guid="355f8fe2-3d87-4588-a2fe-e1c46fb86cc9" index="4" />
      <bitmap_item guid="09d62932-5402-4636-a1fd-d2529a7be312" index="5" />
      <bitmap_item guid="8f6c9e56-471e-45d6-9935-5a31716076a0" index="6" />
      <bitmap_item guid="5b23c4e1-eb31-4a50-9c29-fe4c22f7013f" index="7" />
      <bitmap_item guid="5804bfe3-63d7-4a7d-8c76-b6157cd558af" index="8" />
      <bitmap_item guid="9c8a596d-bb18-4d78-a1bd-3c9f36b54003" index="9" />
      <bitmap_item guid="f216ff59-87e0-4779-b23a-f59f489fd9af" index="10" />
      <bitmap_item guid="0715c02f-c6d9-4315-ab98-e9bc2b50c469" index="11" />
      <bitmap_item guid="66c9b1fa-5c01-43e2-b445-bb46d95317aa" index="12" />
      <bitmap_item guid="bb1fc722-6a03-4eb0-8bb3-f31a3c768877" index="13" />
      <bitmap_item guid="6a10c9e6-4eb8-4bdb-9267-29d2f5b36376" index="14" />
      <bitmap_item guid="453e4754-ad6c-4387-bd62-ebb302ed6b62" index="15" />
      <bitmap_item guid="2031774d-b619-4d50-a94c-51a649570b12" index="16" />
      <bitmap>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
kvU0Yqu0AAAAAElFTkSuQmCC</bitmap>
    </normal_bitmap>
    <large_bitmap item_width="32" item_height="32">
      <bitmap_item guid="fa0e5a7a-0a96-478d-9efb-0c3db555c776" index="0" />
      <bitmap_item guid="bb7cccfc-50f6-4b1f-8e49-d256e6abfe1c" index="1" />
      <bitmap_item guid="ebf37e0d-1171-4541-8024-0b954df1556f" index="2" />
      <bitmap_item guid="fd6c65ba-1ec1-4fc0-a24c-d8403b53cacd" index="3" />
      <bitmap_item guid="355f8fe2-3d87-4588-a2fe-e1c46fb86cc9" index="4" />
      <bitmap_item guid="09d62932-5402-4636-a1fd-d2529a7be312" index="5" />
      <bitmap_item guid="8f6c9e56-471e-45d6-9935-5a31716076a0" index="6" />
      <bitmap_item guid="5b23c4e1-eb31-4a50-9c29-fe4c22f7013f" index="7" />
      <bitmap_item guid="5804bfe3-63d7-4a7d-8c76-b6157cd558af" index="8" />
      <bitmap_item guid="9c8a596d-bb18-4d78-a1bd-3c9f36b54003" index="9" />
      <bitmap_item guid="f216ff59-87e0-4779-b23a-f59f489fd9af" index="10" />
      <bitmap_item guid="0715c02f-c6d9-4315-ab98-e9bc2b50c469" index="11" />
      <bitmap_item guid="66c9b1fa-5c01-43e2-b445-bb46d95317aa" index="12" />
      <bitmap_item guid="bb1fc722-6a03-4eb0-8bb3-f31a3c768877" index="13" />
      <bitmap_item guid="6a10c9e6-4eb8-4bdb-9267-29d2f5b36376" index="14" />
      <bitmap_item guid="453e4754-ad6c-4387-bd62-ebb302ed6b62" index="15" />
      <bitmap_item guid="2031774d-b619-4d50-a94c-51a649570b12" index="16" />
      <bitmap>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</bitmap>
    </large_bitmap>
  </bitmaps>
  <scripts />
</RhinoUI>