<?xml version="1.0" encoding="utf-8"?>
<RhinoUI major_ver="3" minor_ver="0" guid="500b66f3-d3ab-4878-a015-52fb16e1e44a" localize="False" default_language_id="1033" dpi_scale="100">
  <extend_rhino_menus />
  <menus />
  <tool_bar_groups>
    <tool_bar_group guid="6db279bc-a6f9-480e-bef9-18989481c51c" dock_bar_guid32="00000000-0000-0000-0000-000000000000" dock_bar_guid64="00000000-0000-0000-0000-000000000000" active_tool_bar_group="72e5126a-f07b-4b67-84eb-f3ef01229182" single_file="False" hide_single_tab="True" point_floating="1580,443">
      <text>
        <locale_1033>LandArch Tools</locale_1033>
      </text>
      <tool_bar_group_item guid="72e5126a-f07b-4b67-84eb-f3ef01229182" major_version="1" minor_version="1">
        <text>
          <locale_1033>LandArch Tools</locale_1033>
        </text>
        <tool_bar_id>c1a3000f-5402-48a5-a97c-8223451ad33b</tool_bar_id>
      </tool_bar_group_item>
      <dock_bar_info dpi_scale="100" dock_bar="False" docking="True" horz="False" visible="True" floating="True" mru_float_style="8192" bar_id="59474" mru_width="868" point_pos="-2,-2" float_point="1580,443" rect_mru_dock_pos="0,551,64,1065" dock_location_u="59420" dock_location="left" float_size="546,90" />
    </tool_bar_group>
  </tool_bar_groups>
  <tool_bars>
    <tool_bar guid="c1a3000f-5402-48a5-a97c-8223451ad33b" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="d8dc19cb-56d8-4f50-b015-76d6b2e6fb1f" bitmap_id="ae0d060b-bb3f-4afe-aca6-6a0c3b0dd150">
      <text>
        <locale_1033>LandArch Tools</locale_1033>
      </text>
      <tool_bar_item guid="c0eb8823-3a4f-43bc-ba1e-5d810416839f">
        <left_macro_id>5a0d34b2-b479-42ae-a3dd-9e82a9e15be0</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="3d3c026a-c59e-4c85-a0c6-2f6ad66eb5ef">
        <left_macro_id>742af662-99dd-4625-b096-f91b5f7fc829</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="4bbb35df-50af-480f-9f77-f5a2c60f01c0">
        <left_macro_id>6eabb083-9a97-4888-8f5c-81150cfdc5c4</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="85545976-1d83-452f-9fb7-59a0dc221405">
        <left_macro_id>ec8c7440-e205-4b16-8b75-52520727e514</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="ee24edfc-80f6-46d4-93e7-0f2834c40ea9">
        <left_macro_id>ca082728-0e93-43b2-a0e7-3ea9722b4f0e</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="1887281c-5b72-487b-81ef-93c9fe1fb25d">
        <left_macro_id>790b0b8a-00e6-42ab-91ec-d7b87fd38e05</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="a578c34f-f028-4a18-91c9-1778b3482ccb">
        <left_macro_id>f9d676f9-04be-4687-9226-1d3686c5af04</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="15760cf7-bbb4-4306-8c1f-ce40efbab2f8">
        <left_macro_id>275519fb-70cf-428c-9383-f525f32e8d77</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="970063c8-f7b5-4b84-a032-bb2c09cd394d">
        <left_macro_id>53011351-8ad8-4f2c-b3c4-a25cc918bb20</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="c06d7557-7f35-4e6b-a71e-38848a8e9719">
        <left_macro_id>20e83af1-0307-486f-bf26-e6499ec3dd34</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="fd534e51-1737-48ec-a8f1-459965af0366">
        <left_macro_id>2d0fc1f8-2c4b-493b-a9ed-bb8ab4d62c12</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="cde49f0b-129c-4466-a4ca-8cf00dda75ab">
        <left_macro_id>8204601d-7865-4449-82ff-d43caebb1427</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="41c932c8-576d-492b-9726-2c2db5926df6">
        <left_macro_id>361c5db8-4c04-4134-a0e1-dd68aea42965</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="0c024066-aced-4a10-85b8-b98a42fb15bd">
        <left_macro_id>acd30cf4-c6d1-4a0c-b54c-99f5c906acd8</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="8b443a22-8079-4300-979d-33cb3ade618d">
        <left_macro_id>9da22139-55ec-40fc-be6e-9fa0facb1584</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="cba06dc4-1d14-4f2a-bc46-be6f364fbb5d">
        <left_macro_id>44118b23-fbe3-4f58-9522-0b76c86a5cf2</left_macro_id>
      </tool_bar_item>
    </tool_bar>
  </tool_bars>
  <macros>
    <macro_item guid="5a0d34b2-b479-42ae-a3dd-9e82a9e15be0" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="5bb60bb6-b5e1-4cf6-b207-2aa05bd6bf0f" bitmap_id="911b6a6d-51d1-4bb4-b999-b6626ad69a5b">
      <text>
        <locale_1033>Macro 00</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Calculate grade between two points</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Calculate grade between two points</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Calculate grade between two given points
#By Thomas Chapman on 11/01/2021

import rhinoscriptsyntax as rs
import math as m

# Get points from user
pt1 = rs.GetPoint('Pick the first point')
pt2 = rs.GetPoint('Pick the second point')
hypotenuse = rs.Distance(pt1, pt2)

rs.EnableRedraw(False)


# Find the rise of given points in any order
if pt1.Z &gt; pt2.Z:
    rise = pt1.Z - pt2.Z
elif pt1.Z &lt; pt2.Z:
    rise = pt2.Z - pt1.Z

# Find the run of given points
run = m.sqrt(hypotenuse**2 - rise**2)

# Detect model units and scale to mm, if mm do nothing
if rs.UnitSystem == 3:
    rise = rise*100
if rs.UnitSystem == 4:
    rise = rise*1000

# Calculate grade based on rise and run
try:
    grade = run / rise

except ZeroDivisionError:
    print('No Grade Found')
    exit()

# Print text dot to screen
curve = rs.AddCurve([pt1,pt2])
midpoint = rs.CurveMidPoint(curve)
rs.DeleteObject(curve)
rs.AddTextDot('1:' + str(abs(round(grade,2))),midpoint)

rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="742af662-99dd-4625-b096-f91b5f7fc829" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="ba483181-ff75-4d51-9bba-974118b80da5" bitmap_id="8a71f94e-562b-4a2e-ad5b-6d554da9ba34">
      <text>
        <locale_1033>Macro 02</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Display the RL of a given point</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Display the RL of a given point</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''


# Show RL of specified point and copy to clipboard
# By Thomas Chapman on 01/10/2021

import rhinoscriptsyntax as rs
import os

point = rs.GetPoint('Select point')
pointZ = point.Z

if rs.UnitSystem() == 3: #if doc is in CM
    pointZ = pointZ *0.01
if rs.UnitSystem() == 2:#if doc is in MM
     pointZ = pointZ *0.001

rs.AddTextDot('+RL ' + str(round(pointZ,3)),point)

#Copy RL to Clipboard

RL = str(round(pointZ,3))

rs.ClipboardText(RL)


)</script>
    </macro_item>
    <macro_item guid="6eabb083-9a97-4888-8f5c-81150cfdc5c4" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="812b1c36-0e85-4b6c-9982-e2b575bf9c7b" bitmap_id="edf0cf8f-c248-4caf-a57c-d29f55ded217">
      <text>
        <locale_1033>Macro 14</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Calculate Height difference between two points</locale_1033>
      </tooltip>
      <help_text>
        <locale_1033 />
      </help_text>
      <button_text>
        <locale_1033>Calculate Height difference between two points</locale_1033>
      </button_text>
      <menu_text>
        <locale_1033 />
      </menu_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

pt01 = rs.GetPoint('Select first point to measure from')
pt02 = rs.GetPoint('Select second point to measure to')

pt01Z = pt01.Z
pt02Z = pt02.Z

height = abs(pt01Z-pt02Z)
height = round(height, 3)

rs.ClipboardText(height)

rs.MessageBox(height, buttons=0, title="Height difference - Value copied to clipboard")

)</script>
    </macro_item>
    <macro_item guid="ec8c7440-e205-4b16-8b75-52520727e514" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="4211923b-f22f-4ab1-8745-e05f836d0bf8" bitmap_id="3accf449-17fc-485c-a914-62a52aa73cac">
      <text>
        <locale_1033>Macro 03</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

# MOVE OBJECT TO SPECIFIED RL
# BY THOMAS CHAPMAN ON 01/10/2021

import rhinoscriptsyntax as rs
import Rhino.Geometry as geo

obj = rs.GetObjects('Select objects',preselect=True)

if obj:
    current = rs.GetPoint('Select point')
    
    if current: 
        rl = rs.GetString('RL to move to?')
        rl = float(rl)
        
        if rs.UnitSystem() == 3: #if model is in cm scale by 100
            rl = rl*100
        elif rs.UnitSystem() == 2: #if model is in mm scale by 1000
            rl = rl*1000
        
        if rl == 0.000: #move objects to the 0 coord
            target3 = current.Z
            if target3:
                target3 = target3 *-1
                target4 = geo.Point3d(0,0,target3)
                rs.MoveObject(obj, target4)

        elif rl &gt; 0.000:
            target = rl - current.Z #+ or - number to target location
            target2 = geo.Point3d(0,0,target) #translated vector needed to hit target
            rs.MoveObject(obj, target2)
)</script>
    </macro_item>
    <macro_item guid="ca082728-0e93-43b2-a0e7-3ea9722b4f0e" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="ef338e36-b652-464e-9f92-9d8c746720f3" bitmap_id="d0acc463-5888-4159-b3cb-1348aca188ab">
      <text>
        <locale_1033>Macro 01</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#RANDOM ROTATE BLOCK INSTANCES AROUND INSERTION POINT
#BY THOMAS CHAPMAN ON 01/09/2021

import rhinoscriptsyntax as rs
import random as r

vec = rs.VectorCreate([0,0,1],[0,0,0])
obj = rs.GetObjects('pick Blocks to rotate randomly', filter=4096, preselect=True)

rs.EnableRedraw(False)

for object in obj:
    num = r.randrange(-180,180)
    point = rs.BlockInstanceInsertPoint(object)
    rs.RotateObject(object, point, num, vec)

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="790b0b8a-00e6-42ab-91ec-d7b87fd38e05" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="5a023420-191b-433d-9347-d6221ccc57d3" bitmap_id="23a59c4e-c6dd-42da-a25a-b3587c11b57e">
      <text>
        <locale_1033>Macro 12</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Random Drop Block</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Random Drop Block</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs
import random as r


obj = rs.GetObjects('Pick blocks to drop randomly', filter=4096, preselect=True)
dropnum = rs.GetReal("Enter max drop distance")


rs.EnableRedraw(False)

for object in obj:
    num = r.uniform((-abs(dropnum)),0)
    print num
    vec = rs.VectorCreate([0,0,num],[0,0,0])
    point = rs.BlockInstanceInsertPoint(object)
    rs.MoveObject(object,vec)

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="f9d676f9-04be-4687-9226-1d3686c5af04" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="d1ca3149-4600-4d59-891a-116db286a114" bitmap_id="81fd428a-6f38-42cc-8aaa-62a6110ac09a">
      <text>
        <locale_1033>Macro 04</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Drop objects to surface

#By Thomas Chapman on 17/01/2021
#24/04/2021 revision to capture most error messages

import rhinoscriptsyntax as rs
import itertools

def main():

    # prompt user for obj and surface
    obj = rs.GetObjects('Pick objects',preselect=True,filter=(8+16+32+4096+1073741824))
    surface = rs.GetObjects('Pick Surface/Mesh')
    
    #Check selects are valid
    
    if obj == None:
        return
    if surface == None:
        return
    
    
    meshCheck = rs.IsMesh(surface[0])
    indexnum = []
    surfacetypes = []
    
    
    
    #Check if mixed surface types
    for thing in surface:
        result = rs.IsMesh(thing)
        surfacetypes.append(str(result))
    
    if ('True' in surfacetypes) and ('False' in surfacetypes):
        print ('Please select only one surface type')
        return
    
    
    
    #Turn off redraw to speed up script
    rs.EnableRedraw(False)
    
    # Generate bounding box around obj and find distance between obj and surface
    for objects in obj:
        ptlist = []
    
        # Get bounding box and make a square on lower half and find centroid
        bounds = rs.BoundingBox(objects)
        pl = rs.AddPolyline((bounds[0:4]+[bounds[0]]))
        centroid = rs.CurveAreaCentroid(pl)
    
        # Add three points at the centroid and move them in both z direction
        pt00 = rs.AddPoint(centroid[0])
        pt000 = rs.AddPoint(centroid[0])
        lowpoint = rs.AddPoint(centroid[0])
        pt01 = rs.MoveObject(pt00, (0,0,100000))
        pt02 = rs.MoveObject(pt000, (0,0,-100000))
    
        #Check if Mesh else use nurb instersect
        if meshCheck is True:
            curve = rs.AddCurve((pt01, pt02))
            for plane in surface:
                intersection = rs.CurveMeshIntersection(curve, plane)
                if intersection is None:
                    continue
                ptlist.append(list(filter(None,intersection)))
            merged = list(itertools.chain(*ptlist))
            merged = list(itertools.chain(*merged))
    
        # Create curve to intersect with surface to find distance from obj
        elif meshCheck is False:
            curve = rs.AddCurve((pt01, pt02))
            for plane in surface:
                intersection = rs.CurveBrepIntersect(curve, plane)
                if intersection is None:
                    continue
                ptlist.append(list(filter(None,intersection)))
            merged = list(itertools.chain(*ptlist))
            merged = list(itertools.chain(*merged))
    
        if merged is not None and merged != []:
            # Find the highest Z value and use that to target
            sorted = rs.SortPoints((rs.coerce3dpointlist(merged)), ascending=False, order=4)
            inter = (sorted[0])
            dist = rs.Distance(lowpoint, inter)
    
            # Convert Guid to point list
            intCon = rs.coerce3dpoint(inter)
            lowCon = rs.coerce3dpoint(lowpoint)
    
            # Find if obj is below or above surface and change dist to + or - accordingly
            if lowCon[2] &lt; intCon[2]:
                distCon = abs(dist)
            if lowCon[2] &gt; intCon[2]:
                distCon = (dist)*-1
            elif lowCon[2] == intCon[2]:
                rs.DeleteObjects([curve, pt01, pt02, pl, lowpoint]+merged)
                continue
    
            # Move obj to intersection
            rs.MoveObject(objects, (0,0,distCon))
    
            #deleate construction geo
            try:
               rs.DeleteObjects([curve, pt01, pt02, pl, lowpoint]+merged)
            except:
                continue
    
    
    
            #Clear list values for second run through loop
            del intersection
            del merged
            del ptlist
    
    
    
    #delete any polysurfaces created
    if isinstance(indexnum, int):
        rs.DeleteObjects(surface[indexnum])
    
    # Enable redraw to show results
    rs.EnableRedraw(True)


main()
)</script>
    </macro_item>
    <macro_item guid="275519fb-70cf-428c-9383-f525f32e8d77" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="161b2a13-4700-4945-9dae-25c70928152b" bitmap_id="4c4a7b6a-0cec-4222-b783-7c70b5616685">
      <text>
        <locale_1033>Macro</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
'''

#Model Standard Australian DDA Ramps

import rhinoscriptsyntax as rs
import math as m


if rs.UnitSystem() == 4: #if doc is in M
    Mult = 1
if rs.UnitSystem() == 3: #if doc is in CM
    Mult = 100
if rs.UnitSystem() == 2:#if doc is in MM
    Mult = 1000



pt00 = rs.GetPoint('Pick insertion point')
pt01 = rs.CreatePoint(pt00.X,pt00.Y)
RampOptions = 'Step Ramp', 'Kerb Ramp', 'Ramp', 'Walkway'
RampType = rs.PopupMenu(RampOptions)

rs.EnableRedraw(False)


if RampType == -1:
    exit()

if RampType == 0: #Step Ramp
    Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.9*Mult),pt01.Y,pt01.Z),(pt01)])
    Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
    rs.CapPlanarHoles(Surface)
    rs.DeleteObject(Curve)

if RampType == 1: #Kerb Ramp
#main ramp portion
    Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.52*Mult),pt01.Y,pt01.Z),(pt01)])
    Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
    rs.CapPlanarHoles(Surface)
    rs.DeleteObject(Curve)

if RampType == 2: #Ramp
    Grade = '1:19','1:18','1:17','1:16','1:15','1:14'
    Index = rs.PopupMenu(Grade)
    GradeNum = [19,18,17,16,15,14]
    if Index == 5:
        Rise = 9/(GradeNum[Index])
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+9*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)
    elif Index != 5:
        Rise = 15/(GradeNum[Index])
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)

if RampType == 3: #Walkway
    Grade = '1:33','1:32','1:31','1:30','1:29','1:28','1:27','1:26','1:25','1:24','1:23','1:22','1:21','1:20'
    Index = rs.PopupMenu(Grade)
    GradeNum = [33,32,31,30,29,28,27,26,25,24,23,22,21,20]
    if Index == 0:
        Rise = 25/(GradeNum[Index])
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+25*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)
    if Index == 13:
        Rise = 15/(GradeNum[Index])
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)
    elif Index != 0 or Index != 13:
        Interp = m.floor((( GradeNum[Index] - 20)*(25 - 15)/(33 - 20))+15) #Linear interpolation of landing distance - DDA requirement...Srsly?
        Rise = Interp/(GradeNum[Index])
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+Interp*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="53011351-8ad8-4f2c-b3c4-a25cc918bb20" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="4055eaa6-4427-427c-b6a5-e6cdbac914c2" bitmap_id="95b02f33-32a3-40e1-bbbc-e0c6367b193d">
      <text>
        <locale_1033>Macro 05</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Patch Multiple Individual closed polylines
#By Thomas Chapman 04/22/2021

import rhinoscriptsyntax as rs

geo = rs.GetObjects('Select Closed Polylines',preselect=True)

uv1 = rs.GetInteger('enter number of UV divisions',number=1,minimum=1)

rs.EnableRedraw(False)
for objects in geo:
    rs.AddPatch((objects),(uv1,uv1),tolerance=0.0001)
rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="20e83af1-0307-486f-bf26-e6499ec3dd34" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="652506ee-7343-475c-a018-6ed9c0a76b29" bitmap_id="1df0f50a-03f6-4f37-9c2e-307e803787be">
      <text>
        <locale_1033>Macro 06</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Isolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Isolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

# Get object and find layer it is on
obj = rs.GetObjects('select an object on the layer to isolate',preselect=True)

rs.EnableRedraw(False)

# Create list of selected obj layers
selectedlayers = []
for i in obj:
    layer = rs.ObjectLayer(i)
    selectedlayers.append(layer)

# Select all objects on each layer

for i in selectedlayers:
    rs.ObjectsByLayer(i,True)
isolate = rs.SelectedObjects()

allObjects = rs.AllObjects()

for i in isolate:
    allObjects.remove(i)

# Hide selected objects

rs.HideObjects(allObjects)

rs.UnselectAllObjects()

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="2d0fc1f8-2c4b-493b-a9ed-bb8ab4d62c12" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="87791b70-7cac-4efc-a5c4-deece16831aa" bitmap_id="2ec23c81-6ebd-4c2e-97f5-89b76b197760">
      <text>
        <locale_1033>Macro 07</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Unisolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Unisolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Unisolate All objects
#By Thomas Chapman 21/05/01

import rhinoscriptsyntax as rs

obj = rs.HiddenObjects()

rs.ShowObjects(obj)
)</script>
    </macro_item>
    <macro_item guid="8204601d-7865-4449-82ff-d43caebb1427" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="96e93532-81ce-4156-b7f7-b7ff1364c489" bitmap_id="9599365d-7e7f-400b-a00e-9a33f4468341">
      <text>
        <locale_1033>Macro 08</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Turn Selected Object Layers Off</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Turn Selected Object Layers Off</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

import rhinoscriptsyntax as rs

obj = rs.GetObjects("select obj Layers to turn off")

rs.EnableRedraw(False)

for i in obj:
    layer = rs.ObjectLayer(i)
    rs.LayerVisible(layer, visible=False)

rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="361c5db8-4c04-4134-a0e1-dd68aea42965" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="d16957a9-f662-446d-9801-c0533fb38255" bitmap_id="d20e8a91-b1ff-452a-bf14-9363f27c09c2">
      <text>
        <locale_1033>Macro 09</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Plan View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Plan View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _T")

)</script>
    </macro_item>
    <macro_item guid="acd30cf4-c6d1-4a0c-b54c-99f5c906acd8" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="c047d19d-b398-41b0-9fd8-74fe11b70e04" bitmap_id="4b782ec4-21c9-4990-95e3-eacef6c849b5">
      <text>
        <locale_1033>Macro 10</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Perspective View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Perspective View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _p")

)
</script>
    </macro_item>
    <macro_item guid="9da22139-55ec-40fc-be6e-9fa0facb1584" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="cfb1aa22-1db1-4869-b63d-8a0474245511" bitmap_id="cec8f2f6-bf91-4cae-9cf0-b897463c1ea9">
      <text>
        <locale_1033>Macro 11</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import glob
import struct
import imghdr
import rhinoscriptsyntax as rs

#Check document units
units = rs.UnitSystem()

if units == 2: #mm
    scale = 1000
if units == 3: #cm
    scale = 100
if units == 4: #m
    scale = 1

def get_image_size(fname):
    '''Determine the image type of fhandle and return its size.
    from draco'''
    with open(fname, 'rb') as fhandle:
        head = fhandle.read(24)
        if len(head) != 24:
            return
        if imghdr.what(fname) == 'png':
            check = struct.unpack('&gt;i', head[4:8])[0]
            if check != 0x0d0a1a0a:
                return
            width, height = struct.unpack('&gt;ii', head[16:24])
        elif imghdr.what(fname) == 'gif':
            width, height = struct.unpack('&lt;HH', head[6:10])
        elif imghdr.what(fname) == 'jpeg':
            try:
                fhandle.seek(0) # Read 0xff next
                size = 2
                ftype = 0
                while not 0xc0 &lt;= ftype &lt;= 0xcf:
                    fhandle.seek(size, 1)
                    byte = fhandle.read(1)
                    while ord(byte) == 0xff:
                        byte = fhandle.read(1)
                    ftype = ord(byte)
                    size = struct.unpack('&gt;H', fhandle.read(2))[0] - 2
                # We are at a SOFn block
                fhandle.seek(1, 1)  # Skip `precision' byte.
                height, width = struct.unpack('&gt;HH', fhandle.read(4))
            except Exception: #IGNORE:W0703
                return
        else:
            return
        return width, height



#Find and open jgw file, extract scalefactor and x and y coordinates

jgw = rs.OpenFileName(title= 'Select .JGW file',filter="JGW Files (*.JGW)|*.JGW||" )

with open(jgw,'rt') as f:
    numslist = f.read().splitlines()

scaleFactor01 = numslist[0]

worldx = float(numslist[4])*int(scale)
worldy = float(numslist[5])*int(scale)

#Find and open jpg file, extract pixel size

jpg = rs.OpenFileName(title= 'Select .JPG image File',filter="JPG Files (*.JPG)|*.JPG||")

size = get_image_size(jpg)

scaleFactor02 = (float(size[0])*int(scale))
scaleFactor03 = (float(size[1])*int(scale))

# Calculate scale factor

scaleFactorWidth = (float(scaleFactor01))*(float(scaleFactor02))
scaleFactorHeight = (float(scaleFactor01))*(float(scaleFactor03))

origin = (float(worldx), (float(worldy) - float(scaleFactorHeight)), 0)

picturePlane = rs.PlaneFromFrame(origin,(1,0,0),(0,1,0))

rs.AddPictureFrame(picturePlane,jpg,width=(float(scaleFactorWidth)), height=(float(scaleFactorHeight)))

)</script>
    </macro_item>
    <macro_item guid="44118b23-fbe3-4f58-9522-0b76c86a5cf2" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="63812035-1fa4-4e2a-8e3c-41fae14a9a2c" bitmap_id="c53ed018-59fe-4093-9336-81ab4e06f25a">
      <text>
        <locale_1033>Macro 13</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Create Standard Layers</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Create Standard Layers</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Create Standard Layers

import rhinoscriptsyntax as rs
import random as r

#Change Document to Meters, give option to scale



#Add Layers to document

layerList = [
"L_BLDS", 
"L_BNDY_WRKS", 
"L_EDGE",
"L_HARD_ROCK",
"L_HARD_WALL",
"L_HARD_STEP",
"L_HARD_RAMP",
"L_HARD_FNCE",
"L_HARD_PAVE",
"L_LGHT",
"L_ENTO",
"L_PLAY_EQUI",
"L_PLNT",
"L_STRU",
"L_TEXT",
"L_TREE_PROP",
"L_TREE_RETN",
"L_WALL",
"_L_WORKING",
"L_SOFT_GRDN",
"L_SOFT_MLCH",
"L_SOFT_LAWN",
"L_FURN",
"L_SOFT_SHUB"

]



layerList.sort()

parentLayer = rs.AddLayer(name="LANDSCAPE", color=None, visible=True, locked=False, parent=None)

for layer in layerList:
    rs.AddLayer(layer,(r.randrange(255),r.randrange(255),r.randrange(255)),visible=True, locked=False, parent= parentLayer)
)</script>
    </macro_item>
  </macros>
  <bitmaps>
    <small_bitmap item_width="16" item_height="16">
      <bitmap_item guid="911b6a6d-51d1-4bb4-b999-b6626ad69a5b" index="0" />
      <bitmap_item guid="8a71f94e-562b-4a2e-ad5b-6d554da9ba34" index="1" />
      <bitmap_item guid="edf0cf8f-c248-4caf-a57c-d29f55ded217" index="2" />
      <bitmap_item guid="3accf449-17fc-485c-a914-62a52aa73cac" index="3" />
      <bitmap_item guid="d0acc463-5888-4159-b3cb-1348aca188ab" index="4" />
      <bitmap_item guid="23a59c4e-c6dd-42da-a25a-b3587c11b57e" index="5" />
      <bitmap_item guid="81fd428a-6f38-42cc-8aaa-62a6110ac09a" index="6" />
      <bitmap_item guid="4c4a7b6a-0cec-4222-b783-7c70b5616685" index="7" />
      <bitmap_item guid="95b02f33-32a3-40e1-bbbc-e0c6367b193d" index="8" />
      <bitmap_item guid="1df0f50a-03f6-4f37-9c2e-307e803787be" index="9" />
      <bitmap_item guid="2ec23c81-6ebd-4c2e-97f5-89b76b197760" index="10" />
      <bitmap_item guid="9599365d-7e7f-400b-a00e-9a33f4468341" index="11" />
      <bitmap_item guid="d20e8a91-b1ff-452a-bf14-9363f27c09c2" index="12" />
      <bitmap_item guid="4b782ec4-21c9-4990-95e3-eacef6c849b5" index="13" />
      <bitmap_item guid="cec8f2f6-bf91-4cae-9cf0-b897463c1ea9" index="14" />
      <bitmap_item guid="c53ed018-59fe-4093-9336-81ab4e06f25a" index="15" />
      <bitmap_item guid="ae0d060b-bb3f-4afe-aca6-6a0c3b0dd150" index="16" />
      <bitmap>iVBORw0KGgoAAAANSUhEUgAAABAAAAEQCAYAAAC5hPTVAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAABwKSURBVHhe7VwHeFTVtk4hJCEhIAkxlACh9yZd
MYD0zJyZSSeZmTMphJBMCQSQfmZCk6aCehWxPkHRi4KIICoiwtXr1Su9JNMyJY2QELqgZL+19pxM
2kyKt3zvvu/+37cy5+yz1tp97bVbPP5vwTQ3qadZxPbiX1sHC5Pa1SRkbXqh7Ds+qGWwSZK7WyUp
EhOj2F8Vv4AYhbITRoFirIFh39MDGQVstlHI7ssXSF80s6wfylwVyp81MIqjBYw81sPESN+7m7CQ
XI+dT67FpBG9QHbYIEyZVx4zn1TGZRADI9eYGPmp+4lZ+E1mipKOKJakEtNc9rY+Rj7EwwharOKU
DZD3d8tj00mBUHrkqkiRYAcmVGoWScVGiWJskSDuoVkgO28Wy7+7DnxGhs2mWagBMlWAgEEgPXkF
CtLIyFJNDDs/PyqpN36/KpBuuxaTTm5AquDb0Z8FgnZUsAaGaPZJhwL5X/mgeigQJ/Qxz5XfLomG
5DOKOD64Fkax7CmqQCj/nhAPz5IZ0oCyuLjAE5GRbfB7ARRcKZQRpsAkku0hkRwNd6JWgfSYXiSb
pWcUV0okaVf1jHwqfOtfJEmpNIoUdr1IfrUYUgG1lMiLOlCjAAuxQJgirYpbQO4kZEJs8gVQ0B8/
TMwmBhGbcyWKnVIOZQGFbjHGyXrw4g4FmDx9lOxLUCDIFyWVIBlE8tctIkWJXij90RgX1wF5obHt
KY2GFAnlK6gwApI3+TY0JGS8wqS2L2BSBuuF8iGGqNSh+VD3ENaVZ/WA9tHBLkofaZwj64/vnvjH
EpX0WHG0Yi40lon43hp48fSfCmg488xixWao1416kWKTVaJYckUkncR/pjBD1ZVGp++AjiXhg2ph
FCUfxOrDjoS/WP9XxfPumkSsjGfxKBQoOCJbhHX/Dh9UCz2TtL8cW6BI9gO0wD36qGQzba6M/EJN
/zcJ5KtJkgrD3qBCdWESSf9M+71YvhDf86E9oEJsRKbo1J4YZhawq6pRgZDdje/1UKPAzLDL7WJZ
sEHMZuA7dGVoqo6W14wC2Udl0WlgYaRWExoMQczDgui0aijcl3mW5hWUgAKwi2DC5tOCxI5iFssG
8SzNZwFNF/S6N82MLBNK/6IpJr0aq5VnaVkZWKDb4jvaOqxKNCyUAYAKSJIaI3Fmy4kaBdDnF+G7
QaiYRt9F8kvEg9COhgp+BasMyr8vhAiMYrkSbQNUq9zDJJR//nuSEg3lcqqAkY1BMw8FWlVjMMwC
Rd7v87Jp+dyBb/j90TwluSqadxfGBXZpWUz6ITBdDDIXzkruYoCBxChmP7GAMgwzRcnikAdScBBi
/hQJhoJDaGw8PoqL8971RIZPTXJ5eF6Mi2v7M4TjC+fBeVEe4K0hNLYoS7n/abCpuO7W7Lxh+Gxd
tN2/WJ33hAXIrsobVZjDjS7P3fREsSbP2T4awa7SvWhTaSvos4YbWbXkOVKZu4mULdpAri3eQO4/
u41YVborlNkV3KXApta+aVVps5tNgTvY1do1FuWayfxr6wEpWGdRcTP519bjvwr+fyjQcHkWJTed
f209IAU6m5Kbxr+6h12jW21Va3/GZ2zzJZo8e5FaZ4cO9Mim1t2EjmW3qnXHKLMrQG8UAvNafL6W
s75LSc767UXqvO3QkTbZVLotoGC7VanNpcwtgTkmdZRBJFXwr60DDPXhxij5pVIYdPSMbD4f3DIU
zFYFwRhwHF1b8A/JeSb6foFAIeQ/Nw0c0sHR2nMNYgbHA8YHlpSAh2pm5KUwHozj2VyDEOJZwMi2
godKLCAMwxyOk5RwANYz0ismJnUAz94YRrFiMfoGOFbigNuQbseD5ypkf8TZDS9SCwJjAU4uYJ7w
Hgwsu3EgrUsYVihi34IRbJctWtGPF/snAkchdGeRCiXJXdzRBVFCOHq1vFgtMF/oaFkZeSGUvN4V
QaHqbRJ5KWRnGS9WC5KR4WMQsGo7lL6j/lNJEcwLKOEz0E3wGyxR7C84f+DFGgNc+VwrVJtNnEKr
sYZwjgDu/YX8qBQ6h2oS4COsxRgtvBJ0QguFbL4hSjqUZ2keMPnahg0KZzGFYoXlKkxG+U+NUNcv
cALHfhMje8MmlhUVCqVNGpOa+UIjRWel0oArTLL7ptsSFKh2+PKPrYdFpdNa1dyhYtWGznxQy2FW
rV1Rtmg9uQdOBZi1w/bs5cH8p+ZhUXPLDTlcNXomdk0eubl0M7EotZ83mxKSsatdoZJbrV/kEAYL
TMAakyJUsmQzTcm9VdvCefbGKEhbIi3LWUf9oRrhGgJhchuUmHI3fMSz10NHoGXTwrp/fVGedg/z
XleYUvZaUqHdSTYnp6KTtQPI6Ss9DvQJ0CsbhozR2CSpN4vTlhGbZh0I5jmFi1ZuI3f+/AX55fW9
/wO8ODacAqLD3Sqgt/BhTrdw+fuRUdVo0iypS0AJKMjmqHD53s/I3S9OkzuHTu5EXkA80FF8SAU6
BNRxdtde7OTQro8+e1oAvW8+sacsIXrNC49u7DtCbh85RchXP5JHx396EYUAq4HexQdcSMDJxaG5
XXq+m9J70P1hHYPJZ5FR5LJIUV22be/dq+9+XF3wzn7y40tvkVWJitPA+x7Qx0B9gJyIjAgMemdW
h073A9q0IUNBCdMtgjADh/zGPBlJRBOfJjFPTSXjBw79G/CyQNQRb4SRj3X+LrPfMHLiGQnZNXFG
9T6N5v6xra+Qs6/tIedf33uy2na3O8/qElKg/d/NiN1aBZOLCrBCt9/7+A45fZ78evT0KXKxqHbF
og7qdmMcuuhkUy9M1qJ9vPn2AXLjyImT1z8+4jZmt/ZAL1FsKtn57tHKr352GXOL8B9sDyqWbGi9
PUCAk7WkcunG6osLVtBujZ2J2gNQYldzhysznqMzercoy91w+dP4dDIwOJS8yyST64s3UiXF0Dsr
QaFdtXoUz+oahxnZWe3Tc0j0wBFk2cRnyClWQ65BVoqUHLm25gVS9vKekTyrEzXtgMIglJ4pSVtK
koeNJSYQAseT2oOSVdtJFfTKG8dO1yhwtpu2QM4ZqB4UwLSWxPUbSowqLSlWaol95VZS8f5hcvPw
SXLjwLG6KaBLgvVSYJGkgAIFkYT3IYXsYlKy4vlH1/YcIjcOnSBVB79pqMAZsTM5P81OOPvj7HiS
2nsgOT5NUn35xXfuVxw6UV154GtXChrj1MyYy0sHjyZPdOpM5kcMJJdeeZfcxqQfPE7uf34afr9q
uhYOPB218sRU0SNprwFoE6qrdr9/D1JAfjv6F3L9ky9P3jp0IoRndQvP76fHrKyInk9Kwc21v7bv
zsOvfyTl+784VXnoq2btgRNGoYzagxv/NnuQzyRNN4mST1tEyVcMwoQzrsjMzLtgl8jOG0WJuTXL
xU7gskY+kygxiufZ7ySkg2PFktIYOU8suRWfRkCYGJh5G8H5xqHQNXAp3Cye92lprJxYJFLw0pLI
NVBmECea9MIEEc/WNI7NmBGgZxKfuyhOri6PxTnDvOP54oTWLzzoRfHpFnHyc2WRcYF80L8ZhHvb
z6zh3BeYO1iy8oZY1FqNNVt7DFyev4J1zrNpdONPNFzRrwuIqRcIsUVK7QdGJWcvBYuMS0DXczeS
cqB8NVdZqNYdhXm02ryYG0jiPnJ0ZauSGwez0Rdsas5QBP4RClEThs4F797gM5r4CvyGdlGTZ7Oq
8l4tytE96WFWc3PBjH8D01tSklNfsCHht2KIxJbG3bOotB/TGf3PMNGwZHNjwO7vtmZzxcjUUIkd
CCbi9Ne6kDPYlbrVJZBlmgUEruRBsgbY1VquUKk7Z83SPcABhRI4WkiXIFbI7tcWDSe3LN/UeM6E
sC9eFw5JWwh03KriKm2qPHJRyf1uU2qNUE67YAY/9Urq0vY8uxP1unE5MNhVXDww7zNnay8UKrUn
QdEKSw7X2936YSN7UKDigmyq9RNgZE6yqHUzDLlcKOE4p+X+1wFn7hCT+9bmDrhmCrOzt8pi0t6o
jM/40Mwv1LcY5kjWz8Sw72MhwQQ7xsgoatzZlgFn7pCCn8pi5l+uiE0/0OoUoIGEufHBkuiUfJhs
PsUHtxzWCbH+Rka+WS+SqQpE7DlrrLwb/6llwDKo2T8xiOVvQHaepx+agCkqmXHu+GEtGAW1G28u
lzgApwcMaF8pSWXKkzXnTCm5F1vVuAyzEzLsidknqzJXkQfLt5NCTd45/lPTwP3GooQFZ66B11YF
Dpedt1QWpe4Mz+IaRZGCkEJGzhkVi67fWbaFFOXARIy3E00qKJg0u489OpW7zuYY7oH1KQXBhlNA
lwpwT8kWnbbVGq+6/3DRRvLriudJJTiXlfz6el16CN8KVbp8XtQBU3z68yWZy+wQwyWLZt1ZjMEd
gfN5Bjzafbyowx40afP/5TAJZJHQjTkDlDr+Qquc0jC8hkxiBVcIZJ7LhlFhhF4o30JkOQR3//HX
wLBbG4bX0O2ETHI3cSHwODZwKFAzfoQ+QJkgBdqG4TUEsdNtNeCpdTjdKTAysueIVEOPEdDNTPh2
EwhToRcoRlNhhDsF+Yz8aSiD1fB9tUEkW4PhwLMGUrEatxapMMJtCoRy6c24BceuxaYfMwtYOunG
X3yviFvwk5lhMzGsiTKQbcBtNNwaMwjZyzQMfvEdw8F+OnYE9SL5ppq84q9ZzD5HmXnFZTAFNglZ
uuKNv/heNyLU+mQV5NUEecVf3Min4S1RgKu0VlHKacjPMah/IOmxazHpp8HM/wlqYRWmqkkFhRLF
6ApgwtVc/ICEeTQJ5d8ZRfKVzSqAPyOxYWADwUJEQgZMjSsFkCojFqCzxbZUAZj9v9MUiOQLYAjU
QvVq0dxhVY3Bto2tC5OFhDEYROxfgXk9karpOzSqQlTQCOY4NswmSdFaID+YJySMAVIiw1MRN+Lm
03dno2khZgGpHY+tx5i5PQfaMkZNgjHXQ+kIajmGRPbom39xwXJyc9lmohwz+SGEpTk+eeBysAao
/hGaOug9JqzH+Z/TlpDbS7dQ61sGJj1j1MQ78E0ANLitpxcJbOPzJXha1GLVRfi0iP4/pI+aSEZ3
CSejHu9GRoZ2I2O79CBDQ7qQtl5et/28vK/4gAI/b2/Sro3PbR9Pb9wFp+Npx/D2HU/8BDE/O2k6
5tsleXt6Eh8vL/oMZpyE+PrjPjNdS/MPbhe44y1hEnlpdiwZFtqVjMQUAGFKJnTtSbq37wip8L7e
BpRgCgLa+Nzx8/T+E8g63V3vIF/f7c/PkJBbkH/01ktgWMOy+E6uIWO79vwSeESYAiiD41AGzzjE
6iOpz2MhZHdUIsHt4lswrH2vWERmRAzA5OPZi+6QdKyFAMpdB57e3t5M8uBx11BANmwseVOQSP6W
mktiB40kB2LTyMuQtW6BQduQ1yFSHyHdOnS4/GPKYvLbyufJmfnLyLwho0lkz75kn4Qld5/dSm5A
igR9h2AButzxwxTEygaPqyqEScdt8AUwJR/HppKKxZtodl6AsoEUbAdef4eIayQmDxv7q12jgxg3
0ekNCr8yJ44E+LR9Fb679NQbIiXtiXG/4vwIk47rSKEBgVjX9EBLS6FcNDHy0QeQ/y7t2++Hd7dt
3y3aeHmtDfDxPQKPzS53uMM/Zg/m8PbAv02b1tuDyeF98q9kriQPoE1I+g5Be/CS41PzoPbgfMZy
Ug4O5fbpIjI4+HFoxl4P/Lx85vE8bhE+Iiz8h+PSbPLFvEwS2aMP8fHwpF3X18sb6Z6vl9eZhuTl
6Ul9RWoPvpEqyTloxv0f6+y0AUjYhfEXOkEj4nkc9uDFmdG09R2MTydTIAVtecFgP38CERCoWpu7
FCCoPdg+XQIe6nY61d0yTUQGdAolIf4BZEKXXj8AT7NrSUm9O4aQXXMTqC34feULZK9YTiI6BmM2
9vI8LuHaHqTlEumwMeRI4gJq6roEBuEsxmWzbo09mOEQqY//2gMX+GfYg1YjCMjVMWNchMNTQM0u
h6G9x+2faPrGA0YiNTSgUsgSB6/Qf5zA3d9668u4rINHRs8DJWAAICm+3/Dr2MDSRkxAHwEP9+J2
CTocOFa63MjFQ40ngHbGDBpadBlmqw9XvEBMyrUkbdi4axD+NtC3QHhK1u0kbR0Q0YyLJDehId2C
lok7HVljJhMfGNrh22bK5QZPTe3V+/LOWdFkUvcIur9wNWsVkQ4dQ8Z37UWbNzNguA346CG4hpgy
rksvwynwB36DrvytTAXuTnfSLagjEQ8YTv4OHszvK18Eq/UsmdNjAGYnySFWiwxBv6HgWKyntuCk
TE2e6d2fdPDzI/Lh42j4HWje2MEUQ8dhVvIcYrXwCWjTNlczPrLqbWEyGR3WnSydOI18x+YQcMAI
038oKchaTVY9NfNhJ9+ATcDvuol7e3p/AM2YPDdNSF29X5dvJ+cyniUSyMZAMPMB3m0bH3LkgXNo
PKOI9u/I8kkzqlEBGpM7y7aSDVMFv0E4btjirq/LrWNsSJeAsFX6gjf28tonZ1JHC12cxwMDcbN2
CNAuIIwkBqgexEATHI8UQaH+AW8KoWB7BXX4HN5r5sq4nvg+EDaqZoEdDI8XjaBvtUAD0/oNvD8C
tINNGtIm4e/tswUaElom3B1vHcA7zVs/JYocjEsnER2CcYe75XkGYe2ap2ZR047N90BcGoFhDw9z
1a5auIMnCK+G+kdhbP+4boR7jQdg1O7dMRiVhDo4XcDLw2sttHUQ3ki99ZqFJxytUQnuQ/bpGILW
qItDog68wJSvfHJGvZgbUgMlzoL17eDrv0EXOadRzA2JpmTJZhixM8nw0K4nQZZu3rcP8Q/86lD8
fHIXOo0rwRrCNTVMoTF7DZkUGoHHUZ3Ha8IHhnQ+/ilUGcaAMblSgMYEXcCZEYPtIDPVIVqLMCxl
9JHQQ2kkDDFfBeG5fQYXA6/LKQ+iC0x7vkYljm3iPEeyIWYUntN7cBHwNHtKMLRHx05fYOPB7NCY
F64iUX2HlMC3Fp9RDOvTMfjLwwkZdOdX0GdIk8l2h84DHut8nC/tP3y8Ejcpmz6P968GDuNRjsfW
QyaEBpP5xJMPgnz9cB3N9c6OC3Tt5NfutaUTppFCqAEcF/aIZGRMlx54RSfSweIesyaERZz9KDqF
CuKaMu41YaM6k76MJA4fdQt6LZ7daWQnHwP7lycbNOEuLn+gg9lwtwtnMbiisQOmBQODQ9HEoamn
bk9QoI/v56/MjqNjYc2pB1eEhxgwNegKDw3uXg6y9M6Ld7s2bZZzT8+txo/I5Eq4hm4t20w+gxba
77HOeIKo1tD6eHqv2zyNoXl3t+OHfePLpIWkf3DIVyDSySFZC5+gtn67d0UlOHpiAyWo+AdFDhna
Kews8Lq9uubfrX3Qwf0xaaSKdmeHMPbICzAdjOwZYQSe4Q5W9wgZ1Cn02xPgI6HbXw6FagATJuo/
rBS+TXKwNI+e48PCz/49bSk9RhIzdMR9CGvZSdk6GDkzYpA9dcR4dKj+2IFfwGyg1u16/SHgTQG8
NXBjyZaRJblbnetE9oXrwvEaAn7ng1wDz9dYVVwVunRQbc6dPptau7sY2gNegOCDXANjsWXpKrDu
QdFDs0pHBw3cqMW2YNesb/rsCSowqLR3bWruW+tCrtSm5C7jUSqrWvuCKVP3qEUKjMBoUXHbinK0
ybggB8+LIQtbTWru9xYpwJgsah29amNTcV+YNXm3rVncL5Zs7laLFGBeLSodvTFVnM2NsWnybqKX
albqyptXALWApW3L1r7JB0EB6lbjPBoVlKo3NN2BsJ5pKqDe+SAPCyi7Bw6WNVtnNi/hqHNFC1bF
7bv/7LZ6O10uUZjNfYu9sSgr74FdzeGqrod9se4Z9GDImp2N99oaAsrjRKGKs9ozdTfg+XUMw2o1
L8z7zarOK4OUXKSM7mBT6k5Z1NxZzIoNswHlBCk5C0o+LFRqz0HtXOVZXYMqUHFn4TcKGlhVsTrv
kCGTu2NbyEVjeIsUWLO0l+wLV4VDFR8lq3cQPGphylrVE8ML1c2UAST7AvYPPGJhV+mWEN2rBLKz
CmvCqOauY/XyrK4BPTAVBDQfxX3kjectLEpupWWh4xADhltVWhXP6hJ4gHNcWGD7lyM6Bn8Iz2gP
W3QiBgcLxeCQsIOZIyY9RB8JV7ZXgfM9Obw3TrSWAjU6do/TvfGBPn47Rf2G6XGM/CV9KYyTjs1a
tMo40KCnhitbqcMnFEOqsBXiXUdcuKDT+NQQ34CfF4+fSn5KzaUCdH9h0Xp6cAWP02C/wHN6r82J
J8M7h6HjhU5HvS12TMnkdj4+p2dGDCCvAiNOtM3gZHwaN59kjJ5EurbvUAY8WUCNyqOdt4f3Mz2D
Om2WDBppwtnKEvBQcExIHTGBZI5+imCYdMjYG0NCu7zt7+2Nk05c4cFIaYkv7eQbWLpxioDYNDpC
1r5Mp7t/TVlMVzhxtMYOhJfC9sekgrsTjoMNrvDRM60IvzYebSZDEjeK+g0t2DRVQHCvhc6boUtj
NvaIZYQdMfbWmLDwvX5eXrh2gLMWmoIa4DnFKUFt2/4Q2aMvSRryBFk+aTqdxadAVub2HUzCAoPQ
X84AqndGC2shrZNfwNlcqAWsQjSq+qzVdHFyXeRccprV0JHarFxLXpoVQ0Y83hVHatxaprWAyRgb
5Ou/RdB38Pk/zYm++T04EuhUPVjxPNB2ujCHE40PY9jfssZMtvTqGIxnlfHENG0HdREB9DWeEF0I
Jf8+NJyvkrMIN3k2mdqrHxYczlRwll8PtCWCN7pD0n/45dei4u6clKvJh9EKkjNuClFA/ndCsnHN
+X0R+2D+yAnGPh06fQAy7lsiVuF9GCfR5cMqxHccN5triXgCdmavDp32xA8eUfweuLf6rDV0GnhC
qiJLxj9zf9Tj3f8CPOgvOOvfHQYCrZwe0f+XmAGjSkMDAnC8mAPUomXRfzOKBBkh56OSeuNFcT7I
CdygvzQ3qWdBbEpnvCCF/x8BT8wg4TMSbgPvskXLS42MAk/QO1EwOzlIL5AdLpSkWE2M/EuzkM03
R7FlJqHcdpWRW/QCtriQSb7moWfYz3Cj2szIFvOyFIY5sjFmkYJeQ9ELpRVGkbwcL1IXQhjerrkg
ZqsvzUy552EUsZ/g3jLEghtxTuB9Hbzrz1+GuYn/LCGfkY43MvLjuEtuFMl2mPGKu1sFIulJszj5
V6OA/cYmSSF6ieMirV4o34unIQoECrRMHi4VGMXp/fEaLsR6CsLldOuckeKBfw/8dw7IDynMcTC7
UID/OIFu4DPsWmvsIn/Ixg3c+S6LywrEe+FNKoAu5wmC7+H9LXrMipFPxX9ZcEmsqDYKpTPwfq9r
BUIZHaqMwsTHsZrwFhneKLJD/rHUK7HgBNI8ENxdEetCgVnkCNCLZSL8Nw14fR3PqjlI9vUVSUo1
nkkAwS9Ko9NrFRgYxQG87GQSyUuhus6ZoLHgf5nAfyZBGQB4lwvaRdEFEVtdIJTnF0PqjALHBWsP
g0DxKTYWLGlMCV7HonlkZDgWOgFl9BmGG0WJtxznERSOhlfAyEbZYlLmmESKWUaxTGBk2GSbOEWq
F8+r938Q8C4b8hlFCqFZDPz8pfp/EB4e/wvkN52YDpW5RAAAAABJRU5ErkJggg==</bitmap>
    </small_bitmap>
    <normal_bitmap item_width="24" item_height="24">
      <bitmap_item guid="911b6a6d-51d1-4bb4-b999-b6626ad69a5b" index="0" />
      <bitmap_item guid="8a71f94e-562b-4a2e-ad5b-6d554da9ba34" index="1" />
      <bitmap_item guid="edf0cf8f-c248-4caf-a57c-d29f55ded217" index="2" />
      <bitmap_item guid="3accf449-17fc-485c-a914-62a52aa73cac" index="3" />
      <bitmap_item guid="d0acc463-5888-4159-b3cb-1348aca188ab" index="4" />
      <bitmap_item guid="23a59c4e-c6dd-42da-a25a-b3587c11b57e" index="5" />
      <bitmap_item guid="81fd428a-6f38-42cc-8aaa-62a6110ac09a" index="6" />
      <bitmap_item guid="4c4a7b6a-0cec-4222-b783-7c70b5616685" index="7" />
      <bitmap_item guid="95b02f33-32a3-40e1-bbbc-e0c6367b193d" index="8" />
      <bitmap_item guid="1df0f50a-03f6-4f37-9c2e-307e803787be" index="9" />
      <bitmap_item guid="2ec23c81-6ebd-4c2e-97f5-89b76b197760" index="10" />
      <bitmap_item guid="9599365d-7e7f-400b-a00e-9a33f4468341" index="11" />
      <bitmap_item guid="d20e8a91-b1ff-452a-bf14-9363f27c09c2" index="12" />
      <bitmap_item guid="4b782ec4-21c9-4990-95e3-eacef6c849b5" index="13" />
      <bitmap_item guid="cec8f2f6-bf91-4cae-9cf0-b897463c1ea9" index="14" />
      <bitmap_item guid="c53ed018-59fe-4093-9336-81ab4e06f25a" index="15" />
      <bitmap_item guid="ae0d060b-bb3f-4afe-aca6-6a0c3b0dd150" index="16" />
      <bitmap>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
AAAAAElFTkSuQmCC</bitmap>
    </normal_bitmap>
    <large_bitmap item_width="32" item_height="32">
      <bitmap_item guid="911b6a6d-51d1-4bb4-b999-b6626ad69a5b" index="0" />
      <bitmap_item guid="8a71f94e-562b-4a2e-ad5b-6d554da9ba34" index="1" />
      <bitmap_item guid="edf0cf8f-c248-4caf-a57c-d29f55ded217" index="2" />
      <bitmap_item guid="3accf449-17fc-485c-a914-62a52aa73cac" index="3" />
      <bitmap_item guid="d0acc463-5888-4159-b3cb-1348aca188ab" index="4" />
      <bitmap_item guid="23a59c4e-c6dd-42da-a25a-b3587c11b57e" index="5" />
      <bitmap_item guid="81fd428a-6f38-42cc-8aaa-62a6110ac09a" index="6" />
      <bitmap_item guid="4c4a7b6a-0cec-4222-b783-7c70b5616685" index="7" />
      <bitmap_item guid="95b02f33-32a3-40e1-bbbc-e0c6367b193d" index="8" />
      <bitmap_item guid="1df0f50a-03f6-4f37-9c2e-307e803787be" index="9" />
      <bitmap_item guid="2ec23c81-6ebd-4c2e-97f5-89b76b197760" index="10" />
      <bitmap_item guid="9599365d-7e7f-400b-a00e-9a33f4468341" index="11" />
      <bitmap_item guid="d20e8a91-b1ff-452a-bf14-9363f27c09c2" index="12" />
      <bitmap_item guid="4b782ec4-21c9-4990-95e3-eacef6c849b5" index="13" />
      <bitmap_item guid="cec8f2f6-bf91-4cae-9cf0-b897463c1ea9" index="14" />
      <bitmap_item guid="c53ed018-59fe-4093-9336-81ab4e06f25a" index="15" />
      <bitmap_item guid="ae0d060b-bb3f-4afe-aca6-6a0c3b0dd150" index="16" />
      <bitmap>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</bitmap>
    </large_bitmap>
  </bitmaps>
  <scripts />
</RhinoUI>