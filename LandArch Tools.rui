<?xml version="1.0" encoding="utf-8"?>
<RhinoUI major_ver="3" minor_ver="0" guid="b382fe76-0933-4260-9f20-10e304027e90" localize="False" default_language_id="1033" dpi_scale="100">
  <extend_rhino_menus>
    <menu guid="d58ceae7-fdb0-4104-80da-274b94ad44a9">
      <text>
        <locale_1033>Extend Rhino Menus</locale_1033>
      </text>
    </menu>
  </extend_rhino_menus>
  <menus />
  <tool_bar_groups>
    <tool_bar_group guid="9aadbb0a-83c7-46d9-87e6-bc14ee140883" dock_bar_guid32="00000000-0000-0000-0000-000000000000" dock_bar_guid64="f820a6f5-de1b-496f-a242-e1f86ebd9c42" active_tool_bar_group="e2be19e9-c726-4583-9324-8e5e52137fa6" single_file="False" hide_single_tab="True" point_floating="196,401">
      <text>
        <locale_1033>LandArch Tools</locale_1033>
      </text>
      <tool_bar_group_item guid="e2be19e9-c726-4583-9324-8e5e52137fa6" major_version="1" minor_version="1">
        <text>
          <locale_1033>LandArch Tools</locale_1033>
        </text>
        <tool_bar_id>f31347de-b949-4ea4-89ed-3d89808e6bd4</tool_bar_id>
      </tool_bar_group_item>
      <dock_bar_info dpi_scale="100" dock_bar="False" docking="True" horz="False" visible="True" floating="True" mru_float_style="8192" bar_id="59488" mru_width="868" point_pos="-2,-2" float_point="196,401" rect_mru_dock_pos="0,0,0,0" dock_location_u="59419" dock_location="top" float_size="433,62" />
    </tool_bar_group>
  </tool_bar_groups>
  <tool_bars>
    <tool_bar guid="f31347de-b949-4ea4-89ed-3d89808e6bd4" ImportedFromFileGuid="69f5f9b3-2baf-42aa-910f-b7d558cf5498" ImportedFromItemGuid="69b13ca2-e1a4-4e0c-94a5-019b137651fb" bitmap_id="913e2d65-5c0b-4f49-a6e7-d8071d9bb603">
      <text>
        <locale_1033>LandArch Tools</locale_1033>
      </text>
      <tool_bar_item guid="01bfa2f2-6756-4434-ad1f-189581d26dba">
        <left_macro_id>7910c8bc-290b-4a16-b7fd-434b98cc2b24</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="7a5ba988-4139-4613-b6ce-a3c118c1101c">
        <left_macro_id>0e5500e8-bcec-4185-93cf-eccdfd6abd3c</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="bac500cd-2835-4e11-a445-8fce3530a936">
        <left_macro_id>dfacc9e6-343b-473b-b568-a88fc8e744be</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="a5871cc7-a501-4a7d-b976-79d802ccd608">
        <left_macro_id>c82d4819-a307-4463-8f01-db5f7f00613d</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="3665f0d3-2afb-44f3-a1c3-384616dcaba5">
        <left_macro_id>7c818e2f-ada1-4fd0-92fd-76634ab174e8</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="322118cd-37bd-4b77-8327-00739b980dde">
        <left_macro_id>8b7db927-bc09-45a2-a1ae-d97348b9228c</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="0034992c-5077-4dbb-a290-afd006c44619">
        <left_macro_id>21dfb0af-ee36-440b-bd80-7b54481d6593</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="d4628a23-8646-4555-bd3c-e4ef69963c81">
        <left_macro_id>7d96d1b3-a869-475b-8ea7-7f13be4cc035</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="d3527186-fea0-43f2-8421-297a28794807">
        <left_macro_id>0708f468-593b-431e-b1be-9ab12ee37438</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="3975eb3f-4570-41b9-880d-d4c1f367bc27">
        <left_macro_id>243e2ae2-2b17-4a32-bfbc-c31f0a69f698</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="1eac47dc-c07d-43a2-88d2-d6f6eb440db6">
        <left_macro_id>6a439abb-5310-41af-b9c1-62bb1e5793c5</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9237db66-4fad-4805-9e50-ca7ee7be1e3f">
        <left_macro_id>cfada43d-fe35-43e7-89b1-d34c46709dea</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="bdcbdeec-8591-42e5-9542-179c4163e1d8">
        <left_macro_id>1033b894-7cba-4b48-b041-396bd841201e</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="ffb510e6-0434-40e3-8061-dc128c1a59b2">
        <left_macro_id>48d9dcdc-e0a5-4cf2-8a34-fcbc0b8e9bc1</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="73a06810-e1d4-4690-807d-8fdf16cd989e">
        <left_macro_id>c291bc48-843c-4777-9b72-89e46c1ca1ab</left_macro_id>
      </tool_bar_item>
    </tool_bar>
  </tool_bars>
  <macros>
    <macro_item guid="7910c8bc-290b-4a16-b7fd-434b98cc2b24" ImportedFromFileGuid="69f5f9b3-2baf-42aa-910f-b7d558cf5498" ImportedFromItemGuid="fbaa7976-2606-4c4e-8d83-5651d4cd4f02" bitmap_id="7172de31-ed80-4ac8-84f7-7103a9caecaa">
      <text>
        <locale_1033>Macro 00</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Calculate grade between two points</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Calculate grade between two points</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Calculate grade between two given points
#By Thomas Chapman on 11/01/2021

import rhinoscriptsyntax as rs
import math as m

# Get points from user
pt1 = rs.GetPoint('Pick the first point')
pt2 = rs.GetPoint('Pick the second point')
hypotenuse = rs.Distance(pt1, pt2)

rs.EnableRedraw(False)


# Find the rise of given points in any order
if pt1.Z &gt; pt2.Z:
    rise = pt1.Z - pt2.Z
elif pt1.Z &lt; pt2.Z:
    rise = pt2.Z - pt1.Z

# Find the run of given points
run = m.sqrt(hypotenuse**2 - rise**2)

# Detect model units and scale to mm, if mm do nothing
if rs.UnitSystem == 3:
    rise = rise*100
if rs.UnitSystem == 4:
    rise = rise*1000

# Calculate grade based on rise and run
try:
    grade = run / rise

except ZeroDivisionError:
    print('No Grade Found')
    exit()

# Print text dot to screen
curve = rs.AddCurve([pt1,pt2])
midpoint = rs.CurveMidPoint(curve)
rs.DeleteObject(curve)
rs.AddTextDot('1:' + str(abs(m.trunc(grade))),midpoint)

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="0e5500e8-bcec-4185-93cf-eccdfd6abd3c" ImportedFromFileGuid="69f5f9b3-2baf-42aa-910f-b7d558cf5498" ImportedFromItemGuid="028fa608-63a7-42b4-82fb-7259b7003fb5" bitmap_id="6b2bb6de-7880-4599-b143-9cc086e962c0">
      <text>
        <locale_1033>Macro 02</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Display the RL of a given point</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Display the RL of a given point</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''


# Show RL of specified point and copy to clipboard
# By Thomas Chapman on 01/10/2021

import rhinoscriptsyntax as rs
import os

point = rs.GetPoint('Select point')
pointZ = point.Z

if rs.UnitSystem() == 3: #if doc is in CM
    pointZ = pointZ *0.01
if rs.UnitSystem() == 2:#if doc is in MM
     pointZ = pointZ *0.001

rs.AddTextDot('+RL ' + str(round(pointZ,3)),point)

#Copy RL to Clipboard

RL = str(round(pointZ,3))

rs.ClipboardText(RL)


)</script>
    </macro_item>
    <macro_item guid="dfacc9e6-343b-473b-b568-a88fc8e744be" ImportedFromFileGuid="69f5f9b3-2baf-42aa-910f-b7d558cf5498" ImportedFromItemGuid="e76e7ea7-0d25-44a6-9ed3-43a85f3df8b0" bitmap_id="21911de5-e49b-48d0-825c-b5c4159bdcb0">
      <text>
        <locale_1033>Macro 03</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

# MOVE OBJECT TO SPECIFIED RL
# BY THOMAS CHAPMAN ON 01/10/2021

import rhinoscriptsyntax as rs
import Rhino.Geometry as geo

obj = rs.GetObjects('Select objects',preselect=True)

if obj:
    current = rs.GetPoint('Select point')
    
    if current: 
        rl = rs.GetString('RL to move to?')
        rl = float(rl)
        
        if rs.UnitSystem() == 3: #if model is in cm scale by 100
            rl = rl*100
        elif rs.UnitSystem() == 2: #if model is in mm scale by 1000
            rl = rl*1000
        
        if rl == 0.000: #move objects to the 0 coord
            target3 = current.Z
            if target3:
                target3 = target3 *-1
                target4 = geo.Point3d(0,0,target3)
                rs.MoveObject(obj, target4)

        elif rl &gt; 0.000:
            target = rl - current.Z #+ or - number to target location
            target2 = geo.Point3d(0,0,target) #translated vector needed to hit target
            rs.MoveObject(obj, target2)
)</script>
    </macro_item>
    <macro_item guid="c82d4819-a307-4463-8f01-db5f7f00613d" ImportedFromFileGuid="69f5f9b3-2baf-42aa-910f-b7d558cf5498" ImportedFromItemGuid="4b67e1a0-373f-44d5-aa82-30382b12f599" bitmap_id="3471c8ab-05eb-4ba3-b8ad-9054cb806fbe">
      <text>
        <locale_1033>Macro 01</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#RANDOM ROTATE BLOCK INSTANCES AROUND INSERTION POINT
#BY THOMAS CHAPMAN ON 01/09/2021

import rhinoscriptsyntax as rs
import random as r

vec = rs.VectorCreate([0,0,1],[0,0,0])
obj = rs.GetObjects('pick Blocks to rotate randomly', filter=4096, preselect=True)

rs.EnableRedraw(False)

for object in obj:
    num = r.randrange(-180,180)
    point = rs.BlockInstanceInsertPoint(object)
    rs.RotateObject(object, point, num, vec)

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="8b7db927-bc09-45a2-a1ae-d97348b9228c" ImportedFromFileGuid="69f5f9b3-2baf-42aa-910f-b7d558cf5498" ImportedFromItemGuid="653f86bb-d8a8-4779-a37c-f7e9bac0ea13" bitmap_id="29a2577a-4f80-4090-ae6b-3c595f07a4ba">
      <text>
        <locale_1033>Macro 04</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Drop objects to surface

#By Thomas Chapman on 17/01/2021
#24/04/2021 revision to capture most error messages

import rhinoscriptsyntax as rs
import itertools

def main():

    # prompt user for obj and surface
    obj = rs.GetObjects('Pick objects',preselect=True,filter=(8+16+32+4096+1073741824))
    surface = rs.GetObjects('Pick Surface/Mesh')
    
    #Check selects are valid
    
    if obj == None:
        return
    if surface == None:
        return
    
    
    meshCheck = rs.IsMesh(surface[0])
    indexnum = []
    surfacetypes = []
    
    
    
    #Check if mixed surface types
    for thing in surface:
        result = rs.IsMesh(thing)
        surfacetypes.append(str(result))
    
    if ('True' in surfacetypes) and ('False' in surfacetypes):
        print ('Please select only one surface type')
        return
    
    
    
    #Turn off redraw to speed up script
    rs.EnableRedraw(False)
    
    # Generate bounding box around obj and find distance between obj and surface
    for objects in obj:
        ptlist = []
    
        # Get bounding box and make a square on lower half and find centroid
        bounds = rs.BoundingBox(objects)
        pl = rs.AddPolyline((bounds[0:4]+[bounds[0]]))
        centroid = rs.CurveAreaCentroid(pl)
    
        # Add three points at the centroid and move them in both z direction
        pt00 = rs.AddPoint(centroid[0])
        pt000 = rs.AddPoint(centroid[0])
        lowpoint = rs.AddPoint(centroid[0])
        pt01 = rs.MoveObject(pt00, (0,0,100000))
        pt02 = rs.MoveObject(pt000, (0,0,-100000))
    
        #Check if Mesh else use nurb instersect
        if meshCheck is True:
            curve = rs.AddCurve((pt01, pt02))
            for plane in surface:
                intersection = rs.CurveMeshIntersection(curve, plane)
                if intersection is None:
                    continue
                ptlist.append(list(filter(None,intersection)))
            merged = list(itertools.chain(*ptlist))
            merged = list(itertools.chain(*merged))
    
        # Create curve to intersect with surface to find distance from obj
        elif meshCheck is False:
            curve = rs.AddCurve((pt01, pt02))
            for plane in surface:
                intersection = rs.CurveBrepIntersect(curve, plane)
                if intersection is None:
                    continue
                ptlist.append(list(filter(None,intersection)))
            merged = list(itertools.chain(*ptlist))
            merged = list(itertools.chain(*merged))
    
        if merged is not None and merged != []:
            # Find the highest Z value and use that to target
            sorted = rs.SortPoints((rs.coerce3dpointlist(merged)), ascending=False, order=4)
            inter = (sorted[0])
            dist = rs.Distance(lowpoint, inter)
    
            # Convert Guid to point list
            intCon = rs.coerce3dpoint(inter)
            lowCon = rs.coerce3dpoint(lowpoint)
    
            # Find if obj is below or above surface and change dist to + or - accordingly
            if lowCon[2] &lt; intCon[2]:
                distCon = abs(dist)
            if lowCon[2] &gt; intCon[2]:
                distCon = (dist)*-1
            elif lowCon[2] == intCon[2]:
                rs.DeleteObjects([curve, pt01, pt02, pl, lowpoint]+merged)
                continue
    
            # Move obj to intersection
            rs.MoveObject(objects, (0,0,distCon))
    
            #deleate construction geo
            try:
               rs.DeleteObjects([curve, pt01, pt02, pl, lowpoint]+merged)
            except:
                continue
    
    
    
            #Clear list values for second run through loop
            del intersection
            del merged
            del ptlist
    
    
    
    #delete any polysurfaces created
    if isinstance(indexnum, int):
        rs.DeleteObjects(surface[indexnum])
    
    # Enable redraw to show results
    rs.EnableRedraw(True)


main()
)</script>
    </macro_item>
    <macro_item guid="21dfb0af-ee36-440b-bd80-7b54481d6593" ImportedFromFileGuid="69f5f9b3-2baf-42aa-910f-b7d558cf5498" ImportedFromItemGuid="d5a1b6a2-dd5f-44bf-b366-59b113417446" bitmap_id="770a01b3-4234-475e-ac71-d7188e6247b4">
      <text>
        <locale_1033>Macro</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
'''

#Model Standard Australian DDA Ramps

import rhinoscriptsyntax as rs
import math as m


if rs.UnitSystem() == 4: #if doc is in M
    Mult = 1
if rs.UnitSystem() == 3: #if doc is in CM
    Mult = 100
if rs.UnitSystem() == 2:#if doc is in MM
    Mult = 1000



pt00 = rs.GetPoint('Pick insertion point')
pt01 = rs.CreatePoint(pt00.X,pt00.Y)
RampOptions = 'Step Ramp', 'Kerb Ramp', 'Ramp', 'Walkway'
RampType = rs.PopupMenu(RampOptions)

rs.EnableRedraw(False)


if RampType == -1:
    exit()

if RampType == 0: #Step Ramp
    Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.9*Mult),pt01.Y,pt01.Z),(pt01)])
    Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
    rs.CapPlanarHoles(Surface)
    rs.DeleteObject(Curve)

if RampType == 1: #Kerb Ramp
#main ramp portion
    Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.52*Mult),pt01.Y,pt01.Z),(pt01)])
    Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
    rs.CapPlanarHoles(Surface)
    rs.DeleteObject(Curve)

if RampType == 2: #Ramp
    Grade = '1:19','1:18','1:17','1:16','1:15','1:14'
    Index = rs.PopupMenu(Grade)
    GradeNum = [19,18,17,16,15,14]
    if Index == 5:
        Rise = 9/(GradeNum[Index])
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+9*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)
    elif Index != 5:
        Rise = 15/(GradeNum[Index])
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)

if RampType == 3: #Walkway
    Grade = '1:33','1:32','1:31','1:30','1:29','1:28','1:27','1:26','1:25','1:24','1:23','1:22','1:21','1:20'
    Index = rs.PopupMenu(Grade)
    GradeNum = [33,32,31,30,29,28,27,26,25,24,23,22,21,20]
    if Index == 0:
        Rise = 25/(GradeNum[Index])
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+25*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)
    if Index == 13:
        Rise = 15/(GradeNum[Index])
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)
    elif Index != 0 or Index != 13:
        Interp = m.floor((( GradeNum[Index] - 20)*(25 - 15)/(33 - 20))+15) #Linear interpolation of landing distance - DDA requirement...Srsly?
        Rise = Interp/(GradeNum[Index])
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+Interp*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="7d96d1b3-a869-475b-8ea7-7f13be4cc035" ImportedFromFileGuid="69f5f9b3-2baf-42aa-910f-b7d558cf5498" ImportedFromItemGuid="1581c648-c6a9-472c-a4df-21de69dd9d67" bitmap_id="486419c6-688c-46ce-8734-ea23158da317">
      <text>
        <locale_1033>Macro 05</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Patch Multiple Individual closed polylines
#By Thomas Chapman 04/22/2021

import rhinoscriptsyntax as rs

geo = rs.GetObjects('Select Closed Polylines',preselect=True)

uv1 = rs.GetInteger('enter number of UV divisions',number=1,minimum=1)

rs.EnableRedraw(False)
for objects in geo:
    rs.AddPatch((objects),(uv1,uv1),tolerance=0.0001)
rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="0708f468-593b-431e-b1be-9ab12ee37438" ImportedFromFileGuid="69f5f9b3-2baf-42aa-910f-b7d558cf5498" ImportedFromItemGuid="b1e8b7d5-35eb-4e09-b40d-1ca5c016c284" bitmap_id="123ef39b-abc1-4b5e-bdfa-fa21ed80f74d">
      <text>
        <locale_1033>Macro 06</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Isolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Isolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

# Get object and find layer it is on
obj = rs.GetObjects('select an object on the layer to isolate',preselect=True)

rs.EnableRedraw(False)

# Create list of selected obj layers
selectedlayers = []
for i in obj:
    layer = rs.ObjectLayer(i)
    selectedlayers.append(layer)

# Select all objects on each layer

for i in selectedlayers:
    rs.ObjectsByLayer(i,True)
isolate = rs.SelectedObjects()

allObjects = rs.AllObjects()

for i in isolate:
    allObjects.remove(i)

# Hide selected objects

rs.HideObjects(allObjects)

rs.UnselectAllObjects()

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="243e2ae2-2b17-4a32-bfbc-c31f0a69f698" ImportedFromFileGuid="69f5f9b3-2baf-42aa-910f-b7d558cf5498" ImportedFromItemGuid="15802b3c-73a7-4a79-9623-87e3d964e6b6" bitmap_id="c2a106e2-2037-4012-8d06-bc52c14821a3">
      <text>
        <locale_1033>Macro 07</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Unisolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Unisolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Unisolate All objects
#By Thomas Chapman 21/05/01

import rhinoscriptsyntax as rs

obj = rs.HiddenObjects()

rs.ShowObjects(obj)
)</script>
    </macro_item>
    <macro_item guid="cfada43d-fe35-43e7-89b1-d34c46709dea" ImportedFromFileGuid="69f5f9b3-2baf-42aa-910f-b7d558cf5498" ImportedFromItemGuid="edc1fa6a-b52a-4f0f-bff9-be07c0792526" bitmap_id="c71464f1-dc7c-43ff-9175-c4ef145fbb66">
      <text>
        <locale_1033>Macro 09</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Plan View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Plan View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _T")

)</script>
    </macro_item>
    <macro_item guid="1033b894-7cba-4b48-b041-396bd841201e" ImportedFromFileGuid="69f5f9b3-2baf-42aa-910f-b7d558cf5498" ImportedFromItemGuid="b6fe7c88-bd20-4eb0-9fe6-d9ed1baed13e" bitmap_id="ed4cc6de-8db3-4331-b596-47bbb2a6f62b">
      <text>
        <locale_1033>Macro 10</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Perspective View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Perspective View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _p")

)
</script>
    </macro_item>
    <macro_item guid="48d9dcdc-e0a5-4cf2-8a34-fcbc0b8e9bc1" ImportedFromFileGuid="69f5f9b3-2baf-42aa-910f-b7d558cf5498" ImportedFromItemGuid="bb7fe420-22dc-4aaf-971e-e924031f82ca" bitmap_id="9e63e11b-c025-4834-afc7-98a943473163">
      <text>
        <locale_1033>Macro 11</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import glob
import struct
import imghdr
import rhinoscriptsyntax as rs

#Check document units
units = rs.UnitSystem()

if units == 2: #mm
    scale = 1000
if units == 3: #cm
    scale = 100
if units == 4: #m
    scale = 1

def get_image_size(fname):
    '''Determine the image type of fhandle and return its size.
    from draco'''
    with open(fname, 'rb') as fhandle:
        head = fhandle.read(24)
        if len(head) != 24:
            return
        if imghdr.what(fname) == 'png':
            check = struct.unpack('&gt;i', head[4:8])[0]
            if check != 0x0d0a1a0a:
                return
            width, height = struct.unpack('&gt;ii', head[16:24])
        elif imghdr.what(fname) == 'gif':
            width, height = struct.unpack('&lt;HH', head[6:10])
        elif imghdr.what(fname) == 'jpeg':
            try:
                fhandle.seek(0) # Read 0xff next
                size = 2
                ftype = 0
                while not 0xc0 &lt;= ftype &lt;= 0xcf:
                    fhandle.seek(size, 1)
                    byte = fhandle.read(1)
                    while ord(byte) == 0xff:
                        byte = fhandle.read(1)
                    ftype = ord(byte)
                    size = struct.unpack('&gt;H', fhandle.read(2))[0] - 2
                # We are at a SOFn block
                fhandle.seek(1, 1)  # Skip `precision' byte.
                height, width = struct.unpack('&gt;HH', fhandle.read(4))
            except Exception: #IGNORE:W0703
                return
        else:
            return
        return width, height



#Find and open jgw file, extract scalefactor and x and y coordinates

jgw = rs.OpenFileName(title= 'Select .JGW file',filter="JGW Files (*.JGW)|*.JGW||" )

with open(jgw,'rt') as f:
    numslist = f.read().splitlines()

scaleFactor01 = numslist[0]

worldx = float(numslist[4])*int(scale)
worldy = float(numslist[5])*int(scale)

#Find and open jpg file, extract pixel size

jpg = rs.OpenFileName(title= 'Select .JPG image File',filter="JPG Files (*.JPG)|*.JPG||")

size = get_image_size(jpg)

scaleFactor02 = (float(size[0])*int(scale))
scaleFactor03 = (float(size[1])*int(scale))

# Calculate scale factor

scaleFactorWidth = (float(scaleFactor01))*(float(scaleFactor02))
scaleFactorHeight = (float(scaleFactor01))*(float(scaleFactor03))

origin = (float(worldx), (float(worldy) - float(scaleFactorHeight)), 0)

picturePlane = rs.PlaneFromFrame(origin,(1,0,0),(0,1,0))

rs.AddPictureFrame(picturePlane,jpg,width=(float(scaleFactorWidth)), height=(float(scaleFactorHeight)))

)</script>
    </macro_item>
    <macro_item guid="6a439abb-5310-41af-b9c1-62bb1e5793c5" bitmap_id="83371192-276e-4bf5-9b4d-969f871ba8be">
      <text>
        <locale_1033>Macro 08</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Turn Selected Object Layers Off</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Turn Selected Object Layers Off</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

import rhinoscriptsyntax as rs

obj = rs.GetObjects("select obj Layers to turn off")

rs.EnableRedraw(False)

for i in obj:
    layer = rs.ObjectLayer(i)
    rs.LayerVisible(layer, visible=False)

rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="7c818e2f-ada1-4fd0-92fd-76634ab174e8" bitmap_id="3276d81a-691c-4cae-b27c-e2c06ed25f79">
      <text>
        <locale_1033>Macro 12</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Random Drop Block</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Random Drop Block</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs
import random as r


obj = rs.GetObjects('Pick blocks to drop randomly', filter=4096, preselect=True)
dropnum = rs.GetReal("Enter max drop distance")


rs.EnableRedraw(False)

for object in obj:
    num = r.uniform((-abs(dropnum)),0)
    print num
    vec = rs.VectorCreate([0,0,num],[0,0,0])
    point = rs.BlockInstanceInsertPoint(object)
    rs.MoveObject(object,vec)

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="c291bc48-843c-4777-9b72-89e46c1ca1ab" bitmap_id="ddf2ca0c-5ddc-468a-b4bd-88a1509cae1d">
      <text>
        <locale_1033>Macro 13</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Create Standard Layers</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Create Standard Layers</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Create Standard Layers

import rhinoscriptsyntax as rs
import random as r

#Change Document to Meters, give option to scale



#Add Layers to document

layerList = [
"L_BLDS", 
"L_BNDY_WRKS", 
"L_EDGE",
"L_HARD_ROCK",
"L_HARD_WALL",
"L_HARD_STEP",
"L_HARD_RAMP",
"L_HARD_FNCE",
"L_HARD_PAVE",
"L_LGHT",
"L_ENTO",
"L_PLAY_EQUI",
"L_PLNT",
"L_STRU",
"L_TEXT",
"L_TREE_PROP",
"L_TREE_RETN",
"L_WALL",
"_L_WORKING",
"L_SOFT_GRDN",
"L_SOFT_MLCH",
"L_SOFT_LAWN",
"L_FURN"

]



layerList.sort()

parentLayer = rs.AddLayer(name="LANDSCAPE", color=None, visible=True, locked=False, parent=None)

for layer in layerList:
    rs.AddLayer(layer,(r.randrange(255),r.randrange(255),r.randrange(255)),visible=True, locked=False, parent= parentLayer)
)</script>
    </macro_item>
  </macros>
  <bitmaps>
    <small_bitmap item_width="16" item_height="16">
      <bitmap_item guid="7172de31-ed80-4ac8-84f7-7103a9caecaa" index="0" />
      <bitmap_item guid="6b2bb6de-7880-4599-b143-9cc086e962c0" index="1" />
      <bitmap_item guid="21911de5-e49b-48d0-825c-b5c4159bdcb0" index="2" />
      <bitmap_item guid="3471c8ab-05eb-4ba3-b8ad-9054cb806fbe" index="3" />
      <bitmap_item guid="29a2577a-4f80-4090-ae6b-3c595f07a4ba" index="4" />
      <bitmap_item guid="770a01b3-4234-475e-ac71-d7188e6247b4" index="5" />
      <bitmap_item guid="486419c6-688c-46ce-8734-ea23158da317" index="6" />
      <bitmap_item guid="123ef39b-abc1-4b5e-bdfa-fa21ed80f74d" index="7" />
      <bitmap_item guid="c2a106e2-2037-4012-8d06-bc52c14821a3" index="8" />
      <bitmap_item guid="c71464f1-dc7c-43ff-9175-c4ef145fbb66" index="9" />
      <bitmap_item guid="ed4cc6de-8db3-4331-b596-47bbb2a6f62b" index="10" />
      <bitmap_item guid="9e63e11b-c025-4834-afc7-98a943473163" index="11" />
      <bitmap_item guid="913e2d65-5c0b-4f49-a6e7-d8071d9bb603" index="12" />
      <bitmap_item guid="83371192-276e-4bf5-9b4d-969f871ba8be" index="13" />
      <bitmap_item guid="3276d81a-691c-4cae-b27c-e2c06ed25f79" index="14" />
      <bitmap_item guid="ddf2ca0c-5ddc-468a-b4bd-88a1509cae1d" index="15" />
      <bitmap>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</bitmap>
    </small_bitmap>
    <normal_bitmap item_width="24" item_height="24">
      <bitmap_item guid="7172de31-ed80-4ac8-84f7-7103a9caecaa" index="0" />
      <bitmap_item guid="6b2bb6de-7880-4599-b143-9cc086e962c0" index="1" />
      <bitmap_item guid="21911de5-e49b-48d0-825c-b5c4159bdcb0" index="2" />
      <bitmap_item guid="3471c8ab-05eb-4ba3-b8ad-9054cb806fbe" index="3" />
      <bitmap_item guid="29a2577a-4f80-4090-ae6b-3c595f07a4ba" index="4" />
      <bitmap_item guid="770a01b3-4234-475e-ac71-d7188e6247b4" index="5" />
      <bitmap_item guid="486419c6-688c-46ce-8734-ea23158da317" index="6" />
      <bitmap_item guid="123ef39b-abc1-4b5e-bdfa-fa21ed80f74d" index="7" />
      <bitmap_item guid="c2a106e2-2037-4012-8d06-bc52c14821a3" index="8" />
      <bitmap_item guid="c71464f1-dc7c-43ff-9175-c4ef145fbb66" index="9" />
      <bitmap_item guid="ed4cc6de-8db3-4331-b596-47bbb2a6f62b" index="10" />
      <bitmap_item guid="9e63e11b-c025-4834-afc7-98a943473163" index="11" />
      <bitmap_item guid="913e2d65-5c0b-4f49-a6e7-d8071d9bb603" index="12" />
      <bitmap_item guid="83371192-276e-4bf5-9b4d-969f871ba8be" index="13" />
      <bitmap_item guid="3276d81a-691c-4cae-b27c-e2c06ed25f79" index="14" />
      <bitmap_item guid="ddf2ca0c-5ddc-468a-b4bd-88a1509cae1d" index="15" />
      <bitmap>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
pKT/BzoHBnyzWt1zAAAAAElFTkSuQmCC</bitmap>
    </normal_bitmap>
    <large_bitmap item_width="32" item_height="32">
      <bitmap_item guid="7172de31-ed80-4ac8-84f7-7103a9caecaa" index="0" />
      <bitmap_item guid="6b2bb6de-7880-4599-b143-9cc086e962c0" index="1" />
      <bitmap_item guid="21911de5-e49b-48d0-825c-b5c4159bdcb0" index="2" />
      <bitmap_item guid="3471c8ab-05eb-4ba3-b8ad-9054cb806fbe" index="3" />
      <bitmap_item guid="29a2577a-4f80-4090-ae6b-3c595f07a4ba" index="4" />
      <bitmap_item guid="770a01b3-4234-475e-ac71-d7188e6247b4" index="5" />
      <bitmap_item guid="486419c6-688c-46ce-8734-ea23158da317" index="6" />
      <bitmap_item guid="123ef39b-abc1-4b5e-bdfa-fa21ed80f74d" index="7" />
      <bitmap_item guid="c2a106e2-2037-4012-8d06-bc52c14821a3" index="8" />
      <bitmap_item guid="c71464f1-dc7c-43ff-9175-c4ef145fbb66" index="9" />
      <bitmap_item guid="ed4cc6de-8db3-4331-b596-47bbb2a6f62b" index="10" />
      <bitmap_item guid="9e63e11b-c025-4834-afc7-98a943473163" index="11" />
      <bitmap_item guid="913e2d65-5c0b-4f49-a6e7-d8071d9bb603" index="12" />
      <bitmap_item guid="83371192-276e-4bf5-9b4d-969f871ba8be" index="13" />
      <bitmap_item guid="3276d81a-691c-4cae-b27c-e2c06ed25f79" index="14" />
      <bitmap_item guid="ddf2ca0c-5ddc-468a-b4bd-88a1509cae1d" index="15" />
      <bitmap>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
RK5CYII=</bitmap>
    </large_bitmap>
  </bitmaps>
  <scripts />
</RhinoUI>