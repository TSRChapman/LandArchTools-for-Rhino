<?xml version="1.0" encoding="utf-8"?>
<RhinoUI major_ver="3" minor_ver="0" guid="0804c739-59c2-4cd7-86d9-ddaf63e97340" localize="False" default_language_id="1033" dpi_scale="100">
  <extend_rhino_menus>
    <menu guid="d58ceae7-fdb0-4104-80da-274b94ad44a9">
      <text>
        <locale_1033>Extend Rhino Menus</locale_1033>
      </text>
    </menu>
  </extend_rhino_menus>
  <menus />
  <tool_bar_groups>
    <tool_bar_group guid="4830f6fe-5b84-4155-9c85-a8ae8942b65e" dock_bar_guid32="00000000-0000-0000-0000-000000000000" dock_bar_guid64="92d659a2-6f79-4f2b-8ba6-2670971a2e86" active_tool_bar_group="c0ddb15f-03f5-4dff-86f7-7745ab4674f7" single_file="False" hide_single_tab="True" point_floating="577,387">
      <text>
        <locale_1033>LandArchTools</locale_1033>
      </text>
      <tool_bar_group_item guid="c0ddb15f-03f5-4dff-86f7-7745ab4674f7" major_version="1" minor_version="1">
        <text>
          <locale_1033>LandArchTools</locale_1033>
        </text>
        <tool_bar_id>d8dc19cb-56d8-4f50-b015-76d6b2e6fb1f</tool_bar_id>
      </tool_bar_group_item>
      <dock_bar_info dpi_scale="100" dock_bar="False" docking="True" horz="False" visible="True" floating="True" mru_float_style="8192" bar_id="59480" mru_width="868" point_pos="-2,-2" float_point="577,387" rect_mru_dock_pos="0,574,35,960" dock_location_u="59420" dock_location="left" float_size="640,62" />
    </tool_bar_group>
  </tool_bar_groups>
  <tool_bars>
    <tool_bar guid="d8dc19cb-56d8-4f50-b015-76d6b2e6fb1f" bitmap_id="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb">
      <text>
        <locale_1033>LandArchTools</locale_1033>
      </text>
      <tool_bar_item guid="bcc9156a-6e1d-4be5-8f0e-7bfcfc3e4f0c">
        <left_macro_id>5bb60bb6-b5e1-4cf6-b207-2aa05bd6bf0f</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="49c53416-e30d-414d-a4e3-f9daca5032dc">
        <left_macro_id>ba483181-ff75-4d51-9bba-974118b80da5</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2f4946a0-eb09-4882-aecb-284bc226419e">
        <left_macro_id>812b1c36-0e85-4b6c-9982-e2b575bf9c7b</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="e021088f-3f01-4ec2-b7f8-7e141567db90">
        <left_macro_id>4211923b-f22f-4ab1-8745-e05f836d0bf8</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="70198725-314c-45f3-be45-e35fdd8208df">
        <left_macro_id>ef338e36-b652-464e-9f92-9d8c746720f3</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="eef8629f-6a85-4738-8531-046c164ab354">
        <left_macro_id>5a023420-191b-433d-9347-d6221ccc57d3</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="73e33de0-b307-41c7-b2cf-7058df45f707">
        <left_macro_id>2f54edf0-21f1-40d0-9cfb-31f8276274ca</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="7e3ac271-33ec-4c9d-95df-0f279a9766bf">
        <left_macro_id>89640668-abe2-45c1-9303-09a96c1466e8</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9f05992f-75c6-4360-8a00-5412592b1130">
        <left_macro_id>d1ca3149-4600-4d59-891a-116db286a114</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9d56baae-f374-4ee4-8917-a3170cadab27">
        <left_macro_id>161b2a13-4700-4945-9dae-25c70928152b</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="5598f291-9102-4785-ad1f-89305c097143">
        <left_macro_id>4055eaa6-4427-427c-b6a5-e6cdbac914c2</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="59e8d235-d308-4e12-8984-461790c354b8">
        <left_macro_id>650f2340-8c69-4456-84be-cdc45ddf12be</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="31d82a86-c02b-4786-9489-884129774c95">
        <left_macro_id>652506ee-7343-475c-a018-6ed9c0a76b29</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="1c7275d2-d2bb-4582-835c-2dc2ea64040d">
        <left_macro_id>87791b70-7cac-4efc-a5c4-deece16831aa</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9b1ad1b4-64b4-46ff-a3b6-2df1205041f4">
        <left_macro_id>96e93532-81ce-4156-b7f7-b7ff1364c489</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="0c1a0eb2-86c5-4735-a356-9ab261bf6b7c">
        <left_macro_id>d16957a9-f662-446d-9801-c0533fb38255</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2dce03e3-13e1-4b50-a92c-2f59b9947d33">
        <left_macro_id>c047d19d-b398-41b0-9fd8-74fe11b70e04</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="135b9233-ad6d-4ea1-b6b8-967e3eb44a41">
        <left_macro_id>cfb1aa22-1db1-4869-b63d-8a0474245511</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="c99e2c9d-6eca-4bb1-b6ed-a1bc76f32a53">
        <left_macro_id>978e1959-d9a6-4142-8d86-6b21b079eaa6</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="8f524430-3fa1-4122-b71c-bdb05bc6ac7e">
        <left_macro_id>00485d86-6061-4967-b8a5-b52920e03baa</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2f572106-b4a8-40ad-883d-b7e4c17ba136">
        <left_macro_id>b7943e02-c0c3-4bd4-af85-e859db81c052</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2d5840f3-4ba6-4be7-b14d-725b51e62bb2">
        <left_macro_id>63812035-1fa4-4e2a-8e3c-41fae14a9a2c</left_macro_id>
      </tool_bar_item>
    </tool_bar>
  </tool_bars>
  <macros>
    <macro_item guid="5bb60bb6-b5e1-4cf6-b207-2aa05bd6bf0f" bitmap_id="f9c5b694-dced-4977-a15f-92d9fff043bc">
      <text>
        <locale_1033>Macro 00</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Calculate grade between two points</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Calculate grade between two points</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Calculate grade between two given points
#By Thomas Chapman on 11/01/2021

import rhinoscriptsyntax as rs
import math as m

#Determin Unit system and scale m input to unit system scale and close if not mm, cm, m
def scale():
    system = rs.UnitSystem()
    if system == 2 or system == 3 or system == 4:
        scaleFactorDict = {2:1000, 3:100, 4:1}
        scaleFactor = scaleFactorDict[system]
        return scaleFactor

    if system != 2 or system != 3 or system != 4:
        return None

def main():
    if scale() == None:
        rs.MessageBox("This tool is can only be used in mm, cm or m model units")
        return None
    
    # Get points from user
    pt1 = rs.GetPoint('Pick the first point')
    pt2 = rs.GetPoint('Pick the second point')
    
    if pt2:
        rs.EnableRedraw(False)
        hypotenuse = rs.Distance(pt1, pt2)
    
        # Find the rise of given points in any order
        if pt1.Z == pt2.Z:
            return None
        if pt1.Z &gt; pt2.Z:
            rise = pt1.Z - pt2.Z
        elif pt1.Z &lt; pt2.Z:
            rise = pt2.Z - pt1.Z
    
        # Find the run of given points
        run = m.sqrt(hypotenuse**2 - rise**2)
    
        # Detect model units and scale to mm, if mm do nothing
        rise = rise*scale()
        run = run*scale()
    
        # Calculate grade based on rise and run
        try:
            grade = run / rise
    
        except ZeroDivisionError:
            print('No Grade Found')
            exit()
    
        # Print text dot to screen
        curve = rs.AddCurve([pt1,pt2])
        midpoint = rs.CurveMidPoint(curve)
        rs.DeleteObject(curve)
        rs.AddTextDot('1:' + str(abs(round(grade,2))),midpoint)
        rs.EnableRedraw(True)

main()
)</script>
    </macro_item>
    <macro_item guid="ba483181-ff75-4d51-9bba-974118b80da5" bitmap_id="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92">
      <text>
        <locale_1033>Macro 02</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Display the RL of a given point</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Display the RL of a given point</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''


# Show RL of specified point and copy to clipboard
# By Thomas Chapman on 01/10/2021

import rhinoscriptsyntax as rs
import os

def scale():
    system = rs.UnitSystem()
    if system == 2 or system == 3 or system == 4:
        scaleFactorDict = {2:0.001, 3:0.01, 4:1}
        scaleFactor = scaleFactorDict[system]
        return scaleFactor

    if system != 2 or system != 3 or system != 4:
        return None

def main():
    if scale() == None:
        rs.MessageBox("This tool is can only be used in mm, cm or m model units")
        return None
        
    point = rs.GetPoint('Select point')
    
    if point:
        pointZ = point.Z
    pointZ = pointZ*scale()
    rs.AddTextDot('+RL ' + str(round(pointZ,3)),point)
    
    #Copy RL to Clipboard
    RL = str(round(pointZ,3))
    rs.ClipboardText(RL)

main()
)</script>
    </macro_item>
    <macro_item guid="4211923b-f22f-4ab1-8745-e05f836d0bf8" bitmap_id="8a465cae-79a9-4baa-b77e-ef3d92b27f3c">
      <text>
        <locale_1033>Macro 03</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

# MOVE OBJECT TO SPECIFIED RL
# BY THOMAS CHAPMAN ON 01/10/2021

import rhinoscriptsyntax as rs
import Rhino.Geometry as geo


#Determin Unit system and scale m input to unit system scale and close if not mm, cm, m
def scale():
    system = rs.UnitSystem()
    if system == 2 or system == 3 or system == 4:
        scaleFactorDict = {2:1000, 3:100, 4:1}
        scaleFactor = scaleFactorDict[system]
        return scaleFactor

    if system != 2 or system != 3 or system != 4:
        return None



def main():

    if scale() == None:
        rs.MessageBox("This tool is can only be used in mm, cm or m model units")
        return None

    obj = rs.GetObjects('Select objects',preselect=True)
    if obj:
        current = rs.GetPoint('Select point')
        
        if current: 
            rl = rs.GetString('RL to move to?')
            rl = float(rl)
            rl = rl*scale()
            
            if rl == 0.000: #move objects to the 0 coord
                target3 = current.Z
                if target3:
                    target3 = target3 *-1
                    target4 = geo.Point3d(0,0,target3)
                    rs.MoveObject(obj, target4)
    
            elif rl &gt; 0.000:
                target = rl - current.Z #+ or - number to target location
                target2 = geo.Point3d(0,0,target) #translated vector needed to hit target
                rs.MoveObject(obj, target2)

main ()
)</script>
    </macro_item>
    <macro_item guid="ef338e36-b652-464e-9f92-9d8c746720f3" bitmap_id="bca0a23f-5397-475b-9a42-1ef72c11f863">
      <text>
        <locale_1033>Macro 01</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#RANDOM ROTATE BLOCK INSTANCES AROUND INSERTION POINT
#BY THOMAS CHAPMAN ON 01/09/2021

import rhinoscriptsyntax as rs
import random as r

vec = rs.VectorCreate([0,0,1],[0,0,0])
obj = rs.GetObjects('pick Blocks to rotate randomly', filter=4096, preselect=True)

if obj:
    rs.EnableRedraw(False)

    for object in obj:
        num = r.randrange(-180,180)
        point = rs.BlockInstanceInsertPoint(object)
        rs.RotateObject(object, point, num, vec)

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="5a023420-191b-433d-9347-d6221ccc57d3" bitmap_id="f3c1fd4a-470f-412b-98a3-4374e134c963">
      <text>
        <locale_1033>Macro 12</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Random Drop Block</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Random Drop Block</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs
import random as r


obj = rs.GetObjects('Pick blocks to drop randomly', filter=4096, preselect=True)
dropnum = rs.GetReal("Enter max drop distance")

if obj:
    rs.EnableRedraw(False)

    for object in obj:
        num = r.uniform((-abs(dropnum)),0)
        print num
        vec = rs.VectorCreate([0,0,num],[0,0,0])
        point = rs.BlockInstanceInsertPoint(object)
        rs.MoveObject(object,vec)

    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="d1ca3149-4600-4d59-891a-116db286a114" bitmap_id="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24">
      <text>
        <locale_1033>Macro 04</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#DROP OBJECTS TO SELECTED SRF    


import rhinoscriptsyntax as rs

obj = rs.GetObjects('Select Objects',rs.filter.curve | rs.filter.instance | rs.filter.mesh | rs.filter.surface | rs.filter.subd | rs.filter.light | rs.filter.polysurface,preselect=True)
srf = rs.GetObject ('Select Surface')

if obj:
    if srf:
        
        rs.EnableRedraw(False)
        
        # Check if srf is a mesh, if so convert to Nurb
        isMesh = rs.IsMesh(srf)
        if isMesh == True: 
            srf  = rs.MeshToNurb(srf)
        
        # For each object send test rays up and down in Z coord
        # Move each object to the ray test that hits a srf
        for i in obj:
            bndBox = rs.BoundingBox(i)
            pt1 = bndBox[0]
            pt2 = bndBox[2]
            crv = rs.AddLine(pt1,pt2)
            
            if crv:
                midcrv = rs.CurveMidPoint(crv)
                rs.DeleteObject(crv)
                
            ray_pt_up = rs.ShootRay(srf,midcrv,(0,0,1),reflections=1)
            ray_pt_down = rs.ShootRay(srf,midcrv,(0,0,-1),reflections=1)
            
            if ray_pt_up:
                vector = rs.VectorCreate(ray_pt_up[1],midcrv)
                rs.MoveObject(i,vector)
                
            if ray_pt_down:
                vector = rs.VectorCreate(ray_pt_down[1],midcrv)
                rs.MoveObject(i,vector)  
        
        # deleate any created srf
        if isMesh == True:
            rs.DeleteObject(srf)
        rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="161b2a13-4700-4945-9dae-25c70928152b" bitmap_id="bd3a0457-e280-44b4-95ec-68bf6d152c4f">
      <text>
        <locale_1033>Macro</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Model Standard Australian DDA Ramps

import rhinoscriptsyntax as rs
import math as m

#Determin Unit system and scale m input to unit system scale and close if not mm, cm, m
def scale():
    system = rs.UnitSystem()
    if system == 2 or system == 3 or system == 4:
        scaleFactorDict = {2:1000, 3:100, 4:1}
        scaleFactor = scaleFactorDict[system]
        return scaleFactor

    if system != 2 or system != 3 or system != 4:
        return None

def main():
    if scale() == None:
        rs.MessageBox("This tool is can only be used in mm, cm or m model units")
        return None

    Mult = scale()
    pt00 = rs.GetPoint('Pick insertion point')
    
    if pt00:
    
    
        pt01 = rs.CreatePoint(pt00.X,pt00.Y)
        RampOptions = 'Step Ramp', 'Kerb Ramp', 'Ramp', 'Walkway'
        RampType = rs.PopupMenu(RampOptions)
    
        rs.EnableRedraw(False)
    
    
        if RampType == -1:
            exit()
    
        if RampType == 0: #Step Ramp
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.9*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)
    
        if RampType == 1: #Kerb Ramp
        #main ramp portion
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.52*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)
    
        if RampType == 2: #Ramp
            Grade = '1:19','1:18','1:17','1:16','1:15','1:14'
            Index = rs.PopupMenu(Grade)
            GradeNum = [19,18,17,16,15,14]
            if Index == 5:
                Rise = 9/(GradeNum[Index])
                Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+9*Mult),pt01.Y,pt01.Z),(pt01)])
                Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
                rs.CapPlanarHoles(Surface)
                rs.DeleteObject(Curve)
            elif Index != 5:
                Rise = 15/(GradeNum[Index])
                Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
                Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
                rs.CapPlanarHoles(Surface)
                rs.DeleteObject(Curve)
    
        if RampType == 3: #Walkway
            Grade = '1:33','1:32','1:31','1:30','1:29','1:28','1:27','1:26','1:25','1:24','1:23','1:22','1:21','1:20'
            Index = rs.PopupMenu(Grade)
            GradeNum = [33,32,31,30,29,28,27,26,25,24,23,22,21,20]
            if Index == 0:
                Rise = 25/(GradeNum[Index])
                Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+25*Mult),pt01.Y,pt01.Z),(pt01)])
                Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
                rs.CapPlanarHoles(Surface)
                rs.DeleteObject(Curve)
            if Index == 13:
                Rise = 15/(GradeNum[Index])
                Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
                Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
                rs.CapPlanarHoles(Surface)
                rs.DeleteObject(Curve)
            elif Index != 0 or Index != 13:
                Interp = m.floor((( GradeNum[Index] - 20)*(25 - 15)/(33 - 20))+15) #Linear interpolation of landing distance - DDA requirement...Srsly?
                Rise = Interp/(GradeNum[Index])
                Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+Interp*Mult),pt01.Y,pt01.Z),(pt01)])
                Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
                rs.CapPlanarHoles(Surface)
                rs.DeleteObject(Curve)
    
        rs.EnableRedraw(True)

main()
)</script>
    </macro_item>
    <macro_item guid="4055eaa6-4427-427c-b6a5-e6cdbac914c2" bitmap_id="4bec978a-dd98-4658-b848-0f810eefd6bf">
      <text>
        <locale_1033>Macro 05</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Patch Multiple Individual closed polylines
#By Thomas Chapman 04/22/2021

import rhinoscriptsyntax as rs

geo = rs.GetObjects('Select Closed Polylines',preselect=True)

if geo:
    
    uv1 = rs.GetInteger('enter number of UV divisions',number=1,minimum=1)

    rs.EnableRedraw(False)
    for objects in geo:
        rs.AddPatch((objects),(uv1,uv1),tolerance=0.0001)
    rs.EnableRedraw(True)


)</script>
    </macro_item>
    <macro_item guid="652506ee-7343-475c-a018-6ed9c0a76b29" bitmap_id="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676">
      <text>
        <locale_1033>Macro 06</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Isolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Isolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

# Get object and find layer it is on
obj = rs.GetObjects('select an object on the layer to isolate',preselect=True)

if obj:


    rs.EnableRedraw(False)

    # Create list of selected obj layers
    selectedlayers = []
    for i in obj:
        layer = rs.ObjectLayer(i)
        selectedlayers.append(layer)

    # Select all objects on each layer

    for i in selectedlayers:
        rs.ObjectsByLayer(i,True)
    isolate = rs.SelectedObjects()

    allObjects = rs.AllObjects()

    for i in isolate:
        allObjects.remove(i)

    # Hide selected objects

    rs.HideObjects(allObjects)

    rs.UnselectAllObjects()

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="87791b70-7cac-4efc-a5c4-deece16831aa" bitmap_id="7c225bac-4566-4c22-8529-19795734ecf8">
      <text>
        <locale_1033>Macro 07</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Unisolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Unisolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Unisolate All objects
#By Thomas Chapman 21/05/01

import rhinoscriptsyntax as rs

obj = rs.HiddenObjects()

if obj:

    rs.ShowObjects(obj)
)</script>
    </macro_item>
    <macro_item guid="96e93532-81ce-4156-b7f7-b7ff1364c489" bitmap_id="3a30ba51-3cf2-4d5a-ae4e-e7727296e181">
      <text>
        <locale_1033>Macro 08</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Turn Selected Object Layers Off</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Turn Selected Object Layers Off</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

obj = rs.GetObjects("select obj Layers to turn off")

if obj:

    rs.EnableRedraw(False)

    for i in obj:
        layer = rs.ObjectLayer(i)
        rs.LayerVisible(layer, visible=False)

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="d16957a9-f662-446d-9801-c0533fb38255" bitmap_id="5ecdbeb8-4c26-464d-965a-d29084b78338">
      <text>
        <locale_1033>Macro 09</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Plan View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Plan View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _T")

)</script>
    </macro_item>
    <macro_item guid="c047d19d-b398-41b0-9fd8-74fe11b70e04" bitmap_id="3f736f77-7940-4134-9713-dac547abd1c6">
      <text>
        <locale_1033>Macro 10</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Perspective View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Perspective View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _p")

)
</script>
    </macro_item>
    <macro_item guid="cfb1aa22-1db1-4869-b63d-8a0474245511" bitmap_id="c351dd99-b010-4a89-86fe-835dd645a1b8">
      <text>
        <locale_1033>Macro 11</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
import struct
import imghdr
import rhinoscriptsyntax as rs

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Check document units

#Determin Unit system and scale m input to unit system scale and close if not mm, cm, m
def scale():
    system = rs.UnitSystem()
    if system == 2 or system == 3 or system == 4:
        scaleFactorDict = {2:1000, 3:100, 4:1}
        scaleFactor = scaleFactorDict[system]
        return scaleFactor

    if system != 2 or system != 3 or system != 4:
        return None

def get_image_size(fname):
    '''Determine the image type of fhandle and return its size.
    from draco'''
    with open(fname, 'rb') as fhandle:
        head = fhandle.read(24)
        if len(head) != 24:
            return
        if imghdr.what(fname) == 'png':
            check = struct.unpack('&gt;i', head[4:8])[0]
            if check != 0x0d0a1a0a:
                return
            width, height = struct.unpack('&gt;ii', head[16:24])
        elif imghdr.what(fname) == 'gif':
            width, height = struct.unpack('&lt;HH', head[6:10])
        elif imghdr.what(fname) == 'jpeg':
            try:
                fhandle.seek(0) # Read 0xff next
                size = 2
                ftype = 0
                while not 0xc0 &lt;= ftype &lt;= 0xcf:
                    fhandle.seek(size, 1)
                    byte = fhandle.read(1)
                    while ord(byte) == 0xff:
                        byte = fhandle.read(1)
                    ftype = ord(byte)
                    size = struct.unpack('&gt;H', fhandle.read(2))[0] - 2
                # We are at a SOFn block
                fhandle.seek(1, 1)  # Skip `precision' byte.
                height, width = struct.unpack('&gt;HH', fhandle.read(4))
            except Exception: #IGNORE:W0703
                return
        else:
            return
        return width, height

def main():
    if scale() == None:
        rs.MessageBox("This tool is can only be used in mm, cm or m model units")
        return None
    
    factor = scale()
    
    #Find and open jgw file, extract scalefactor and x and y coordinates
    
    jgw = rs.OpenFileName(title= 'Select .JGW file',filter="JGW Files (*.JGW)|*.JGW||" )
    
    with open(jgw,'rt') as f:
        numslist = f.read().splitlines()
    
    scaleFactor01 = numslist[0]
    
    worldx = float(numslist[4])*int(factor)
    worldy = float(numslist[5])*int(factor)
    
    #Find and open jpg file, extract pixel size
    
    jpg = rs.OpenFileName(title= 'Select .JPG image File',filter="JPG Files (*.JPG)|*.JPG||")
    
    size = get_image_size(jpg)
    
    scaleFactor02 = (float(size[0])*int(factor))
    scaleFactor03 = (float(size[1])*int(factor))
    
    # Calculate scale factor
    
    scaleFactorWidth = (float(scaleFactor01))*(float(scaleFactor02))
    scaleFactorHeight = (float(scaleFactor01))*(float(scaleFactor03))
    
    origin = (float(worldx), (float(worldy) - float(scaleFactorHeight)), 0)
    
    picturePlane = rs.PlaneFromFrame(origin,(1,0,0),(0,1,0))
    
    rs.AddPictureFrame(picturePlane,jpg,width=(float(scaleFactorWidth)), height=(float(scaleFactorHeight)))

main()
)</script>
    </macro_item>
    <macro_item guid="63812035-1fa4-4e2a-8e3c-41fae14a9a2c" bitmap_id="5bb47664-de86-4b8e-88ce-835cfa2b3981">
      <text>
        <locale_1033>Macro 13</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Create Standard Layers</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Create Standard Layers</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Create Standard Layers

import rhinoscriptsyntax as rs
import random as r

#Add Layers to document

rs.EnableRedraw(False)

layerList = [
"L_BLDS", 
"L_BNDY_WRKS", 
"L_EDGE",
"L_HARD_ROCK",
"L_HARD_WALL",
"L_HARD_STEP",
"L_HARD_RAMP",
"L_HARD_FNCE",
"L_HARD_PAV1",
"L_HARD_PAV2",
"L_HARD_PAV3",
"L_HARD_PAV4",
"L_LGHT",
"L_ENTO",
"L_PLAY_EQUI",
"L_PLNT",
"L_STRU",
"L_TEXT",
"L_TREE_PROP",
"L_TREE_RETN",
"L_WALL",
"_L_WORKING",
"L_SOFT_GRDN",
"L_SOFT_MLCH",
"L_SOFT_LAWN",
"L_SOFT_PLANT",
"L_FURN",
"_L_OFF"


]



layerList.sort()

parentLayer = rs.AddLayer(name="LANDSCAPE", color=None, visible=True, locked=False, parent=None)

for layer in layerList:
    rs.AddLayer(layer,(r.randrange(255),r.randrange(255),r.randrange(255)),visible=True, locked=False, parent= parentLayer)

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="812b1c36-0e85-4b6c-9982-e2b575bf9c7b" bitmap_id="b54432f0-91ec-43b6-8b11-4a7654e19716">
      <text>
        <locale_1033>Macro 14</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Calculate Height difference between two points</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Calculate Height difference between two points</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

pt01 = rs.GetPoint('Select first point to measure from')
pt02 = rs.GetPoint('Select second point to measure to')

if pt02:

    pt01Z = pt01.Z
    pt02Z = pt02.Z

    height = abs(pt01Z-pt02Z)
    height = round(height, 3)

    rs.ClipboardText(height)

    rs.MessageBox(height, buttons=0, title="Height difference - Value copied to clipboard")
)</script>
    </macro_item>
    <macro_item guid="2f54edf0-21f1-40d0-9cfb-31f8276274ca" bitmap_id="d59a330a-0413-4632-9c5c-1d8f613a7bd0">
      <text>
        <locale_1033>Macro 15</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Rotate picture frames to face current camera view</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Rotate picture frames to face current camera view</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''
#Rotate picture frames to face camera

import rhinoscriptsyntax as rs

frames = rs.GetObjects("Select Picture Frames",filter=8,preselect=True)


#rotate surfaces around z axis towards camera point
if frames:

    cam = rs.ViewCamera()
    camz = (cam.X,cam.Y,0)
    world = rs.WorldXYPlane()
    angle = 1

    rs.EnableRedraw(False)

    for i in frames:
        angle = 1
        while angle &gt;= 1:
            
            #get mid point of surface and move to z 0
            pointmid = rs.SurfaceAreaCentroid(i)
            pointmidz = (pointmid[0].X,pointmid[0].Y,0)
            #Get center UV of surface
            domainU = rs.SurfaceDomain(i, 0)
            domainV = rs.SurfaceDomain(i, 1)
            u = domainU[1]/2.0
            v = domainV[1]/2.0
            #Get normal vector of surface and cam vector
            vec1 = rs.SurfaceNormal(i,(u,v))
            vec1 = vec1.X,vec1.Y,0
            vec2 = rs.VectorCreate(camz,pointmidz)
            #find angle difference between the two vectors
            angle = rs.VectorAngle(vec1,vec2)
            angle = round(angle)
            #Rotate Object
            rs.RotateObject(i,pointmidz,angle)
        continue

    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="650f2340-8c69-4456-84be-cdc45ddf12be" bitmap_id="8fa94ce8-b572-453c-8fec-ae23f13cb9ad">
      <text>
        <locale_1033>Macro 16</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Multi-Offset Closed Curves</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Multi-Offset Closed Curves</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''
#Multi Offset

import rhinoscriptsyntax as rs

obj = rs.GetObjects('Select Closed Curves for Offset',preselect=True)
bool = rs.GetBoolean('Offset Direction',('Direction','Inward','Outward'),(False))


if bool:
    bool = bool[0]
    offset = rs.GetReal('Distance to Offset')
    
    for i in obj:
        if rs.IsCurveClosed(i):
            if bool == False:
                pt = rs.CurveAreaCentroid(i)
                pt = pt[0]
                rs.OffsetCurve(i,pt,offset)
            if bool == True:
                pt = [1000000,1000000,1000000]
                rs.OffsetCurve(i,pt,offset)
)</script>
    </macro_item>
    <macro_item guid="89640668-abe2-45c1-9303-09a96c1466e8" bitmap_id="adf3520d-c901-4048-a55a-24d4466b0615">
      <text>
        <locale_1033>Macro 17</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Delete or hide selected objects not in the current view</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Delete or hide selected objects not in the current view</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Delete selected objects outside view cone


import rhinoscriptsyntax as rs

obj = rs.GetObjects('Select objects to test', preselect=True)
bool = rs.GetBoolean('Delete or Hide',('Option','Delete','Hide'),(False))


if obj:
    rs.EnableRedraw(False)
    
    for i in obj:
        
        isVisible = rs.IsVisibleInView(i)
        if isVisible == False:
            if bool[0] == True:
                rs.HideObject(i)
            if bool[0] == False:
                rs.DeleteObject(i)

rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="00485d86-6061-4967-b8a5-b52920e03baa" bitmap_id="61624676-c9c5-49bf-ad20-9aa2092d1576">
      <text>
        <locale_1033>Macro 18</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Relocate World coordinated drawing to rhino origin</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Relocate World coordinated drawing to rhino origin</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Truncate World Coordinate

import rhinoscriptsyntax as rs


#Get setout point
point = rs.GetPoint("Pick Point for World Coordinate value")

if point:
    rs.EnableRedraw(False)
    northing = round(point.Y,5)
    easting = round(point.X,5)

    #Add origin layer and lock it
    rs.AddLayer("_ORIGIN_",(255,0,0),visible=True,locked=True)
    originPoint = rs.AddPoint(point)

    #Move all objects to origin
    allObj = rs.AllObjects()
    vector = rs.VectorCreate((0,0,0),point)
    rs.MoveObjects(allObj,vector)

    #Draw origin marker`
    circle = rs.AddCircle(originPoint,1)
    quads = rs.EllipseQuadPoints(circle)
    line1 = rs.AddLine(quads[0],quads[1])
    line2 = rs.AddLine(quads[2],quads[3])

    #Draw text marker and designate a name
    text = rs.AddText((" E "+ str(easting) + " N " + str(northing)), originPoint, 0.5)
    rs.ObjectName(text, "_ORIGIN_TEXT_")
    rs.ObjectName(originPoint, "_ORIGIN_POINT_")

    #Move geometry to locked origin layer
    rs.ObjectLayer([circle, line1, line2, originPoint, text], "_ORIGIN_")
    
    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="b7943e02-c0c3-4bd4-af85-e859db81c052" bitmap_id="85a60542-9518-495a-80eb-1e3ee6470955">
      <text>
        <locale_1033>Macro 19</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Restore world coordinated drawing to world coordinates</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Restore world coordinated drawing to world coordinates</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Restore Origin

import rhinoscriptsyntax as rs

rs.EnableRedraw(False)

#retreive northing and easting from text object
obj = rs.ObjectsByName("_ORIGIN_TEXT_")
if obj:
    text = rs.TextObjectText(obj)
    textList = text.split()
    easting = float(textList[1])
    northing = float(textList[3])
    
    #create reference coordinates to make vector
    orPoint = (easting,northing,0)
    point = rs.PointCoordinates(rs.ObjectsByName("_ORIGIN_POINT_"))
    vector = rs.VectorCreate(orPoint,point)
    
    #move all objects back to original origin point
    allObj = rs.AllObjects()
    rs.MoveObjects(allObj,vector)
    
    #delete coordinate geometry
    isCurrent = rs.IsLayerCurrent("_ORIGIN_")
    if isCurrent == False:
        rs.PurgeLayer("_ORIGIN_")
    if isCurrent == True:
        defaultCheck = rs.IsLayer("Default")
        if defaultCheck == True:
            rs.CurrentLayer("Default")
            rs.PurgeLayer("_ORIGIN_")
        if defaultCheck == False:
            rs.AddLayer("Default")
            rs.CurrentLayer("Default")
            rs.PurgeLayer("_ORIGIN_")
    
    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="978e1959-d9a6-4142-8d86-6b21b079eaa6" bitmap_id="6e502bab-241b-4e5b-ab6e-45895a855e3d">
      <text>
        <locale_1033>Macro 20</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Get Coordinates</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Get Coordinates</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Get Coordinates

import rhinoscriptsyntax as rs

#Get point from user and round to nearest 3 decimal points
point = rs.GetPoint("Pick point to find Coordinate information")
pointX = round(point.X, 3)
pointY = round(point.Y, 3)
pointZ = round(point.Z, 3)

#store string in variable
coord = ("E " + str(pointX) + " N " + str(pointY) + " Z " + str(pointZ))

#Create textdot
rs.AddTextDot("E " + str(pointX) + " N " + str(pointY) + " Z " + str(pointZ),point)

#copy to clipboard
rs.ClipboardText(coord)
)</script>
    </macro_item>
  </macros>
  <bitmaps>
    <small_bitmap item_width="16" item_height="16">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap_item guid="b54432f0-91ec-43b6-8b11-4a7654e19716" index="16" />
      <bitmap_item guid="d59a330a-0413-4632-9c5c-1d8f613a7bd0" index="17" />
      <bitmap_item guid="8fa94ce8-b572-453c-8fec-ae23f13cb9ad" index="18" />
      <bitmap_item guid="adf3520d-c901-4048-a55a-24d4466b0615" index="19" />
      <bitmap_item guid="61624676-c9c5-49bf-ad20-9aa2092d1576" index="20" />
      <bitmap_item guid="85a60542-9518-495a-80eb-1e3ee6470955" index="21" />
      <bitmap_item guid="6e502bab-241b-4e5b-ab6e-45895a855e3d" index="22" />
      <bitmap>iVBORw0KGgoAAAANSUhEUgAAABAAAAFwCAYAAACxcPuPAAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAOvQAADr0BR/uQrQAAAhRJREFUeF7t0zFoE1EYwPGHqBRXBcFZ3FQcRMHNwV13F5UuuhW6CI3W
XmuG6tDGqBV1UKkFB6EWjlZrI2ixFjVpYkrcHEqGomC1LeHu8767vOe1qWC3Dv8ffOTy3fu+e/fe
OwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAW0Voug8Hxss1TPeXVeMta+i15vRec1grMZm2aFA+KgjE
eLJR6L3A9NzWsc2yRFLcMxnu6JOg7bqE2/taijWn9/U6etDkmib6ZL2x4PlS/VqT4bFZqe+94Yr1
ujDxUb7df+NyOpO4ODTeITtt22C0VJXh5zOyuKdfFnf3S8ejd1Ku1WS+XJVgVzZuoDXxmkSdBm1X
28BG562CdOamJDtddrmfpx6mZuHlTMN4FZsoXngmAzMVF+eevpfzUXS9nXO50tkR10B3x6yazG+b
CLb1Sjbjy5nxz3HYBvZ/9oofj7HjdYvXNLBNlvbdlB9H78r3E/fkavaldOQLcYyefuLGacQN0q9g
oxEt3K/jQ7J8MB/PoP11US5OleRS9Fs++eDvOH2F9CLaWNk/IEvR01cODEr742mZKM+7RVzo9d24
eBHT27hRFI/cEX+2kmzjXFXql1/EebeNyh6kf8WHY0My/qki9a4xl3MHSSVH+dqrdNH6CHdGR7l5
xFuOskqa/M/HpLNdV5yma6KLs+nPGQAAAAAAAAAAAAA2xZg/CStBDqEMDusAAAAASUVORK5CYII=</bitmap>
    </small_bitmap>
    <normal_bitmap item_width="24" item_height="24">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap_item guid="b54432f0-91ec-43b6-8b11-4a7654e19716" index="16" />
      <bitmap_item guid="d59a330a-0413-4632-9c5c-1d8f613a7bd0" index="17" />
      <bitmap_item guid="8fa94ce8-b572-453c-8fec-ae23f13cb9ad" index="18" />
      <bitmap_item guid="adf3520d-c901-4048-a55a-24d4466b0615" index="19" />
      <bitmap_item guid="61624676-c9c5-49bf-ad20-9aa2092d1576" index="20" />
      <bitmap_item guid="85a60542-9518-495a-80eb-1e3ee6470955" index="21" />
      <bitmap_item guid="6e502bab-241b-4e5b-ab6e-45895a855e3d" index="22" />
      <bitmap>iVBORw0KGgoAAAANSUhEUgAAABgAAAIoCAYAAABzkit8AAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAOvQAADr0BR/uQrQAABG9JREFUeF7t1HtMlXUcx/FzPCDIJUA9MUEFTEURuS1JdljUHJgkbCFx
UzgQxppTayGYAsYfNUhRkVw6tgxBI7lo6cwmKAw2zUuXRQNX0625ahOLoSgKnPPp++PhthZ2Wv7h
H5/X9t4ezvN7fl+e58CjIyIiIiIiIiIiIiIiIqInm52UKK0c/ukxi5zh4NTw9oo4ZISbHhh0ugPy
2SLt1P8z195gKI9fHNjd9noBUHceA2cv40RuMV7wWXRTzm+VZg6v/I/cpY0mnwU/H0p6A0Ml1cDu
OmCvJEPQ3oG7x8+hLDUbQUavq7I2SVKP8F/ppWQvj+mtu2JTcKv4IFDeCOw8CpTWAGrQ+4eBfTLo
eBtwsQvXK+uQ92K81dHO7qRcu2J4l0dwcdTrm0ONXqjLzLVaymrlt24APjiiDRitRKo+A1z5CffP
fI2KlByrv9sMGHT6wyP7TMol2Mm9vmLeMqTP8h3IDA7vb92wA9hTD5R9Nn4XR5uBlu9Qt6V0MHlp
+MO8JSH9Z6OTMFVvqBnZZ1LOAU5uxy6ErsItU6p1v9ezD6On+917c3ls/43tFdqg3cdw4a1dFnN4
1IPE2fP6TiZlDqKyATey8yDXV2nbTE4GuNY1BUfjTmTacB2BMUNFs+f3rfJe2PtxovnBuy8lDKz2
ntNbGRHX172z0oLGJuDLdnRuLLRpgNMSB/f6c0Ex+DMyFb9GvIrbpmT0mFJwOSDm/jOOzn05viF3
fnll/SC27QUO1MJSsAc4dBydm3fYNiDQwbWhRQb0jAxQ/SYNPL8OqUY/XI3PAtYXwWJ+B0Pr8jCU
uRX45AQ6N9k4YKmTa2NLsNyBaXyA6q48riSjL9peTgdeK8BQumy+NhdD2duBqs9lQJFtA+SvqLE1
xIYBGflyB1u0ATWn0GXjI3IOdvY4dTEsVr5gGwaouzDLIyqrwvXsfDXgiLbN5Fzd7OxPl88PH/5y
e2VT9fwnG2BVm2cX4p45HwcjVqoBH2nbPNpzU/X66jSj98PmoGgZkopuGdb3twHIkkcjta5MQ+Jc
v9t6vf5DudZf2+KfmaWJ7/rVvvbTzufOCcCPy+JhjcpAmqcfLsVlAjnFuJaQgyz/MIunvMZlrUm7
ZFiUlK0djnOTLkl3JPXvHiop6q26IWia+7Uq/wisMfrgdEwS9i+PwWIXjytyLlmaphaKMKla6pG6
pCnSmEDpd0k9R9UmaaK59jp9icMUw91FrjNvypXb5LOntFNjNkuj1/8h+Upj4qRvpVJJvd/Vq1fd
plGaSD2KAO1wjFqj1n4hfSPtktqleGmMpzQ6caGkvrAO6XvpK2m/VCCtldR3VTjy2RlJrflBqpAW
SMosyVs7nNzTUoL0nlQrqd+waSR1/Kmkzq2R1NrHwlFy0A6JiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiI6Mmk0/0FBS0xTxQKOGIAAAAASUVORK5CYII=</bitmap>
    </normal_bitmap>
    <large_bitmap item_width="32" item_height="32">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap_item guid="b54432f0-91ec-43b6-8b11-4a7654e19716" index="16" />
      <bitmap_item guid="d59a330a-0413-4632-9c5c-1d8f613a7bd0" index="17" />
      <bitmap_item guid="8fa94ce8-b572-453c-8fec-ae23f13cb9ad" index="18" />
      <bitmap_item guid="adf3520d-c901-4048-a55a-24d4466b0615" index="19" />
      <bitmap_item guid="61624676-c9c5-49bf-ad20-9aa2092d1576" index="20" />
      <bitmap_item guid="85a60542-9518-495a-80eb-1e3ee6470955" index="21" />
      <bitmap_item guid="6e502bab-241b-4e5b-ab6e-45895a855e3d" index="22" />
      <bitmap>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
P5Fe5UF4YSGYAAAAAElFTkSuQmCC</bitmap>
    </large_bitmap>
  </bitmaps>
  <scripts />
</RhinoUI>