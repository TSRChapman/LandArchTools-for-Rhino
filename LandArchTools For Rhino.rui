<?xml version="1.0" encoding="utf-8"?>
<RhinoUI major_ver="3" minor_ver="0" guid="0804c739-59c2-4cd7-86d9-ddaf63e97340" localize="False" default_language_id="1033" dpi_scale="100">
  <extend_rhino_menus>
    <menu guid="d58ceae7-fdb0-4104-80da-274b94ad44a9">
      <text>
        <locale_1033>Extend Rhino Menus</locale_1033>
      </text>
    </menu>
  </extend_rhino_menus>
  <menus />
  <tool_bar_groups>
    <tool_bar_group guid="4830f6fe-5b84-4155-9c85-a8ae8942b65e" dock_bar_guid32="00000000-0000-0000-0000-000000000000" dock_bar_guid64="92d659a2-6f79-4f2b-8ba6-2670971a2e86" active_tool_bar_group="c0ddb15f-03f5-4dff-86f7-7745ab4674f7" single_file="False" hide_single_tab="True" point_floating="1177,463">
      <text>
        <locale_1033>LandArchTools</locale_1033>
      </text>
      <tool_bar_group_item guid="c0ddb15f-03f5-4dff-86f7-7745ab4674f7" major_version="1" minor_version="1">
        <text>
          <locale_1033>LandArchTools</locale_1033>
        </text>
        <tool_bar_id>d8dc19cb-56d8-4f50-b015-76d6b2e6fb1f</tool_bar_id>
      </tool_bar_group_item>
      <dock_bar_info dpi_scale="100" dock_bar="False" docking="True" horz="False" visible="True" floating="True" mru_float_style="8192" bar_id="59476" mru_width="868" point_pos="-2,-2" float_point="1177,463" rect_mru_dock_pos="0,655,64,1054" dock_location_u="59420" dock_location="left" float_size="534,62" />
    </tool_bar_group>
  </tool_bar_groups>
  <tool_bars>
    <tool_bar guid="d8dc19cb-56d8-4f50-b015-76d6b2e6fb1f" bitmap_id="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb">
      <text>
        <locale_1033>LandArchTools</locale_1033>
      </text>
      <tool_bar_item guid="bcc9156a-6e1d-4be5-8f0e-7bfcfc3e4f0c">
        <left_macro_id>5bb60bb6-b5e1-4cf6-b207-2aa05bd6bf0f</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="49c53416-e30d-414d-a4e3-f9daca5032dc">
        <left_macro_id>ba483181-ff75-4d51-9bba-974118b80da5</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2f4946a0-eb09-4882-aecb-284bc226419e">
        <left_macro_id>812b1c36-0e85-4b6c-9982-e2b575bf9c7b</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="e021088f-3f01-4ec2-b7f8-7e141567db90">
        <left_macro_id>4211923b-f22f-4ab1-8745-e05f836d0bf8</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="70198725-314c-45f3-be45-e35fdd8208df">
        <left_macro_id>ef338e36-b652-464e-9f92-9d8c746720f3</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="eef8629f-6a85-4738-8531-046c164ab354">
        <left_macro_id>5a023420-191b-433d-9347-d6221ccc57d3</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="73e33de0-b307-41c7-b2cf-7058df45f707">
        <left_macro_id>2f54edf0-21f1-40d0-9cfb-31f8276274ca</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9f05992f-75c6-4360-8a00-5412592b1130">
        <left_macro_id>d1ca3149-4600-4d59-891a-116db286a114</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9d56baae-f374-4ee4-8917-a3170cadab27">
        <left_macro_id>161b2a13-4700-4945-9dae-25c70928152b</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="5598f291-9102-4785-ad1f-89305c097143">
        <left_macro_id>4055eaa6-4427-427c-b6a5-e6cdbac914c2</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="59e8d235-d308-4e12-8984-461790c354b8">
        <left_macro_id>650f2340-8c69-4456-84be-cdc45ddf12be</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="31d82a86-c02b-4786-9489-884129774c95">
        <left_macro_id>652506ee-7343-475c-a018-6ed9c0a76b29</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="1c7275d2-d2bb-4582-835c-2dc2ea64040d">
        <left_macro_id>87791b70-7cac-4efc-a5c4-deece16831aa</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9b1ad1b4-64b4-46ff-a3b6-2df1205041f4">
        <left_macro_id>96e93532-81ce-4156-b7f7-b7ff1364c489</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="0c1a0eb2-86c5-4735-a356-9ab261bf6b7c">
        <left_macro_id>d16957a9-f662-446d-9801-c0533fb38255</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2dce03e3-13e1-4b50-a92c-2f59b9947d33">
        <left_macro_id>c047d19d-b398-41b0-9fd8-74fe11b70e04</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="135b9233-ad6d-4ea1-b6b8-967e3eb44a41">
        <left_macro_id>cfb1aa22-1db1-4869-b63d-8a0474245511</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2d5840f3-4ba6-4be7-b14d-725b51e62bb2">
        <left_macro_id>63812035-1fa4-4e2a-8e3c-41fae14a9a2c</left_macro_id>
      </tool_bar_item>
    </tool_bar>
  </tool_bars>
  <macros>
    <macro_item guid="5bb60bb6-b5e1-4cf6-b207-2aa05bd6bf0f" bitmap_id="f9c5b694-dced-4977-a15f-92d9fff043bc">
      <text>
        <locale_1033>Macro 00</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Calculate grade between two points</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Calculate grade between two points</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Calculate grade between two given points
#By Thomas Chapman on 11/01/2021

import rhinoscriptsyntax as rs
import math as m

# Get points from user
pt1 = rs.GetPoint('Pick the first point')
pt2 = rs.GetPoint('Pick the second point')


if pt2:
    hypotenuse = rs.Distance(pt1, pt2)

    rs.EnableRedraw(False)


    # Find the rise of given points in any order
    if pt1.Z &gt; pt2.Z:
        rise = pt1.Z - pt2.Z
    elif pt1.Z &lt; pt2.Z:
        rise = pt2.Z - pt1.Z

    # Find the run of given points
    run = m.sqrt(hypotenuse**2 - rise**2)

    # Detect model units and scale to mm, if mm do nothing
    if rs.UnitSystem == 3:
        rise = rise*100
    if rs.UnitSystem == 4:
        rise = rise*1000

    # Calculate grade based on rise and run
    try:
        grade = run / rise

    except ZeroDivisionError:
        print('No Grade Found')
        exit()

    # Print text dot to screen
    curve = rs.AddCurve([pt1,pt2])
    midpoint = rs.CurveMidPoint(curve)
    rs.DeleteObject(curve)
    rs.AddTextDot('1:' + str(abs(round(grade,2))),midpoint)

    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="ba483181-ff75-4d51-9bba-974118b80da5" bitmap_id="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92">
      <text>
        <locale_1033>Macro 02</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Display the RL of a given point</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Display the RL of a given point</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''


# Show RL of specified point and copy to clipboard
# By Thomas Chapman on 01/10/2021

import rhinoscriptsyntax as rs
import os

point = rs.GetPoint('Select point')

if point:
    pointZ = point.Z

    if rs.UnitSystem() == 3: #if doc is in CM
        pointZ = pointZ *0.01
    if rs.UnitSystem() == 2:#if doc is in MM
         pointZ = pointZ *0.001

    rs.AddTextDot('+RL ' + str(round(pointZ,3)),point)

    #Copy RL to Clipboard

    RL = str(round(pointZ,3))

    rs.ClipboardText(RL)


)</script>
    </macro_item>
    <macro_item guid="4211923b-f22f-4ab1-8745-e05f836d0bf8" bitmap_id="8a465cae-79a9-4baa-b77e-ef3d92b27f3c">
      <text>
        <locale_1033>Macro 03</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

# MOVE OBJECT TO SPECIFIED RL
# BY THOMAS CHAPMAN ON 01/10/2021

import rhinoscriptsyntax as rs
import Rhino.Geometry as geo

obj = rs.GetObjects('Select objects',preselect=True)

if obj:
    current = rs.GetPoint('Select point')
    
    if current: 
        rl = rs.GetString('RL to move to?')
        rl = float(rl)
        
        if rs.UnitSystem() == 3: #if model is in cm scale by 100
            rl = rl*100
        elif rs.UnitSystem() == 2: #if model is in mm scale by 1000
            rl = rl*1000
        
        if rl == 0.000: #move objects to the 0 coord
            target3 = current.Z
            if target3:
                target3 = target3 *-1
                target4 = geo.Point3d(0,0,target3)
                rs.MoveObject(obj, target4)

        elif rl &gt; 0.000:
            target = rl - current.Z #+ or - number to target location
            target2 = geo.Point3d(0,0,target) #translated vector needed to hit target
            rs.MoveObject(obj, target2)
)</script>
    </macro_item>
    <macro_item guid="ef338e36-b652-464e-9f92-9d8c746720f3" bitmap_id="bca0a23f-5397-475b-9a42-1ef72c11f863">
      <text>
        <locale_1033>Macro 01</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#RANDOM ROTATE BLOCK INSTANCES AROUND INSERTION POINT
#BY THOMAS CHAPMAN ON 01/09/2021

import rhinoscriptsyntax as rs
import random as r

vec = rs.VectorCreate([0,0,1],[0,0,0])
obj = rs.GetObjects('pick Blocks to rotate randomly', filter=4096, preselect=True)

if obj:
    rs.EnableRedraw(False)

    for object in obj:
        num = r.randrange(-180,180)
        point = rs.BlockInstanceInsertPoint(object)
        rs.RotateObject(object, point, num, vec)

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="5a023420-191b-433d-9347-d6221ccc57d3" bitmap_id="f3c1fd4a-470f-412b-98a3-4374e134c963">
      <text>
        <locale_1033>Macro 12</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Random Drop Block</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Random Drop Block</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs
import random as r


obj = rs.GetObjects('Pick blocks to drop randomly', filter=4096, preselect=True)
dropnum = rs.GetReal("Enter max drop distance")

if obj:
    rs.EnableRedraw(False)

    for object in obj:
        num = r.uniform((-abs(dropnum)),0)
        print num
        vec = rs.VectorCreate([0,0,num],[0,0,0])
        point = rs.BlockInstanceInsertPoint(object)
        rs.MoveObject(object,vec)

    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="d1ca3149-4600-4d59-891a-116db286a114" bitmap_id="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24">
      <text>
        <locale_1033>Macro 04</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#DROP OBJECTS TO SELECTED SRF    


import rhinoscriptsyntax as rs

obj = rs.GetObjects('Select Objects',rs.filter.curve | rs.filter.instance | rs.filter.mesh | rs.filter.surface | rs.filter.subd | rs.filter.light | rs.filter.polysurface,preselect=True)
srf = rs.GetObject ('Select Surface')

if obj:
    if srf:
        
        rs.EnableRedraw(False)
        
        # Check if srf is a mesh, if so convert to Nurb
        isMesh = rs.IsMesh(srf)
        if isMesh == True: 
            srf  = rs.MeshToNurb(srf)
        
        # For each object send test rays up and down in Z coord
        # Move each object to the ray test that hits a srf
        for i in obj:
            bndBox = rs.BoundingBox(i)
            pt1 = bndBox[0]
            pt2 = bndBox[2]
            crv = rs.AddLine(pt1,pt2)
            
            if crv:
                midcrv = rs.CurveMidPoint(crv)
                rs.DeleteObject(crv)
                
            ray_pt_up = rs.ShootRay(srf,midcrv,(0,0,1),reflections=1)
            ray_pt_down = rs.ShootRay(srf,midcrv,(0,0,-1),reflections=1)
            
            if ray_pt_up:
                vector = rs.VectorCreate(ray_pt_up[1],midcrv)
                rs.MoveObject(i,vector)
                
            if ray_pt_down:
                vector = rs.VectorCreate(ray_pt_down[1],midcrv)
                rs.MoveObject(i,vector)  
        
        # deleate any created srf
        if isMesh == True:
            rs.DeleteObject(srf)
        rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="161b2a13-4700-4945-9dae-25c70928152b" bitmap_id="bd3a0457-e280-44b4-95ec-68bf6d152c4f">
      <text>
        <locale_1033>Macro</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Model Standard Australian DDA Ramps

import rhinoscriptsyntax as rs
import math as m


if rs.UnitSystem() == 4: #if doc is in M
    Mult = 1
if rs.UnitSystem() == 3: #if doc is in CM
    Mult = 100
if rs.UnitSystem() == 2:#if doc is in MM
    Mult = 1000



pt00 = rs.GetPoint('Pick insertion point')

if pt00:


    pt01 = rs.CreatePoint(pt00.X,pt00.Y)
    RampOptions = 'Step Ramp', 'Kerb Ramp', 'Ramp', 'Walkway'
    RampType = rs.PopupMenu(RampOptions)

    rs.EnableRedraw(False)


    if RampType == -1:
        exit()

    if RampType == 0: #Step Ramp
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.9*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)

    if RampType == 1: #Kerb Ramp
    #main ramp portion
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.52*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)

    if RampType == 2: #Ramp
        Grade = '1:19','1:18','1:17','1:16','1:15','1:14'
        Index = rs.PopupMenu(Grade)
        GradeNum = [19,18,17,16,15,14]
        if Index == 5:
            Rise = 9/(GradeNum[Index])
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+9*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)
        elif Index != 5:
            Rise = 15/(GradeNum[Index])
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)

    if RampType == 3: #Walkway
        Grade = '1:33','1:32','1:31','1:30','1:29','1:28','1:27','1:26','1:25','1:24','1:23','1:22','1:21','1:20'
        Index = rs.PopupMenu(Grade)
        GradeNum = [33,32,31,30,29,28,27,26,25,24,23,22,21,20]
        if Index == 0:
            Rise = 25/(GradeNum[Index])
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+25*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)
        if Index == 13:
            Rise = 15/(GradeNum[Index])
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)
        elif Index != 0 or Index != 13:
            Interp = m.floor((( GradeNum[Index] - 20)*(25 - 15)/(33 - 20))+15) #Linear interpolation of landing distance - DDA requirement...Srsly?
            Rise = Interp/(GradeNum[Index])
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+Interp*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)

    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="4055eaa6-4427-427c-b6a5-e6cdbac914c2" bitmap_id="4bec978a-dd98-4658-b848-0f810eefd6bf">
      <text>
        <locale_1033>Macro 05</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Patch Multiple Individual closed polylines
#By Thomas Chapman 04/22/2021

import rhinoscriptsyntax as rs

geo = rs.GetObjects('Select Closed Polylines',preselect=True)

if geo:
    
    uv1 = rs.GetInteger('enter number of UV divisions',number=1,minimum=1)

    rs.EnableRedraw(False)
    for objects in geo:
        rs.AddPatch((objects),(uv1,uv1),tolerance=0.0001)
    rs.EnableRedraw(True)


)</script>
    </macro_item>
    <macro_item guid="652506ee-7343-475c-a018-6ed9c0a76b29" bitmap_id="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676">
      <text>
        <locale_1033>Macro 06</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Isolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Isolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

# Get object and find layer it is on
obj = rs.GetObjects('select an object on the layer to isolate',preselect=True)

if obj:


    rs.EnableRedraw(False)

    # Create list of selected obj layers
    selectedlayers = []
    for i in obj:
        layer = rs.ObjectLayer(i)
        selectedlayers.append(layer)

    # Select all objects on each layer

    for i in selectedlayers:
        rs.ObjectsByLayer(i,True)
    isolate = rs.SelectedObjects()

    allObjects = rs.AllObjects()

    for i in isolate:
        allObjects.remove(i)

    # Hide selected objects

    rs.HideObjects(allObjects)

    rs.UnselectAllObjects()

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="87791b70-7cac-4efc-a5c4-deece16831aa" bitmap_id="7c225bac-4566-4c22-8529-19795734ecf8">
      <text>
        <locale_1033>Macro 07</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Unisolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Unisolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Unisolate All objects
#By Thomas Chapman 21/05/01

import rhinoscriptsyntax as rs

obj = rs.HiddenObjects()

if obj:

    rs.ShowObjects(obj)
)</script>
    </macro_item>
    <macro_item guid="96e93532-81ce-4156-b7f7-b7ff1364c489" bitmap_id="3a30ba51-3cf2-4d5a-ae4e-e7727296e181">
      <text>
        <locale_1033>Macro 08</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Turn Selected Object Layers Off</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Turn Selected Object Layers Off</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

obj = rs.GetObjects("select obj Layers to turn off")

if obj:

    rs.EnableRedraw(False)

    for i in obj:
        layer = rs.ObjectLayer(i)
        rs.LayerVisible(layer, visible=False)

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="d16957a9-f662-446d-9801-c0533fb38255" bitmap_id="5ecdbeb8-4c26-464d-965a-d29084b78338">
      <text>
        <locale_1033>Macro 09</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Plan View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Plan View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _T")

)</script>
    </macro_item>
    <macro_item guid="c047d19d-b398-41b0-9fd8-74fe11b70e04" bitmap_id="3f736f77-7940-4134-9713-dac547abd1c6">
      <text>
        <locale_1033>Macro 10</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Perspective View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Perspective View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _p")

)
</script>
    </macro_item>
    <macro_item guid="cfb1aa22-1db1-4869-b63d-8a0474245511" bitmap_id="c351dd99-b010-4a89-86fe-835dd645a1b8">
      <text>
        <locale_1033>Macro 11</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import glob
import struct
import imghdr
import rhinoscriptsyntax as rs

#Check document units
units = rs.UnitSystem()

if units == 2: #mm
    scale = 1000
if units == 3: #cm
    scale = 100
if units == 4: #m
    scale = 1

def get_image_size(fname):
    '''Determine the image type of fhandle and return its size.
    from draco'''
    with open(fname, 'rb') as fhandle:
        head = fhandle.read(24)
        if len(head) != 24:
            return
        if imghdr.what(fname) == 'png':
            check = struct.unpack('&gt;i', head[4:8])[0]
            if check != 0x0d0a1a0a:
                return
            width, height = struct.unpack('&gt;ii', head[16:24])
        elif imghdr.what(fname) == 'gif':
            width, height = struct.unpack('&lt;HH', head[6:10])
        elif imghdr.what(fname) == 'jpeg':
            try:
                fhandle.seek(0) # Read 0xff next
                size = 2
                ftype = 0
                while not 0xc0 &lt;= ftype &lt;= 0xcf:
                    fhandle.seek(size, 1)
                    byte = fhandle.read(1)
                    while ord(byte) == 0xff:
                        byte = fhandle.read(1)
                    ftype = ord(byte)
                    size = struct.unpack('&gt;H', fhandle.read(2))[0] - 2
                # We are at a SOFn block
                fhandle.seek(1, 1)  # Skip `precision' byte.
                height, width = struct.unpack('&gt;HH', fhandle.read(4))
            except Exception: #IGNORE:W0703
                return
        else:
            return
        return width, height



#Find and open jgw file, extract scalefactor and x and y coordinates

jgw = rs.OpenFileName(title= 'Select .JGW file',filter="JGW Files (*.JGW)|*.JGW||" )

with open(jgw,'rt') as f:
    numslist = f.read().splitlines()

scaleFactor01 = numslist[0]

worldx = float(numslist[4])*int(scale)
worldy = float(numslist[5])*int(scale)

#Find and open jpg file, extract pixel size

jpg = rs.OpenFileName(title= 'Select .JPG image File',filter="JPG Files (*.JPG)|*.JPG||")

size = get_image_size(jpg)

scaleFactor02 = (float(size[0])*int(scale))
scaleFactor03 = (float(size[1])*int(scale))

# Calculate scale factor

scaleFactorWidth = (float(scaleFactor01))*(float(scaleFactor02))
scaleFactorHeight = (float(scaleFactor01))*(float(scaleFactor03))

origin = (float(worldx), (float(worldy) - float(scaleFactorHeight)), 0)

picturePlane = rs.PlaneFromFrame(origin,(1,0,0),(0,1,0))

rs.AddPictureFrame(picturePlane,jpg,width=(float(scaleFactorWidth)), height=(float(scaleFactorHeight)))

)</script>
    </macro_item>
    <macro_item guid="63812035-1fa4-4e2a-8e3c-41fae14a9a2c" bitmap_id="5bb47664-de86-4b8e-88ce-835cfa2b3981">
      <text>
        <locale_1033>Macro 13</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Create Standard Layers</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Create Standard Layers</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Create Standard Layers

import rhinoscriptsyntax as rs
import random as r

#Add Layers to document

rs.EnableRedraw(False)

layerList = [
"L_BLDS", 
"L_BNDY_WRKS", 
"L_EDGE",
"L_HARD_ROCK",
"L_HARD_WALL",
"L_HARD_STEP",
"L_HARD_RAMP",
"L_HARD_FNCE",
"L_HARD_PAV1",
"L_HARD_PAV2",
"L_HARD_PAV3",
"L_HARD_PAV4",
"L_LGHT",
"L_ENTO",
"L_PLAY_EQUI",
"L_PLNT",
"L_STRU",
"L_TEXT",
"L_TREE_PROP",
"L_TREE_RETN",
"L_WALL",
"_L_WORKING",
"L_SOFT_GRDN",
"L_SOFT_MLCH",
"L_SOFT_LAWN",
"L_SOFT_PLANT",
"L_FURN",
"_L_OFF"


]



layerList.sort()

parentLayer = rs.AddLayer(name="LANDSCAPE", color=None, visible=True, locked=False, parent=None)

for layer in layerList:
    rs.AddLayer(layer,(r.randrange(255),r.randrange(255),r.randrange(255)),visible=True, locked=False, parent= parentLayer)

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="812b1c36-0e85-4b6c-9982-e2b575bf9c7b" bitmap_id="b54432f0-91ec-43b6-8b11-4a7654e19716">
      <text>
        <locale_1033>Macro 14</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Calculate Height difference between two points</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Calculate Height difference between two points</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

pt01 = rs.GetPoint('Select first point to measure from')
pt02 = rs.GetPoint('Select second point to measure to')

if pt02:

    pt01Z = pt01.Z
    pt02Z = pt02.Z

    height = abs(pt01Z-pt02Z)
    height = round(height, 3)

    rs.ClipboardText(height)

    rs.MessageBox(height, buttons=0, title="Height difference - Value copied to clipboard")
)</script>
    </macro_item>
    <macro_item guid="2f54edf0-21f1-40d0-9cfb-31f8276274ca" bitmap_id="d59a330a-0413-4632-9c5c-1d8f613a7bd0">
      <text>
        <locale_1033>Macro 15</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Rotate picture frames to face current camera view</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Rotate picture frames to face current camera view</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''
#Rotate picture frames to face camera

import rhinoscriptsyntax as rs

frames = rs.GetObjects("Select Picture Frames",filter=8,preselect=True)


#rotate surfaces around z axis towards camera point
if frames:

    cam = rs.ViewCamera()
    camz = (cam.X,cam.Y,0)
    world = rs.WorldXYPlane()
    angle = 1

    rs.EnableRedraw(False)

    for i in frames:
        angle = 1
        while angle &gt;= 1:
            
            #get mid point of surface and move to z 0
            pointmid = rs.SurfaceAreaCentroid(i)
            pointmidz = (pointmid[0].X,pointmid[0].Y,0)
            #Get center UV of surface
            domainU = rs.SurfaceDomain(i, 0)
            domainV = rs.SurfaceDomain(i, 1)
            u = domainU[1]/2.0
            v = domainV[1]/2.0
            #Get normal vector of surface and cam vector
            vec1 = rs.SurfaceNormal(i,(u,v))
            vec1 = vec1.X,vec1.Y,0
            vec2 = rs.VectorCreate(camz,pointmidz)
            #find angle difference between the two vectors
            angle = rs.VectorAngle(vec1,vec2)
            angle = round(angle)
            #Rotate Object
            rs.RotateObject(i,pointmidz,angle)
        continue

    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="650f2340-8c69-4456-84be-cdc45ddf12be" bitmap_id="8fa94ce8-b572-453c-8fec-ae23f13cb9ad">
      <text>
        <locale_1033>Macro 16</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Multi-Offset Closed Curves</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Multi-Offset Closed Curves</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''
#Multi Offset

import rhinoscriptsyntax as rs

obj = rs.GetObjects('Select Closed Curves for Offset',preselect=True)
bool = rs.GetBoolean('Offset Direction',('Direction','Inward','Outward'),(False))


if bool:
    bool = bool[0]
    offset = rs.GetReal('Distance to Offset')
    
    for i in obj:
        if rs.IsCurveClosed(i):
            if bool == False:
                pt = rs.CurveAreaCentroid(i)
                pt = pt[0]
                rs.OffsetCurve(i,pt,offset)
            if bool == True:
                pt = [1000000,1000000,1000000]
                rs.OffsetCurve(i,pt,offset)
)</script>
    </macro_item>
  </macros>
  <bitmaps>
    <small_bitmap item_width="16" item_height="16">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap_item guid="b54432f0-91ec-43b6-8b11-4a7654e19716" index="16" />
      <bitmap_item guid="d59a330a-0413-4632-9c5c-1d8f613a7bd0" index="17" />
      <bitmap_item guid="8fa94ce8-b572-453c-8fec-ae23f13cb9ad" index="18" />
      <bitmap>iVBORw0KGgoAAAANSUhEUgAAABAAAAEwCAYAAAC+KPHjAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADrwAAA68AZW8ckkAAAITSURBVHhe7dNBSBRRGAfwR1RI1wKhc3Sr6BAF
3jp0r3uXCi95E7wEWpujzcE66LalUR1KLOgQmDBomRuoZFLtOuvKdusge5CCrBV05t/73ux7zroG
Hjv8f/Cxs9973zdv3rxRRERERERERERERERERERERERERERERERERERERERE/4tYZU5Fystuqczy
lvJqSWSWJSdj9WnNoHpa9KScLoigPOwWMhap3gcyt16WSIp7p+MD/Yha7iDe399ULDkZl2t9o+mG
JnJnGVj1ApS/VTA2sYhq611XLNf5qc/4/viDy8lKTHGsvJN22bbBeLGMsdcLWDsygLXDA+h8Noew
UsFKWEZ0yDcNpMbsie40ZLvaBja67ufRlZ2BPx+63K8LT1Or8LJKdyrZROHaKwwulFxcefERV3V0
zy65XPHyS9dA3o5ukPljE9G+Pvg9AS5NfjVhG9j//s3AzNlu4NUaGtgm60fv4eeZYfxoe4Rb/lt0
5vImxi+OunkS9Qbbj2BjU2/c73MjqJ3ImRW0vy/g+kwRHfo3PP8k1UA/QnoTbWwcG8S6vvvG8SG0
P5/HVLjiNnG1L3DzzCamX+NuUTj9EMFiKXmNS2VUb7wxealxR9sepH/Fp7MjmPxSQrV7wuXcQRLJ
Ub79Ll20M+KD+ijXj3jTURZJk718TLLaHcVpsieyObLDumDvnzMREREREVEDpf4CGn5BTBPyA14A
AAAASUVORK5CYII=</bitmap>
    </small_bitmap>
    <normal_bitmap item_width="24" item_height="24">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap_item guid="b54432f0-91ec-43b6-8b11-4a7654e19716" index="16" />
      <bitmap_item guid="d59a330a-0413-4632-9c5c-1d8f613a7bd0" index="17" />
      <bitmap_item guid="8fa94ce8-b572-453c-8fec-ae23f13cb9ad" index="18" />
      <bitmap>iVBORw0KGgoAAAANSUhEUgAAABgAAAHICAYAAABUPipjAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADrwAAA68AZW8ckkAAARdSURBVHhe7dR7TJV1HMfxcwTkJoHpiQnKJRQQ
kSOUFjtOSwcICVuK3LxwOUbNqVsRoiKOP2qaoBJROjYNQTO5WTmiKQqDLUPtsmjgavqPXba8MC6K
XA6fvj8eRNbCTsut/vi8tvf2cJ7f8/vyPAceHRERERERERERERERERH9v9lK8VLUyE+P2eJp9k7V
byyPRfqiJfdtdLpD8lmgdurf8bKzsSmKm2u82fxKLlB5AQNnL+F0Vj5e8A68IedzpOkjK/8hN2mz
yXvOT0cTXsPQnnJgfyVwUJIhaGlDT+15FCabEWLwuCJrEyT1CP+WXkr0mPpkU0FMEn7PPwwU1QD7
TgB7KwA16O1jwLsyqLYZuNiBa6WVyH4xbtjB1vYzuXb5yC6PMMVBr28INXigJi1r2FJ4Un7rauCd
49qAB+2RyuuByz/iXv1XeD8pczjAdRpsdPpjo/tMaIrRya2q+OmFSJvhN5BmDO9r2rQbOFAFFH78
8C5ONACN36ImZ+9g4vxF/dvnPdN3NiIBk/U2FaP7TMg5yMn11Jeh0bhtSh4umfVs/wqD793XTTF9
13cWa4P2n0JrVoElI3zZ/cSZs3vrEsyDKK3GdXM25PoybZuJyQCXynPGCHQvThmpzRg9lDczoDfa
07/rSHzG/fwVawZWevp0HTHF9t7ZV2pBzTng8xa0b95l1QCnefZuVedDInFncTJ+CV+DW6ZEdJqS
cCk48p6/g3Nvpt+C7p9ffnUQOw4Ch07CknsAOFqL9q27rRsQbO9S3SgDOkcHqH6VBpasQ7LBF1fi
0oGNebCkbsfQumwMpeUAH55G+xYrB8x3cqlpNModmB4OUPXI40ow+KD5pfVARi6G1svma7MwZN4J
lH0iA/KsGyB/RTVNC6wYsGGb3MGb2oCKM+iw8hE5G52nnrkYFiNfsBUD1F2kyiMqLMM18zY14Li2
zcRcXG3t6opmLxr5crtkU/X8JxowrDY378Ld1G04HB6lBnygbfNoz03W68tTDF79DSERMiQZN2VY
758GIF0ejdQUlYJ4L79ber3+Pbk2QNvir6VK49/1K33sHC9kzQrCDwvjMLx0A1LcfdEamwZk5uPq
qkxsDAizuMtrXNaatEtGLJXM2uFDrlKr1C2pf/dQSVFv1U0hjm5XywLCsdrgjbrIBJQ8H4m5U6Ze
lnOJkqNaKMKkcqlT6pAmSWOCpd8k9RxVW6TxvOx0+j32k2x6Al2m35Ard8hnT2inxmyVHlx/W/KR
xsRK30h7JfV+V69edZsGaTz1KIK0wzFqjVr7qfS1VCC1SHHSGHfpwUR/SX1hbdJ30hdSiZQrrZXU
d7Vr9LN6Sa35XiqW5kjKDMlTO5zYU9Iq6S3ppKR+w3OjqeOPJHVutaTWPhYOkr12SERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RET/LZ3uDxvSMc+/OETSAAAAAElFTkSuQmCC</bitmap>
    </normal_bitmap>
    <large_bitmap item_width="32" item_height="32">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap_item guid="b54432f0-91ec-43b6-8b11-4a7654e19716" index="16" />
      <bitmap_item guid="d59a330a-0413-4632-9c5c-1d8f613a7bd0" index="17" />
      <bitmap_item guid="8fa94ce8-b572-453c-8fec-ae23f13cb9ad" index="18" />
      <bitmap>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
AAAASUVORK5CYII=</bitmap>
    </large_bitmap>
  </bitmaps>
  <scripts />
</RhinoUI>