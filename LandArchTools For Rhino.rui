<?xml version="1.0" encoding="utf-8"?>
<RhinoUI major_ver="3" minor_ver="0" guid="0804c739-59c2-4cd7-86d9-ddaf63e97340" localize="False" default_language_id="1033" dpi_scale="100">
  <extend_rhino_menus>
    <menu guid="d58ceae7-fdb0-4104-80da-274b94ad44a9">
      <text>
        <locale_1033>Extend Rhino Menus</locale_1033>
      </text>
    </menu>
  </extend_rhino_menus>
  <menus />
  <tool_bar_groups>
    <tool_bar_group guid="4830f6fe-5b84-4155-9c85-a8ae8942b65e" dock_bar_guid32="00000000-0000-0000-0000-000000000000" dock_bar_guid64="92d659a2-6f79-4f2b-8ba6-2670971a2e86" active_tool_bar_group="c0ddb15f-03f5-4dff-86f7-7745ab4674f7" single_file="False" hide_single_tab="True" point_floating="1501,492">
      <text>
        <locale_1033>LandArchTools</locale_1033>
      </text>
      <tool_bar_group_item guid="c0ddb15f-03f5-4dff-86f7-7745ab4674f7" major_version="1" minor_version="1">
        <text>
          <locale_1033>LandArchTools</locale_1033>
        </text>
        <tool_bar_id>d8dc19cb-56d8-4f50-b015-76d6b2e6fb1f</tool_bar_id>
      </tool_bar_group_item>
      <dock_bar_info dpi_scale="100" dock_bar="False" docking="True" horz="False" visible="True" floating="True" mru_float_style="8192" bar_id="59474" mru_width="868" point_pos="-2,-2" float_point="1501,492" rect_mru_dock_pos="0,540,35,1041" dock_location_u="59420" dock_location="left" float_size="545,62" />
    </tool_bar_group>
  </tool_bar_groups>
  <tool_bars>
    <tool_bar guid="d8dc19cb-56d8-4f50-b015-76d6b2e6fb1f" bitmap_id="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb">
      <text>
        <locale_1033>LandArchTools</locale_1033>
      </text>
      <tool_bar_item guid="bcc9156a-6e1d-4be5-8f0e-7bfcfc3e4f0c">
        <left_macro_id>5bb60bb6-b5e1-4cf6-b207-2aa05bd6bf0f</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="49c53416-e30d-414d-a4e3-f9daca5032dc">
        <left_macro_id>ba483181-ff75-4d51-9bba-974118b80da5</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2f4946a0-eb09-4882-aecb-284bc226419e">
        <left_macro_id>812b1c36-0e85-4b6c-9982-e2b575bf9c7b</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="e021088f-3f01-4ec2-b7f8-7e141567db90">
        <left_macro_id>4211923b-f22f-4ab1-8745-e05f836d0bf8</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="70198725-314c-45f3-be45-e35fdd8208df">
        <left_macro_id>ef338e36-b652-464e-9f92-9d8c746720f3</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="eef8629f-6a85-4738-8531-046c164ab354">
        <left_macro_id>5a023420-191b-433d-9347-d6221ccc57d3</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="73e33de0-b307-41c7-b2cf-7058df45f707">
        <left_macro_id>2f54edf0-21f1-40d0-9cfb-31f8276274ca</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="7e3ac271-33ec-4c9d-95df-0f279a9766bf">
        <left_macro_id>89640668-abe2-45c1-9303-09a96c1466e8</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9f05992f-75c6-4360-8a00-5412592b1130">
        <left_macro_id>d1ca3149-4600-4d59-891a-116db286a114</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9d56baae-f374-4ee4-8917-a3170cadab27">
        <left_macro_id>161b2a13-4700-4945-9dae-25c70928152b</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="5598f291-9102-4785-ad1f-89305c097143">
        <left_macro_id>4055eaa6-4427-427c-b6a5-e6cdbac914c2</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="59e8d235-d308-4e12-8984-461790c354b8">
        <left_macro_id>650f2340-8c69-4456-84be-cdc45ddf12be</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="31d82a86-c02b-4786-9489-884129774c95">
        <left_macro_id>652506ee-7343-475c-a018-6ed9c0a76b29</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="1c7275d2-d2bb-4582-835c-2dc2ea64040d">
        <left_macro_id>87791b70-7cac-4efc-a5c4-deece16831aa</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9b1ad1b4-64b4-46ff-a3b6-2df1205041f4">
        <left_macro_id>96e93532-81ce-4156-b7f7-b7ff1364c489</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="0c1a0eb2-86c5-4735-a356-9ab261bf6b7c">
        <left_macro_id>d16957a9-f662-446d-9801-c0533fb38255</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2dce03e3-13e1-4b50-a92c-2f59b9947d33">
        <left_macro_id>c047d19d-b398-41b0-9fd8-74fe11b70e04</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="135b9233-ad6d-4ea1-b6b8-967e3eb44a41">
        <left_macro_id>cfb1aa22-1db1-4869-b63d-8a0474245511</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2d5840f3-4ba6-4be7-b14d-725b51e62bb2">
        <left_macro_id>63812035-1fa4-4e2a-8e3c-41fae14a9a2c</left_macro_id>
      </tool_bar_item>
    </tool_bar>
  </tool_bars>
  <macros>
    <macro_item guid="5bb60bb6-b5e1-4cf6-b207-2aa05bd6bf0f" bitmap_id="f9c5b694-dced-4977-a15f-92d9fff043bc">
      <text>
        <locale_1033>Macro 00</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Calculate grade between two points</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Calculate grade between two points</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Calculate grade between two given points
#By Thomas Chapman on 11/01/2021

import rhinoscriptsyntax as rs
import math as m

# Get points from user
pt1 = rs.GetPoint('Pick the first point')
pt2 = rs.GetPoint('Pick the second point')


if pt2:
    hypotenuse = rs.Distance(pt1, pt2)

    rs.EnableRedraw(False)


    # Find the rise of given points in any order
    if pt1.Z &gt; pt2.Z:
        rise = pt1.Z - pt2.Z
    elif pt1.Z &lt; pt2.Z:
        rise = pt2.Z - pt1.Z

    # Find the run of given points
    run = m.sqrt(hypotenuse**2 - rise**2)

    # Detect model units and scale to mm, if mm do nothing
    if rs.UnitSystem == 3:
        rise = rise*100
    if rs.UnitSystem == 4:
        rise = rise*1000

    # Calculate grade based on rise and run
    try:
        grade = run / rise

    except ZeroDivisionError:
        print('No Grade Found')
        exit()

    # Print text dot to screen
    curve = rs.AddCurve([pt1,pt2])
    midpoint = rs.CurveMidPoint(curve)
    rs.DeleteObject(curve)
    rs.AddTextDot('1:' + str(abs(round(grade,2))),midpoint)

    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="ba483181-ff75-4d51-9bba-974118b80da5" bitmap_id="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92">
      <text>
        <locale_1033>Macro 02</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Display the RL of a given point</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Display the RL of a given point</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''


# Show RL of specified point and copy to clipboard
# By Thomas Chapman on 01/10/2021

import rhinoscriptsyntax as rs
import os

point = rs.GetPoint('Select point')

if point:
    pointZ = point.Z

    if rs.UnitSystem() == 3: #if doc is in CM
        pointZ = pointZ *0.01
    if rs.UnitSystem() == 2:#if doc is in MM
         pointZ = pointZ *0.001

    rs.AddTextDot('+RL ' + str(round(pointZ,3)),point)

    #Copy RL to Clipboard

    RL = str(round(pointZ,3))

    rs.ClipboardText(RL)


)</script>
    </macro_item>
    <macro_item guid="4211923b-f22f-4ab1-8745-e05f836d0bf8" bitmap_id="8a465cae-79a9-4baa-b77e-ef3d92b27f3c">
      <text>
        <locale_1033>Macro 03</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

# MOVE OBJECT TO SPECIFIED RL
# BY THOMAS CHAPMAN ON 01/10/2021

import rhinoscriptsyntax as rs
import Rhino.Geometry as geo

obj = rs.GetObjects('Select objects',preselect=True)

if obj:
    current = rs.GetPoint('Select point')
    
    if current: 
        rl = rs.GetString('RL to move to?')
        rl = float(rl)
        
        if rs.UnitSystem() == 3: #if model is in cm scale by 100
            rl = rl*100
        elif rs.UnitSystem() == 2: #if model is in mm scale by 1000
            rl = rl*1000
        
        if rl == 0.000: #move objects to the 0 coord
            target3 = current.Z
            if target3:
                target3 = target3 *-1
                target4 = geo.Point3d(0,0,target3)
                rs.MoveObject(obj, target4)

        elif rl &gt; 0.000:
            target = rl - current.Z #+ or - number to target location
            target2 = geo.Point3d(0,0,target) #translated vector needed to hit target
            rs.MoveObject(obj, target2)
)</script>
    </macro_item>
    <macro_item guid="ef338e36-b652-464e-9f92-9d8c746720f3" bitmap_id="bca0a23f-5397-475b-9a42-1ef72c11f863">
      <text>
        <locale_1033>Macro 01</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#RANDOM ROTATE BLOCK INSTANCES AROUND INSERTION POINT
#BY THOMAS CHAPMAN ON 01/09/2021

import rhinoscriptsyntax as rs
import random as r

vec = rs.VectorCreate([0,0,1],[0,0,0])
obj = rs.GetObjects('pick Blocks to rotate randomly', filter=4096, preselect=True)

if obj:
    rs.EnableRedraw(False)

    for object in obj:
        num = r.randrange(-180,180)
        point = rs.BlockInstanceInsertPoint(object)
        rs.RotateObject(object, point, num, vec)

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="5a023420-191b-433d-9347-d6221ccc57d3" bitmap_id="f3c1fd4a-470f-412b-98a3-4374e134c963">
      <text>
        <locale_1033>Macro 12</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Random Drop Block</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Random Drop Block</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs
import random as r


obj = rs.GetObjects('Pick blocks to drop randomly', filter=4096, preselect=True)
dropnum = rs.GetReal("Enter max drop distance")

if obj:
    rs.EnableRedraw(False)

    for object in obj:
        num = r.uniform((-abs(dropnum)),0)
        print num
        vec = rs.VectorCreate([0,0,num],[0,0,0])
        point = rs.BlockInstanceInsertPoint(object)
        rs.MoveObject(object,vec)

    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="d1ca3149-4600-4d59-891a-116db286a114" bitmap_id="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24">
      <text>
        <locale_1033>Macro 04</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#DROP OBJECTS TO SELECTED SRF    


import rhinoscriptsyntax as rs

obj = rs.GetObjects('Select Objects',rs.filter.curve | rs.filter.instance | rs.filter.mesh | rs.filter.surface | rs.filter.subd | rs.filter.light | rs.filter.polysurface,preselect=True)
srf = rs.GetObject ('Select Surface')

if obj:
    if srf:
        
        rs.EnableRedraw(False)
        
        # Check if srf is a mesh, if so convert to Nurb
        isMesh = rs.IsMesh(srf)
        if isMesh == True: 
            srf  = rs.MeshToNurb(srf)
        
        # For each object send test rays up and down in Z coord
        # Move each object to the ray test that hits a srf
        for i in obj:
            bndBox = rs.BoundingBox(i)
            pt1 = bndBox[0]
            pt2 = bndBox[2]
            crv = rs.AddLine(pt1,pt2)
            
            if crv:
                midcrv = rs.CurveMidPoint(crv)
                rs.DeleteObject(crv)
                
            ray_pt_up = rs.ShootRay(srf,midcrv,(0,0,1),reflections=1)
            ray_pt_down = rs.ShootRay(srf,midcrv,(0,0,-1),reflections=1)
            
            if ray_pt_up:
                vector = rs.VectorCreate(ray_pt_up[1],midcrv)
                rs.MoveObject(i,vector)
                
            if ray_pt_down:
                vector = rs.VectorCreate(ray_pt_down[1],midcrv)
                rs.MoveObject(i,vector)  
        
        # deleate any created srf
        if isMesh == True:
            rs.DeleteObject(srf)
        rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="161b2a13-4700-4945-9dae-25c70928152b" bitmap_id="bd3a0457-e280-44b4-95ec-68bf6d152c4f">
      <text>
        <locale_1033>Macro</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Model Standard Australian DDA Ramps

import rhinoscriptsyntax as rs
import math as m


if rs.UnitSystem() == 4: #if doc is in M
    Mult = 1
if rs.UnitSystem() == 3: #if doc is in CM
    Mult = 100
if rs.UnitSystem() == 2:#if doc is in MM
    Mult = 1000



pt00 = rs.GetPoint('Pick insertion point')

if pt00:


    pt01 = rs.CreatePoint(pt00.X,pt00.Y)
    RampOptions = 'Step Ramp', 'Kerb Ramp', 'Ramp', 'Walkway'
    RampType = rs.PopupMenu(RampOptions)

    rs.EnableRedraw(False)


    if RampType == -1:
        exit()

    if RampType == 0: #Step Ramp
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.9*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)

    if RampType == 1: #Kerb Ramp
    #main ramp portion
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.52*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)

    if RampType == 2: #Ramp
        Grade = '1:19','1:18','1:17','1:16','1:15','1:14'
        Index = rs.PopupMenu(Grade)
        GradeNum = [19,18,17,16,15,14]
        if Index == 5:
            Rise = 9/(GradeNum[Index])
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+9*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)
        elif Index != 5:
            Rise = 15/(GradeNum[Index])
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)

    if RampType == 3: #Walkway
        Grade = '1:33','1:32','1:31','1:30','1:29','1:28','1:27','1:26','1:25','1:24','1:23','1:22','1:21','1:20'
        Index = rs.PopupMenu(Grade)
        GradeNum = [33,32,31,30,29,28,27,26,25,24,23,22,21,20]
        if Index == 0:
            Rise = 25/(GradeNum[Index])
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+25*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)
        if Index == 13:
            Rise = 15/(GradeNum[Index])
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)
        elif Index != 0 or Index != 13:
            Interp = m.floor((( GradeNum[Index] - 20)*(25 - 15)/(33 - 20))+15) #Linear interpolation of landing distance - DDA requirement...Srsly?
            Rise = Interp/(GradeNum[Index])
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+Interp*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)

    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="4055eaa6-4427-427c-b6a5-e6cdbac914c2" bitmap_id="4bec978a-dd98-4658-b848-0f810eefd6bf">
      <text>
        <locale_1033>Macro 05</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Patch Multiple Individual closed polylines
#By Thomas Chapman 04/22/2021

import rhinoscriptsyntax as rs

geo = rs.GetObjects('Select Closed Polylines',preselect=True)

if geo:
    
    uv1 = rs.GetInteger('enter number of UV divisions',number=1,minimum=1)

    rs.EnableRedraw(False)
    for objects in geo:
        rs.AddPatch((objects),(uv1,uv1),tolerance=0.0001)
    rs.EnableRedraw(True)


)</script>
    </macro_item>
    <macro_item guid="652506ee-7343-475c-a018-6ed9c0a76b29" bitmap_id="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676">
      <text>
        <locale_1033>Macro 06</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Isolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Isolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

# Get object and find layer it is on
obj = rs.GetObjects('select an object on the layer to isolate',preselect=True)

if obj:


    rs.EnableRedraw(False)

    # Create list of selected obj layers
    selectedlayers = []
    for i in obj:
        layer = rs.ObjectLayer(i)
        selectedlayers.append(layer)

    # Select all objects on each layer

    for i in selectedlayers:
        rs.ObjectsByLayer(i,True)
    isolate = rs.SelectedObjects()

    allObjects = rs.AllObjects()

    for i in isolate:
        allObjects.remove(i)

    # Hide selected objects

    rs.HideObjects(allObjects)

    rs.UnselectAllObjects()

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="87791b70-7cac-4efc-a5c4-deece16831aa" bitmap_id="7c225bac-4566-4c22-8529-19795734ecf8">
      <text>
        <locale_1033>Macro 07</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Unisolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Unisolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Unisolate All objects
#By Thomas Chapman 21/05/01

import rhinoscriptsyntax as rs

obj = rs.HiddenObjects()

if obj:

    rs.ShowObjects(obj)
)</script>
    </macro_item>
    <macro_item guid="96e93532-81ce-4156-b7f7-b7ff1364c489" bitmap_id="3a30ba51-3cf2-4d5a-ae4e-e7727296e181">
      <text>
        <locale_1033>Macro 08</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Turn Selected Object Layers Off</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Turn Selected Object Layers Off</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

obj = rs.GetObjects("select obj Layers to turn off")

if obj:

    rs.EnableRedraw(False)

    for i in obj:
        layer = rs.ObjectLayer(i)
        rs.LayerVisible(layer, visible=False)

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="d16957a9-f662-446d-9801-c0533fb38255" bitmap_id="5ecdbeb8-4c26-464d-965a-d29084b78338">
      <text>
        <locale_1033>Macro 09</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Plan View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Plan View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _T")

)</script>
    </macro_item>
    <macro_item guid="c047d19d-b398-41b0-9fd8-74fe11b70e04" bitmap_id="3f736f77-7940-4134-9713-dac547abd1c6">
      <text>
        <locale_1033>Macro 10</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Perspective View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Perspective View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _p")

)
</script>
    </macro_item>
    <macro_item guid="cfb1aa22-1db1-4869-b63d-8a0474245511" bitmap_id="c351dd99-b010-4a89-86fe-835dd645a1b8">
      <text>
        <locale_1033>Macro 11</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import glob
import struct
import imghdr
import rhinoscriptsyntax as rs

#Check document units
units = rs.UnitSystem()

if units == 2: #mm
    scale = 1000
if units == 3: #cm
    scale = 100
if units == 4: #m
    scale = 1

def get_image_size(fname):
    '''Determine the image type of fhandle and return its size.
    from draco'''
    with open(fname, 'rb') as fhandle:
        head = fhandle.read(24)
        if len(head) != 24:
            return
        if imghdr.what(fname) == 'png':
            check = struct.unpack('&gt;i', head[4:8])[0]
            if check != 0x0d0a1a0a:
                return
            width, height = struct.unpack('&gt;ii', head[16:24])
        elif imghdr.what(fname) == 'gif':
            width, height = struct.unpack('&lt;HH', head[6:10])
        elif imghdr.what(fname) == 'jpeg':
            try:
                fhandle.seek(0) # Read 0xff next
                size = 2
                ftype = 0
                while not 0xc0 &lt;= ftype &lt;= 0xcf:
                    fhandle.seek(size, 1)
                    byte = fhandle.read(1)
                    while ord(byte) == 0xff:
                        byte = fhandle.read(1)
                    ftype = ord(byte)
                    size = struct.unpack('&gt;H', fhandle.read(2))[0] - 2
                # We are at a SOFn block
                fhandle.seek(1, 1)  # Skip `precision' byte.
                height, width = struct.unpack('&gt;HH', fhandle.read(4))
            except Exception: #IGNORE:W0703
                return
        else:
            return
        return width, height



#Find and open jgw file, extract scalefactor and x and y coordinates

jgw = rs.OpenFileName(title= 'Select .JGW file',filter="JGW Files (*.JGW)|*.JGW||" )

with open(jgw,'rt') as f:
    numslist = f.read().splitlines()

scaleFactor01 = numslist[0]

worldx = float(numslist[4])*int(scale)
worldy = float(numslist[5])*int(scale)

#Find and open jpg file, extract pixel size

jpg = rs.OpenFileName(title= 'Select .JPG image File',filter="JPG Files (*.JPG)|*.JPG||")

size = get_image_size(jpg)

scaleFactor02 = (float(size[0])*int(scale))
scaleFactor03 = (float(size[1])*int(scale))

# Calculate scale factor

scaleFactorWidth = (float(scaleFactor01))*(float(scaleFactor02))
scaleFactorHeight = (float(scaleFactor01))*(float(scaleFactor03))

origin = (float(worldx), (float(worldy) - float(scaleFactorHeight)), 0)

picturePlane = rs.PlaneFromFrame(origin,(1,0,0),(0,1,0))

rs.AddPictureFrame(picturePlane,jpg,width=(float(scaleFactorWidth)), height=(float(scaleFactorHeight)))

)</script>
    </macro_item>
    <macro_item guid="63812035-1fa4-4e2a-8e3c-41fae14a9a2c" bitmap_id="5bb47664-de86-4b8e-88ce-835cfa2b3981">
      <text>
        <locale_1033>Macro 13</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Create Standard Layers</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Create Standard Layers</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Create Standard Layers

import rhinoscriptsyntax as rs
import random as r

#Add Layers to document

rs.EnableRedraw(False)

layerList = [
"L_BLDS", 
"L_BNDY_WRKS", 
"L_EDGE",
"L_HARD_ROCK",
"L_HARD_WALL",
"L_HARD_STEP",
"L_HARD_RAMP",
"L_HARD_FNCE",
"L_HARD_PAV1",
"L_HARD_PAV2",
"L_HARD_PAV3",
"L_HARD_PAV4",
"L_LGHT",
"L_ENTO",
"L_PLAY_EQUI",
"L_PLNT",
"L_STRU",
"L_TEXT",
"L_TREE_PROP",
"L_TREE_RETN",
"L_WALL",
"_L_WORKING",
"L_SOFT_GRDN",
"L_SOFT_MLCH",
"L_SOFT_LAWN",
"L_SOFT_PLANT",
"L_FURN",
"_L_OFF"


]



layerList.sort()

parentLayer = rs.AddLayer(name="LANDSCAPE", color=None, visible=True, locked=False, parent=None)

for layer in layerList:
    rs.AddLayer(layer,(r.randrange(255),r.randrange(255),r.randrange(255)),visible=True, locked=False, parent= parentLayer)

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="812b1c36-0e85-4b6c-9982-e2b575bf9c7b" bitmap_id="b54432f0-91ec-43b6-8b11-4a7654e19716">
      <text>
        <locale_1033>Macro 14</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Calculate Height difference between two points</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Calculate Height difference between two points</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

pt01 = rs.GetPoint('Select first point to measure from')
pt02 = rs.GetPoint('Select second point to measure to')

if pt02:

    pt01Z = pt01.Z
    pt02Z = pt02.Z

    height = abs(pt01Z-pt02Z)
    height = round(height, 3)

    rs.ClipboardText(height)

    rs.MessageBox(height, buttons=0, title="Height difference - Value copied to clipboard")
)</script>
    </macro_item>
    <macro_item guid="2f54edf0-21f1-40d0-9cfb-31f8276274ca" bitmap_id="d59a330a-0413-4632-9c5c-1d8f613a7bd0">
      <text>
        <locale_1033>Macro 15</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Rotate picture frames to face current camera view</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Rotate picture frames to face current camera view</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''
#Rotate picture frames to face camera

import rhinoscriptsyntax as rs

frames = rs.GetObjects("Select Picture Frames",filter=8,preselect=True)


#rotate surfaces around z axis towards camera point
if frames:

    cam = rs.ViewCamera()
    camz = (cam.X,cam.Y,0)
    world = rs.WorldXYPlane()
    angle = 1

    rs.EnableRedraw(False)

    for i in frames:
        angle = 1
        while angle &gt;= 1:
            
            #get mid point of surface and move to z 0
            pointmid = rs.SurfaceAreaCentroid(i)
            pointmidz = (pointmid[0].X,pointmid[0].Y,0)
            #Get center UV of surface
            domainU = rs.SurfaceDomain(i, 0)
            domainV = rs.SurfaceDomain(i, 1)
            u = domainU[1]/2.0
            v = domainV[1]/2.0
            #Get normal vector of surface and cam vector
            vec1 = rs.SurfaceNormal(i,(u,v))
            vec1 = vec1.X,vec1.Y,0
            vec2 = rs.VectorCreate(camz,pointmidz)
            #find angle difference between the two vectors
            angle = rs.VectorAngle(vec1,vec2)
            angle = round(angle)
            #Rotate Object
            rs.RotateObject(i,pointmidz,angle)
        continue

    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="650f2340-8c69-4456-84be-cdc45ddf12be" bitmap_id="8fa94ce8-b572-453c-8fec-ae23f13cb9ad">
      <text>
        <locale_1033>Macro 16</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Multi-Offset Closed Curves</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Multi-Offset Closed Curves</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''
#Multi Offset

import rhinoscriptsyntax as rs

obj = rs.GetObjects('Select Closed Curves for Offset',preselect=True)
bool = rs.GetBoolean('Offset Direction',('Direction','Inward','Outward'),(False))


if bool:
    bool = bool[0]
    offset = rs.GetReal('Distance to Offset')
    
    for i in obj:
        if rs.IsCurveClosed(i):
            if bool == False:
                pt = rs.CurveAreaCentroid(i)
                pt = pt[0]
                rs.OffsetCurve(i,pt,offset)
            if bool == True:
                pt = [1000000,1000000,1000000]
                rs.OffsetCurve(i,pt,offset)
)</script>
    </macro_item>
    <macro_item guid="89640668-abe2-45c1-9303-09a96c1466e8" bitmap_id="adf3520d-c901-4048-a55a-24d4466b0615">
      <text>
        <locale_1033>Macro 17</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Delete or hide selected objects not in the current view</locale_1033>
      </tooltip>
      <help_text>
        <locale_1033 />
      </help_text>
      <button_text>
        <locale_1033>Delete or hide selected objects not in the current view</locale_1033>
      </button_text>
      <menu_text>
        <locale_1033 />
      </menu_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Delete selected objects outside view cone


import rhinoscriptsyntax as rs

obj = rs.GetObjects('Select objects to test', preselect=True)
bool = rs.GetBoolean('Delete or Hide',('Option','Delete','Hide'),(False))


if obj:
    rs.EnableRedraw(False)
    
    for i in obj:
        
        isVisible = rs.IsVisibleInView(i)
        if isVisible == False:
            if bool[0] == True:
                rs.HideObject(i)
            if bool[0] == False:
                rs.DeleteObject(i)

rs.EnableRedraw(True)

)</script>
    </macro_item>
  </macros>
  <bitmaps>
    <small_bitmap item_width="16" item_height="16">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap_item guid="b54432f0-91ec-43b6-8b11-4a7654e19716" index="16" />
      <bitmap_item guid="d59a330a-0413-4632-9c5c-1d8f613a7bd0" index="17" />
      <bitmap_item guid="8fa94ce8-b572-453c-8fec-ae23f13cb9ad" index="18" />
      <bitmap_item guid="adf3520d-c901-4048-a55a-24d4466b0615" index="19" />
      <bitmap>iVBORw0KGgoAAAANSUhEUgAAABAAAAFACAYAAAC1CvwiAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIQSURBVHhe7dMxaBRBFIDhQVSCrYJgLXYqFqJg
Z2GvvY1KGu0CaYTEnNnELaJFcp4aUQuVKFgIMbAkGnOCBmNQ77KXC2dnEa4ICkYvEHafM7s3k03u
BO0s/g8et/dm3tvZ2VkFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP+LWOUOR8rLr6vc4rryGmnkFk3O
jDWntRLV26EnFXRBJMqTdmHGItV/y8xtlqXS4v7peMegRB3XJN4+2FJscmbcXOsbTW9qYu5sBpa9
QKpfajI2MS/1vdddsbkuTn2Ur/feuJxZSVIcK++QXbZtMF6uytjzOVnZMyQru4ek6+E7CWs1WQqr
Eu3ykwamJtkT3WnEdrUNbHTfLEp3fkb82dDlfpx6kFmFl1e6U8UmSheeyfBcxcW5J+/lvI6etwsu
Vz771DUwb0c36PtlE9G2AfF7Azkz+TkJ28D+968EyZyNBl5jUwPbZHXfDfl+9I58O3FX+vyX0lUo
JjF++rGbZ6LZYOMR3IDeuJ/HR6VxsJCsoPN1SS7OlOWS/g1P3s800I+Q3UQba/uHZVXffe3AiHQ+
mpWpcMlt4vJA4OYlm5h9je2idOS2BPOV9DUuVKV++UWSNzXuaNuD9Kf4cGxUJj9VpN4z4XLuIBnp
Ub76Klu0NeKd+ig3j3jLUTbSJn/zMZnVbinOMntiNuefP2cAAAAAAIC2lPoNkvhBMmHWxlUAAAAA
SUVORK5CYII=</bitmap>
    </small_bitmap>
    <normal_bitmap item_width="24" item_height="24">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap_item guid="b54432f0-91ec-43b6-8b11-4a7654e19716" index="16" />
      <bitmap_item guid="d59a330a-0413-4632-9c5c-1d8f613a7bd0" index="17" />
      <bitmap_item guid="8fa94ce8-b572-453c-8fec-ae23f13cb9ad" index="18" />
      <bitmap_item guid="adf3520d-c901-4048-a55a-24d4466b0615" index="19" />
      <bitmap>iVBORw0KGgoAAAANSUhEUgAAABgAAAHgCAYAAAC/wa04AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAARiSURBVHhe7dR7TJV1HMfxczwgNwlIT05EEIqL
oqAsCYQy5wAlYUvpcPECeIo1p65JYAoYf9QgQUVj6VgZgkbCASszmnhhuOW1y6KBq+k/rtpSYwKK
4oFP3x8Pt7WOnZZ/+Mfntb23h/M8z+/L8zvw6IiIiIiIiIiIiIiIiIjo8eYgpUgJQz89YrGTnVwt
m5ckISvy+XsGnW6ffBainfp/fB0NhorkWWE32l4rAOpPo//ERRzNLcaLfiHX5fwWacrQlf+Rp7Qh
xi/wlwOm12EtqQF21gO7JRmCs+3oaTqF8nQzwozel+Vak6S28F/ppVRvrydbyxLT8EfxfqCiEdhx
GCitBdSgdw8Ce2RQUxtwrhNXq+qRtzh50NnB4Qu5d8nQKg8xyVmvPznf6A1LVu7gQHmd/NYW4L1D
2oCRSqSaZuDSz7jbfB6VaTmDwR6TYdDpDw6vY9OkcFfPhr0BC5A5LaA/Kzyqr3X9dmBXA1D+6dhT
HD4JnPkelvzSB6lzI+9vCY3oOxFnwkS9oXZ4HZvcZrt6HPlm/jLcjEkfrPR59n7CFP87byxM7Lu2
ba82aOcRnN9cNpAdtfieyefp3i9N6x6gyoJr5jzI/dXaMrbJAPf6lvA4dMdmDNUettRa5BPUu2x6
0O2PUrLvvb00pX/5dL/bHy5M6r21o2oAjS3AV2fRsaHQrgGuoU6eDafC4vFnbDp+jX5FniQVXTFp
uBgafzfQ2a03J2Be9/WXcx5g625gXx0GCnYBB5rQsWm7fQPmOLlbzsiAruEBqt+k/hdWI93oj8vJ
2cCrRRjIfAvW1XmwZm0BPj6Kjo12Dpjr6t54JlyeIGZsgKpHtstknIm2l9YA6wpgXSOLr8qF1bwN
qP5MBhTZN0D+ihpb59kxYG2+PMGb2oDaY+i0c4vcwt28jp2LSJQv2I4B6ikyZYvKq3HVnK8GHNKW
sc3dw8HxeMUzkUNf7m1ZVO2/rQGDanFzIe5k5mN/dIIa8IG2zMM9N1Gvr8kwzrh/MixOhqTjhgzr
/dsAZMvWSK0JGUjxDbip1+vfl3uDtSX+WaY0/l2/fKajy+ncGbPx04JkDC5ai4yp/riQlAXkFOPK
ihyYgyMGpsprXK6N0W4Zskgya4djPKQLUrek/t3nS4p6q64Pc/G8Uh0cjZVGPxyPN6EyKh6zJnld
knOpkou6UERINVKX1ClNkEbNkX6X1D6qNkrj+Trq9CVOEww9Ie5TrsudW+WzJ7RTozZJI/ffkmZK
o5Kk76RSSb3f1atXPaZRGk9txWztcJS6Rl37ufStVCadlZKlUVOlkYlBkvrC2qUfpK+lSqlAWiWp
76pw+LNmSV3zo7RXCpSUadJ07dC2p6QV0jtSnaR+w5bh1PEnkjq3UlLXPhLOkpN2SERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERE9DjQ6f4Ckewxoith3pgAAAAASUVORK5CYII=</bitmap>
    </normal_bitmap>
    <large_bitmap item_width="32" item_height="32">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap_item guid="b54432f0-91ec-43b6-8b11-4a7654e19716" index="16" />
      <bitmap_item guid="d59a330a-0413-4632-9c5c-1d8f613a7bd0" index="17" />
      <bitmap_item guid="8fa94ce8-b572-453c-8fec-ae23f13cb9ad" index="18" />
      <bitmap_item guid="adf3520d-c901-4048-a55a-24d4466b0615" index="19" />
      <bitmap>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</bitmap>
    </large_bitmap>
  </bitmaps>
  <scripts />
</RhinoUI>