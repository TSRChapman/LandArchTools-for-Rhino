<?xml version="1.0" encoding="utf-8"?>
<RhinoUI major_ver="3" minor_ver="0" guid="0804c739-59c2-4cd7-86d9-ddaf63e97340" localize="False" default_language_id="1033" dpi_scale="100">
  <extend_rhino_menus>
    <menu guid="d58ceae7-fdb0-4104-80da-274b94ad44a9">
      <text>
        <locale_1033>Extend Rhino Menus</locale_1033>
      </text>
    </menu>
  </extend_rhino_menus>
  <menus />
  <tool_bar_groups>
    <tool_bar_group guid="1067bebe-88d0-4b21-ab8b-9c9b8b4860e0" dock_bar_guid32="00000000-0000-0000-0000-000000000000" dock_bar_guid64="764b7a3c-c626-4771-bff3-c47aa63fd0b1" active_tool_bar_group="d51f71b9-4a55-481d-a2ed-9bbc51b0bc7e" single_file="False" hide_single_tab="False" point_floating="348,309">
      <text>
        <locale_1033>LandArchTools</locale_1033>
      </text>
      <tool_bar_group_item guid="d51f71b9-4a55-481d-a2ed-9bbc51b0bc7e" major_version="1" minor_version="1">
        <text>
          <locale_1033>LandArchTools</locale_1033>
        </text>
        <tool_bar_id>d8dc19cb-56d8-4f50-b015-76d6b2e6fb1f</tool_bar_id>
      </tool_bar_group_item>
      <dock_bar_info dpi_scale="100" dock_bar="False" docking="True" horz="False" visible="True" floating="True" mru_float_style="8192" bar_id="59477" mru_width="868" point_pos="-2,-2" float_point="348,309" rect_mru_dock_pos="0,0,0,0" dock_location_u="59419" dock_location="top" float_size="747,62" />
    </tool_bar_group>
  </tool_bar_groups>
  <tool_bars>
    <tool_bar guid="d8dc19cb-56d8-4f50-b015-76d6b2e6fb1f" bitmap_id="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb">
      <text>
        <locale_1033>LandArchTools</locale_1033>
      </text>
      <tool_bar_item guid="bcc9156a-6e1d-4be5-8f0e-7bfcfc3e4f0c">
        <left_macro_id>5bb60bb6-b5e1-4cf6-b207-2aa05bd6bf0f</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="49c53416-e30d-414d-a4e3-f9daca5032dc">
        <left_macro_id>ba483181-ff75-4d51-9bba-974118b80da5</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2f4946a0-eb09-4882-aecb-284bc226419e">
        <left_macro_id>812b1c36-0e85-4b6c-9982-e2b575bf9c7b</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="e021088f-3f01-4ec2-b7f8-7e141567db90">
        <left_macro_id>4211923b-f22f-4ab1-8745-e05f836d0bf8</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="3c553441-e8b2-4259-9aae-3907facf4694">
        <left_macro_id>6beb1246-fc82-4dfc-bb54-1188098f1029</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="70198725-314c-45f3-be45-e35fdd8208df">
        <left_macro_id>ef338e36-b652-464e-9f92-9d8c746720f3</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="eef8629f-6a85-4738-8531-046c164ab354">
        <left_macro_id>5a023420-191b-433d-9347-d6221ccc57d3</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="c1155d88-0d72-4cd3-a0e2-7a23baa8f8d1">
        <left_macro_id>c4df9c08-dfb5-4ff9-a629-7d6192f2ec4f</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="73e33de0-b307-41c7-b2cf-7058df45f707">
        <left_macro_id>2f54edf0-21f1-40d0-9cfb-31f8276274ca</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="7e3ac271-33ec-4c9d-95df-0f279a9766bf">
        <left_macro_id>89640668-abe2-45c1-9303-09a96c1466e8</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9f05992f-75c6-4360-8a00-5412592b1130">
        <left_macro_id>d1ca3149-4600-4d59-891a-116db286a114</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9d56baae-f374-4ee4-8917-a3170cadab27">
        <left_macro_id>161b2a13-4700-4945-9dae-25c70928152b</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="7d72bb3e-1647-4aea-b42b-f69fcedf7f4d">
        <left_macro_id>05291655-fced-47a7-a765-dc4637a8e6f2</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="6721b51f-7913-4c8c-98f8-e432ec106cd3">
        <left_macro_id>262cf1b5-9f4d-4363-8b21-c33e11c83f7b</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="5598f291-9102-4785-ad1f-89305c097143">
        <left_macro_id>4055eaa6-4427-427c-b6a5-e6cdbac914c2</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="59e8d235-d308-4e12-8984-461790c354b8">
        <left_macro_id>650f2340-8c69-4456-84be-cdc45ddf12be</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="31d82a86-c02b-4786-9489-884129774c95">
        <left_macro_id>652506ee-7343-475c-a018-6ed9c0a76b29</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="1c7275d2-d2bb-4582-835c-2dc2ea64040d">
        <left_macro_id>87791b70-7cac-4efc-a5c4-deece16831aa</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9b1ad1b4-64b4-46ff-a3b6-2df1205041f4">
        <left_macro_id>96e93532-81ce-4156-b7f7-b7ff1364c489</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="0c1a0eb2-86c5-4735-a356-9ab261bf6b7c">
        <left_macro_id>d16957a9-f662-446d-9801-c0533fb38255</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2dce03e3-13e1-4b50-a92c-2f59b9947d33">
        <left_macro_id>c047d19d-b398-41b0-9fd8-74fe11b70e04</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="135b9233-ad6d-4ea1-b6b8-967e3eb44a41">
        <left_macro_id>cfb1aa22-1db1-4869-b63d-8a0474245511</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="c99e2c9d-6eca-4bb1-b6ed-a1bc76f32a53">
        <left_macro_id>978e1959-d9a6-4142-8d86-6b21b079eaa6</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="8f524430-3fa1-4122-b71c-bdb05bc6ac7e">
        <left_macro_id>00485d86-6061-4967-b8a5-b52920e03baa</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2f572106-b4a8-40ad-883d-b7e4c17ba136">
        <left_macro_id>b7943e02-c0c3-4bd4-af85-e859db81c052</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2d5840f3-4ba6-4be7-b14d-725b51e62bb2">
        <left_macro_id>63812035-1fa4-4e2a-8e3c-41fae14a9a2c</left_macro_id>
      </tool_bar_item>
    </tool_bar>
  </tool_bars>
  <macros>
    <macro_item guid="5bb60bb6-b5e1-4cf6-b207-2aa05bd6bf0f" bitmap_id="f9c5b694-dced-4977-a15f-92d9fff043bc">
      <text>
        <locale_1033>Macro 00</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Calculate grade between two points</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Calculate grade between two points</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Calculate grade between two given points
#By Thomas Chapman on 11/01/2021

import rhinoscriptsyntax as rs
import math as m

#Determin Unit system and scale m input to unit system scale and close if not mm, cm, m
def scale():
    system = rs.UnitSystem()
    if system == 2 or system == 3 or system == 4:
        scaleFactorDict = {2:1000, 3:100, 4:1}
        scaleFactor = scaleFactorDict[system]
        return scaleFactor

    if system != 2 or system != 3 or system != 4:
        return None

def main():
    if scale() == None:
        rs.MessageBox("This tool is can only be used in mm, cm or m model units")
        return None
    
    # Get points from user
    pt1 = rs.GetPoint('Pick the first point')
    pt2 = rs.GetPoint('Pick the second point')
    
    if pt2:
        rs.EnableRedraw(False)
        hypotenuse = rs.Distance(pt1, pt2)
    
        # Find the rise of given points in any order
        if pt1.Z == pt2.Z:
            return None
        if pt1.Z &gt; pt2.Z:
            rise = pt1.Z - pt2.Z
        elif pt1.Z &lt; pt2.Z:
            rise = pt2.Z - pt1.Z
    
        # Find the run of given points
        run = m.sqrt(hypotenuse**2 - rise**2)
    
        # Detect model units and scale to mm, if mm do nothing
        rise = rise*scale()
        run = run*scale()
    
        # Calculate grade based on rise and run
        try:
            grade = run / rise
    
        except ZeroDivisionError:
            print('No Grade Found')
            exit()
    
        # Print text dot to screen
        curve = rs.AddCurve([pt1,pt2])
        midpoint = rs.CurveMidPoint(curve)
        rs.DeleteObject(curve)
        rs.AddTextDot('1:' + str(abs(round(grade,2))),midpoint)
        rs.EnableRedraw(True)

main()
)</script>
    </macro_item>
    <macro_item guid="ba483181-ff75-4d51-9bba-974118b80da5" bitmap_id="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92">
      <text>
        <locale_1033>Macro 02</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Display the RL of a given point</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Display the RL of a given point</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''


# Show RL of specified point and copy to clipboard
# By Thomas Chapman on 01/10/2021

import rhinoscriptsyntax as rs
import os

def scale():
    system = rs.UnitSystem()
    if system == 2 or system == 3 or system == 4:
        scaleFactorDict = {2:0.001, 3:0.01, 4:1}
        scaleFactor = scaleFactorDict[system]
        return scaleFactor

    if system != 2 or system != 3 or system != 4:
        return None

def main():
    if scale() == None:
        rs.MessageBox("This tool is can only be used in mm, cm or m model units")
        return None
        
    point = rs.GetPoint('Select point')
    
    if point:
        pointZ = point.Z
    pointZ = pointZ*scale()
    rs.AddTextDot('+RL ' + str(round(pointZ,3)),point)
    
    #Copy RL to Clipboard
    RL = str(round(pointZ,3))
    rs.ClipboardText(RL)

main()
)</script>
    </macro_item>
    <macro_item guid="4211923b-f22f-4ab1-8745-e05f836d0bf8" bitmap_id="8a465cae-79a9-4baa-b77e-ef3d92b27f3c">
      <text>
        <locale_1033>Macro 03</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

# MOVE OBJECT TO SPECIFIED RL
# BY THOMAS CHAPMAN ON 01/10/2021

import rhinoscriptsyntax as rs
import Rhino.Geometry as geo


#Determin Unit system and scale m input to unit system scale and close if not mm, cm, m
def scale():
    system = rs.UnitSystem()
    if system == 2 or system == 3 or system == 4:
        scaleFactorDict = {2:1000, 3:100, 4:1}
        scaleFactor = scaleFactorDict[system]
        return scaleFactor

    if system != 2 or system != 3 or system != 4:
        return None



def main():

    if scale() == None:
        rs.MessageBox("This tool is can only be used in mm, cm or m model units")
        return None

    obj = rs.GetObjects('Select objects',preselect=True)
    if obj:
        current = rs.GetPoint('Select point')
        
        if current: 
            rl = rs.GetString('RL to move to?')
            rl = float(rl)
            rl = rl*scale()
            
            if rl == 0.000: #move objects to the 0 coord
                target3 = current.Z
                if target3:
                    target3 = target3 *-1
                    target4 = geo.Point3d(0,0,target3)
                    rs.MoveObject(obj, target4)
    
            elif rl &gt; 0.000:
                target = rl - current.Z #+ or - number to target location
                target2 = geo.Point3d(0,0,target) #translated vector needed to hit target
                rs.MoveObject(obj, target2)

main ()
)</script>
    </macro_item>
    <macro_item guid="ef338e36-b652-464e-9f92-9d8c746720f3" bitmap_id="bca0a23f-5397-475b-9a42-1ef72c11f863">
      <text>
        <locale_1033>Macro 01</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#RANDOM ROTATE BLOCK INSTANCES AROUND INSERTION POINT
#BY THOMAS CHAPMAN ON 01/09/2021

import rhinoscriptsyntax as rs
import random as r

vec = rs.VectorCreate([0,0,1],[0,0,0])
obj = rs.GetObjects('pick Blocks to rotate randomly', filter=4096, preselect=True)

if obj:
    rs.EnableRedraw(False)

    for object in obj:
        num = r.randrange(-180,180)
        point = rs.BlockInstanceInsertPoint(object)
        rs.RotateObject(object, point, num, vec)

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="5a023420-191b-433d-9347-d6221ccc57d3" bitmap_id="f3c1fd4a-470f-412b-98a3-4374e134c963">
      <text>
        <locale_1033>Macro 12</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Random Drop Block</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Random Drop Block</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs
import random as r


obj = rs.GetObjects('Pick blocks to drop randomly', filter=4096, preselect=True)
dropnum = rs.GetReal("Enter max drop distance")

if obj:
    rs.EnableRedraw(False)

    for object in obj:
        num = r.uniform((-abs(dropnum)),0)
        print num
        vec = rs.VectorCreate([0,0,num],[0,0,0])
        point = rs.BlockInstanceInsertPoint(object)
        rs.MoveObject(object,vec)

    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="d1ca3149-4600-4d59-891a-116db286a114" bitmap_id="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24">
      <text>
        <locale_1033>Macro 04</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#DROP OBJECTS TO SELECTED SRF    


import rhinoscriptsyntax as rs

obj = rs.GetObjects('Select Objects',rs.filter.curve | rs.filter.instance | rs.filter.mesh | rs.filter.surface | rs.filter.subd | rs.filter.light | rs.filter.polysurface,preselect=True)
srf = rs.GetObject ('Select Surface')

if obj:
    if srf:
        
        rs.EnableRedraw(False)
        
        # Check if srf is a mesh, if so convert to Nurb
        isMesh = rs.IsMesh(srf)
        if isMesh == True: 
            srf  = rs.MeshToNurb(srf)
        
        # For each object send test rays up and down in Z coord
        # Move each object to the ray test that hits a srf
        for i in obj:
            bndBox = rs.BoundingBox(i)
            pt1 = bndBox[0]
            pt2 = bndBox[2]
            crv = rs.AddLine(pt1,pt2)
            
            if crv:
                midcrv = rs.CurveMidPoint(crv)
                rs.DeleteObject(crv)
                
            ray_pt_up = rs.ShootRay(srf,midcrv,(0,0,1),reflections=1)
            ray_pt_down = rs.ShootRay(srf,midcrv,(0,0,-1),reflections=1)
            
            if ray_pt_up:
                vector = rs.VectorCreate(ray_pt_up[1],midcrv)
                rs.MoveObject(i,vector)
                
            if ray_pt_down:
                vector = rs.VectorCreate(ray_pt_down[1],midcrv)
                rs.MoveObject(i,vector)  
        
        # deleate any created srf
        if isMesh == True:
            rs.DeleteObject(srf)
        rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="161b2a13-4700-4945-9dae-25c70928152b" bitmap_id="bd3a0457-e280-44b4-95ec-68bf6d152c4f">
      <text>
        <locale_1033>Macro</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Model Standard Australian DDA Ramps

import rhinoscriptsyntax as rs
import math as m

#Determin Unit system and scale m input to unit system scale and close if not mm, cm, m
def scale():
    system = rs.UnitSystem()
    if system == 2 or system == 3 or system == 4:
        scaleFactorDict = {2:1000, 3:100, 4:1}
        scaleFactor = scaleFactorDict[system]
        return scaleFactor

    if system != 2 or system != 3 or system != 4:
        return None

def main():
    if scale() == None:
        rs.MessageBox("This tool is can only be used in mm, cm or m model units")
        return None

    Mult = scale()
    pt00 = rs.GetPoint('Pick insertion point')
    
    if pt00:
    
    
        pt01 = rs.CreatePoint(pt00.X,pt00.Y)
        RampOptions = 'Step Ramp', 'Kerb Ramp', 'Ramp', 'Walkway'
        RampType = rs.PopupMenu(RampOptions)
    
        rs.EnableRedraw(False)
    
    
        if RampType == -1:
            exit()
    
        if RampType == 0: #Step Ramp
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.9*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)
    
        if RampType == 1: #Kerb Ramp
        #main ramp portion
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.52*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)
    
        if RampType == 2: #Ramp
            Grade = '1:19','1:18','1:17','1:16','1:15','1:14'
            Index = rs.PopupMenu(Grade)
            GradeNum = [19,18,17,16,15,14]
            if Index == 5:
                Rise = 9/(GradeNum[Index])
                Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+9*Mult),pt01.Y,pt01.Z),(pt01)])
                Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
                rs.CapPlanarHoles(Surface)
                rs.DeleteObject(Curve)
            elif Index != 5:
                Rise = 15/(GradeNum[Index])
                Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
                Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
                rs.CapPlanarHoles(Surface)
                rs.DeleteObject(Curve)
    
        if RampType == 3: #Walkway
            Grade = '1:33','1:32','1:31','1:30','1:29','1:28','1:27','1:26','1:25','1:24','1:23','1:22','1:21','1:20'
            Index = rs.PopupMenu(Grade)
            GradeNum = [33,32,31,30,29,28,27,26,25,24,23,22,21,20]
            if Index == 0:
                Rise = 25/(GradeNum[Index])
                Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+25*Mult),pt01.Y,pt01.Z),(pt01)])
                Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
                rs.CapPlanarHoles(Surface)
                rs.DeleteObject(Curve)
            if Index == 13:
                Rise = 15/(GradeNum[Index])
                Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
                Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
                rs.CapPlanarHoles(Surface)
                rs.DeleteObject(Curve)
            elif Index != 0 or Index != 13:
                Interp = m.floor((( GradeNum[Index] - 20)*(25 - 15)/(33 - 20))+15) #Linear interpolation of landing distance - DDA requirement...Srsly?
                Rise = Interp/(GradeNum[Index])
                Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+Interp*Mult),pt01.Y,pt01.Z),(pt01)])
                Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
                rs.CapPlanarHoles(Surface)
                rs.DeleteObject(Curve)
    
        rs.EnableRedraw(True)

main()
)</script>
    </macro_item>
    <macro_item guid="4055eaa6-4427-427c-b6a5-e6cdbac914c2" bitmap_id="4bec978a-dd98-4658-b848-0f810eefd6bf">
      <text>
        <locale_1033>Macro 05</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Patch Multiple Individual closed polylines
#By Thomas Chapman 04/22/2021

import rhinoscriptsyntax as rs

geo = rs.GetObjects('Select Closed Polylines',preselect=True)

if geo:
    
    uv1 = rs.GetInteger('enter number of UV divisions',number=1,minimum=1)

    rs.EnableRedraw(False)
    for objects in geo:
        rs.AddPatch((objects),(uv1,uv1),tolerance=0.0001)
    rs.EnableRedraw(True)


)</script>
    </macro_item>
    <macro_item guid="652506ee-7343-475c-a018-6ed9c0a76b29" bitmap_id="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676">
      <text>
        <locale_1033>Macro 06</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Isolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Isolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

# Get object and find layer it is on
obj = rs.GetObjects('select an object on the layer to isolate',preselect=True)

if obj:


    rs.EnableRedraw(False)

    # Create list of selected obj layers
    selectedlayers = []
    for i in obj:
        layer = rs.ObjectLayer(i)
        selectedlayers.append(layer)

    # Select all objects on each layer

    for i in selectedlayers:
        rs.ObjectsByLayer(i,True)
    isolate = rs.SelectedObjects()

    allObjects = rs.AllObjects()

    for i in isolate:
        allObjects.remove(i)

    # Hide selected objects

    rs.HideObjects(allObjects)

    rs.UnselectAllObjects()

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="87791b70-7cac-4efc-a5c4-deece16831aa" bitmap_id="7c225bac-4566-4c22-8529-19795734ecf8">
      <text>
        <locale_1033>Macro 07</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Unisolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Unisolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Unisolate All objects
#By Thomas Chapman 21/05/01

import rhinoscriptsyntax as rs

obj = rs.HiddenObjects()

if obj:

    rs.ShowObjects(obj)
)</script>
    </macro_item>
    <macro_item guid="96e93532-81ce-4156-b7f7-b7ff1364c489" bitmap_id="3a30ba51-3cf2-4d5a-ae4e-e7727296e181">
      <text>
        <locale_1033>Macro 08</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Turn Selected Object Layers Off</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Turn Selected Object Layers Off</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

obj = rs.GetObjects("select obj Layers to turn off")

if obj:

    rs.EnableRedraw(False)

    for i in obj:
        layer = rs.ObjectLayer(i)
        rs.LayerVisible(layer, visible=False)

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="d16957a9-f662-446d-9801-c0533fb38255" bitmap_id="5ecdbeb8-4c26-464d-965a-d29084b78338">
      <text>
        <locale_1033>Macro 09</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Plan View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Plan View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _T")

)</script>
    </macro_item>
    <macro_item guid="c047d19d-b398-41b0-9fd8-74fe11b70e04" bitmap_id="3f736f77-7940-4134-9713-dac547abd1c6">
      <text>
        <locale_1033>Macro 10</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Perspective View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Perspective View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _p")

)
</script>
    </macro_item>
    <macro_item guid="cfb1aa22-1db1-4869-b63d-8a0474245511" bitmap_id="c351dd99-b010-4a89-86fe-835dd645a1b8">
      <text>
        <locale_1033>Macro 11</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
import struct
import imghdr
import rhinoscriptsyntax as rs

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Check document units

#Determin Unit system and scale m input to unit system scale and close if not mm, cm, m
def scale():
    system = rs.UnitSystem()
    if system == 2 or system == 3 or system == 4:
        scaleFactorDict = {2:1000, 3:100, 4:1}
        scaleFactor = scaleFactorDict[system]
        return scaleFactor

    if system != 2 or system != 3 or system != 4:
        return None

def get_image_size(fname):
    '''Determine the image type of fhandle and return its size.
    from draco'''
    with open(fname, 'rb') as fhandle:
        head = fhandle.read(24)
        if len(head) != 24:
            return
        if imghdr.what(fname) == 'png':
            check = struct.unpack('&gt;i', head[4:8])[0]
            if check != 0x0d0a1a0a:
                return
            width, height = struct.unpack('&gt;ii', head[16:24])
        elif imghdr.what(fname) == 'gif':
            width, height = struct.unpack('&lt;HH', head[6:10])
        elif imghdr.what(fname) == 'jpeg':
            try:
                fhandle.seek(0) # Read 0xff next
                size = 2
                ftype = 0
                while not 0xc0 &lt;= ftype &lt;= 0xcf:
                    fhandle.seek(size, 1)
                    byte = fhandle.read(1)
                    while ord(byte) == 0xff:
                        byte = fhandle.read(1)
                    ftype = ord(byte)
                    size = struct.unpack('&gt;H', fhandle.read(2))[0] - 2
                # We are at a SOFn block
                fhandle.seek(1, 1)  # Skip `precision' byte.
                height, width = struct.unpack('&gt;HH', fhandle.read(4))
            except Exception: #IGNORE:W0703
                return
        else:
            return
        return width, height

def main():
    if scale() == None:
        rs.MessageBox("This tool is can only be used in mm, cm or m model units")
        return None
    
    factor = scale()
    
    #Find and open jgw file, extract scalefactor and x and y coordinates
    
    jgw = rs.OpenFileName(title= 'Select .JGW file',filter="JGW Files (*.JGW)|*.JGW||" )
    
    with open(jgw,'rt') as f:
        numslist = f.read().splitlines()
    
    scaleFactor01 = numslist[0]
    
    worldx = float(numslist[4])*int(factor)
    worldy = float(numslist[5])*int(factor)
    
    #Find and open jpg file, extract pixel size
    
    jpg = rs.OpenFileName(title= 'Select .JPG image File',filter="JPG Files (*.JPG)|*.JPG||")
    
    size = get_image_size(jpg)
    
    scaleFactor02 = (float(size[0])*int(factor))
    scaleFactor03 = (float(size[1])*int(factor))
    
    # Calculate scale factor
    
    scaleFactorWidth = (float(scaleFactor01))*(float(scaleFactor02))
    scaleFactorHeight = (float(scaleFactor01))*(float(scaleFactor03))
    
    origin = (float(worldx), (float(worldy) - float(scaleFactorHeight)), 0)
    
    picturePlane = rs.PlaneFromFrame(origin,(1,0,0),(0,1,0))
    
    rs.AddPictureFrame(picturePlane,jpg,width=(float(scaleFactorWidth)), height=(float(scaleFactorHeight)))

main()
)</script>
    </macro_item>
    <macro_item guid="63812035-1fa4-4e2a-8e3c-41fae14a9a2c" bitmap_id="5bb47664-de86-4b8e-88ce-835cfa2b3981">
      <text>
        <locale_1033>Macro 13</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Create Standard Layers</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Create Standard Layers</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Create Standard Layers

import rhinoscriptsyntax as rs
import random as r

#Add Layers to document

rs.EnableRedraw(False)

layerList = [
"L_BLDS", 
"L_BNDY_WRKS", 
"L_EDGE",
"L_HARD_ROCK",
"L_HARD_WALL",
"L_HARD_STEP",
"L_HARD_RAMP",
"L_HARD_FNCE",
"L_HARD_PAV1",
"L_HARD_PAV2",
"L_HARD_PAV3",
"L_HARD_PAV4",
"L_LGHT",
"L_ENTO",
"L_PLAY_EQUI",
"L_PLNT",
"L_STRU",
"L_TEXT",
"L_TREE_PROP",
"L_TREE_RETN",
"L_WALL",
"_L_WORKING",
"L_SOFT_GRDN",
"L_SOFT_MLCH",
"L_SOFT_LAWN",
"L_SOFT_PLANT",
"L_FURN",
"_L_OFF"


]



layerList.sort()

parentLayer = rs.AddLayer(name="LANDSCAPE", color=None, visible=True, locked=False, parent=None)

for layer in layerList:
    rs.AddLayer(layer,(r.randrange(255),r.randrange(255),r.randrange(255)),visible=True, locked=False, parent= parentLayer)

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="812b1c36-0e85-4b6c-9982-e2b575bf9c7b" bitmap_id="b54432f0-91ec-43b6-8b11-4a7654e19716">
      <text>
        <locale_1033>Macro 14</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Calculate Height difference between two points</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Calculate Height difference between two points</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

pt01 = rs.GetPoint('Select first point to measure from')
pt02 = rs.GetPoint('Select second point to measure to')

if pt02:

    pt01Z = pt01.Z
    pt02Z = pt02.Z

    height = abs(pt01Z-pt02Z)
    height = round(height, 3)

    rs.ClipboardText(height)

    rs.MessageBox(height, buttons=0, title="Height difference - Value copied to clipboard")
)</script>
    </macro_item>
    <macro_item guid="2f54edf0-21f1-40d0-9cfb-31f8276274ca" bitmap_id="d59a330a-0413-4632-9c5c-1d8f613a7bd0">
      <text>
        <locale_1033>Macro 15</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Rotate picture frames to face current camera view</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Rotate picture frames to face current camera view</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''
#Rotate picture frames to face camera

import rhinoscriptsyntax as rs

frames = rs.GetObjects("Select Picture Frames",filter=8,preselect=True)


#rotate surfaces around z axis towards camera point
if frames:

    cam = rs.ViewCamera()
    camz = (cam.X,cam.Y,0)
    world = rs.WorldXYPlane()
    angle = 1

    rs.EnableRedraw(False)

    for i in frames:
        angle = 1
        while angle &gt;= 1:
            
            #get mid point of surface and move to z 0
            pointmid = rs.SurfaceAreaCentroid(i)
            pointmidz = (pointmid[0].X,pointmid[0].Y,0)
            #Get center UV of surface
            domainU = rs.SurfaceDomain(i, 0)
            domainV = rs.SurfaceDomain(i, 1)
            u = domainU[1]/2.0
            v = domainV[1]/2.0
            #Get normal vector of surface and cam vector
            vec1 = rs.SurfaceNormal(i,(u,v))
            vec1 = vec1.X,vec1.Y,0
            vec2 = rs.VectorCreate(camz,pointmidz)
            #find angle difference between the two vectors
            angle = rs.VectorAngle(vec1,vec2)
            angle = round(angle)
            #Rotate Object
            rs.RotateObject(i,pointmidz,angle)
        continue

    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="650f2340-8c69-4456-84be-cdc45ddf12be" bitmap_id="8fa94ce8-b572-453c-8fec-ae23f13cb9ad">
      <text>
        <locale_1033>Macro 16</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Multi-Offset Closed Curves</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Multi-Offset Closed Curves</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''
#Multi Offset

import rhinoscriptsyntax as rs

obj = rs.GetObjects('Select Closed Curves for Offset',preselect=True)
bool = rs.GetBoolean('Offset Direction',('Direction','Inward','Outward'),(False))


if bool:
    bool = bool[0]
    offset = rs.GetReal('Distance to Offset')
    
    for i in obj:
        if rs.IsCurveClosed(i):
            if bool == False:
                pt = rs.CurveAreaCentroid(i)
                pt = pt[0]
                rs.OffsetCurve(i,pt,offset)
            if bool == True:
                pt = [1000000,1000000,1000000]
                rs.OffsetCurve(i,pt,offset)
)</script>
    </macro_item>
    <macro_item guid="89640668-abe2-45c1-9303-09a96c1466e8" bitmap_id="adf3520d-c901-4048-a55a-24d4466b0615">
      <text>
        <locale_1033>Macro 17</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Delete or hide selected objects not in the current view</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Delete or hide selected objects not in the current view</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Delete selected objects outside view cone


import rhinoscriptsyntax as rs

obj = rs.GetObjects('Select objects to test', preselect=True)
bool = rs.GetBoolean('Delete or Hide',('Option','Delete','Hide'),(False))


if obj:
    rs.EnableRedraw(False)
    
    for i in obj:
        
        isVisible = rs.IsVisibleInView(i)
        if isVisible == False:
            if bool[0] == True:
                rs.HideObject(i)
            if bool[0] == False:
                rs.DeleteObject(i)

rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="00485d86-6061-4967-b8a5-b52920e03baa" bitmap_id="61624676-c9c5-49bf-ad20-9aa2092d1576">
      <text>
        <locale_1033>Macro 18</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Relocate World coordinated drawing to rhino origin</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Relocate World coordinated drawing to rhino origin</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Truncate World Coordinate

import rhinoscriptsyntax as rs


#Get setout point
point = rs.GetPoint("Pick Point for World Coordinate value")

if point:
    rs.EnableRedraw(False)
    northing = round(point.Y,5)
    easting = round(point.X,5)

    #Add origin layer and lock it
    rs.AddLayer("_ORIGIN_",(255,0,0),visible=True,locked=True)
    originPoint = rs.AddPoint(point)

    #Move all objects to origin
    allObj = rs.AllObjects()
    vector = rs.VectorCreate((0,0,0),point)
    rs.MoveObjects(allObj,vector)

    #Draw origin marker`
    circle = rs.AddCircle(originPoint,1)
    quads = rs.EllipseQuadPoints(circle)
    line1 = rs.AddLine(quads[0],quads[1])
    line2 = rs.AddLine(quads[2],quads[3])

    #Draw text marker and designate a name
    text = rs.AddText((" E "+ str(easting) + " N " + str(northing)), originPoint, 0.5)
    rs.ObjectName(text, "_ORIGIN_TEXT_")
    rs.ObjectName(originPoint, "_ORIGIN_POINT_")

    #Move geometry to locked origin layer
    rs.ObjectLayer([circle, line1, line2, originPoint, text], "_ORIGIN_")
    
    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="b7943e02-c0c3-4bd4-af85-e859db81c052" bitmap_id="85a60542-9518-495a-80eb-1e3ee6470955">
      <text>
        <locale_1033>Macro 19</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Restore world coordinated drawing to world coordinates</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Restore world coordinated drawing to world coordinates</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Restore Origin

import rhinoscriptsyntax as rs

rs.EnableRedraw(False)

#retreive northing and easting from text object
obj = rs.ObjectsByName("_ORIGIN_TEXT_")
if obj:
    text = rs.TextObjectText(obj)
    textList = text.split()
    easting = float(textList[1])
    northing = float(textList[3])
    
    #create reference coordinates to make vector
    orPoint = (easting,northing,0)
    point = rs.PointCoordinates(rs.ObjectsByName("_ORIGIN_POINT_"))
    vector = rs.VectorCreate(orPoint,point)
    
    #move all objects back to original origin point
    allObj = rs.AllObjects()
    rs.MoveObjects(allObj,vector)
    
    #delete coordinate geometry
    isCurrent = rs.IsLayerCurrent("_ORIGIN_")
    if isCurrent == False:
        rs.PurgeLayer("_ORIGIN_")
    if isCurrent == True:
        defaultCheck = rs.IsLayer("Default")
        if defaultCheck == True:
            rs.CurrentLayer("Default")
            rs.PurgeLayer("_ORIGIN_")
        if defaultCheck == False:
            rs.AddLayer("Default")
            rs.CurrentLayer("Default")
            rs.PurgeLayer("_ORIGIN_")
    
    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="978e1959-d9a6-4142-8d86-6b21b079eaa6" bitmap_id="6e502bab-241b-4e5b-ab6e-45895a855e3d">
      <text>
        <locale_1033>Macro 20</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Get Coordinates</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Get Coordinates</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Get Coordinates

import rhinoscriptsyntax as rs

#Get point from user and round to nearest 3 decimal points
point = rs.GetPoint("Pick point to find Coordinate information")
pointX = round(point.X, 3)
pointY = round(point.Y, 3)
pointZ = round(point.Z, 3)

#store string in variable
coord = ("E " + str(pointX) + " N " + str(pointY) + " Z " + str(pointZ))

#Create textdot
rs.AddTextDot("E " + str(pointX) + " N " + str(pointY) + " Z " + str(pointZ),point)

#copy to clipboard
rs.ClipboardText(coord)
)</script>
    </macro_item>
    <macro_item guid="05291655-fced-47a7-a765-dc4637a8e6f2" bitmap_id="e665d72d-4470-43f1-9a74-a7f1a96e66ba">
      <text>
        <locale_1033>Macro 21</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Stair Generator</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Stair Generator</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
# Imports
import System
import Rhino.UI
import Eto.Drawing as drawing
import Eto.Forms as forms
import rhinoscriptsyntax as rs

################################################################################

# SampleEtoRoomNumber dialog class
class StairGenDialog(forms.Dialog[bool]):

    # Dialog box Class initializer
    def __init__(self):
        # Initialize dialog box
        self.Title = 'LandArchTools: Stair Generator'
        self.Padding = drawing.Padding(10)
        self.Resizable = False
        self.Closing += self.OnFormClosed
################################################################################
        
        # Create controls for the dialog
        #Stair gen label
        self.stairGenLabel = forms.Label(Text = 'STAIR GENERATOR')
        
        #Gen Handrail label
        self.genStairLabel = forms.Label(Text = 'Generate Stair?:')
        #Gen Handrail control
        self.genStairBool = forms.CheckBox()
        self.genStairBool.Checked = False
        self.genStairBool.CheckedChanged += self.stairGen
        
        #Number of Steps Label
        self.numStepsLabel = forms.Label(Text = 'Number of steps:')
        #Number of Steps control
        self.numStepsC = forms.NumericStepper()
        self.numStepsC.DecimalPlaces = 0
        self.numStepsC.Increment = 1
        self.numStepsC.MaxValue = 100
        self.numStepsC.MinValue = 2
        self.numStepsC.Value = 3
        self.numStepsC.ValueChanged += self.stairGen
        self.numStepsC.ValueChanged += self.handrailGen

        
        #Tread label
        self.treadLabel = forms.Label(Text = 'Tread (mm):')
        #Tread length control
        self.treadC = forms.NumericStepper()
        self.treadC.DecimalPlaces = 0
        self.treadC.Increment = 1
        self.treadC.MaxValue = 1000
        self.treadC.MinValue = 1
        self.treadC.Value = 300
        self.treadC.ValueChanged += self.stairGen
        self.treadC.ValueChanged += self.handrailGen
        
        #Riser Label
        self.riserLabel = forms.Label(Text = 'Riser (mm):')
        #Tread length control
        self.riserC = forms.NumericStepper()
        self.riserC.DecimalPlaces = 0
        self.riserC.Increment = 1
        self.riserC.MaxValue = 1000
        self.riserC.MinValue = 1
        self.riserC.Value = 150
        self.riserC.ValueChanged += self.stairGen
        self.riserC.ValueChanged += self.handrailGen
        
        #Flip label
        self.flipLabel = forms.Label(Text = 'Flip direction of stairs:')
        #Flip control
        self.flipC = forms.CheckBox()
        self.flipC.CheckedChanged += self.stairGen
        self.flipC.CheckedChanged += self.handrailGen
        
        ###########################################
        #Handrail Gen Label
        self.handrailGenLabel = forms.Label(Text = 'HANDRAIL GENERATOR')
        #self.handrailGenLabel.VerticalAlignment.Center
        
        #Gen Handrail label
        self.genHandrailLabel = forms.Label(Text = 'Generate Handrail?:')
        #Gen Handrail control
        self.genHandrailBool = forms.CheckBox()
        self.genHandrailBool.Checked = False
        self.genHandrailBool.CheckedChanged += self.handrailGen
        
        #Handrail Type Label
        self.handrailTypeLabel = forms.Label(Text = 'Handrail type:')
        #Handrail Type Dropdown
        self.handrailTypeC = forms.DropDown()
        self.handrailTypeC.DataStore = ['180 No Return', '180 Full Return', 'Ground Triangular Return', 'Ground Return', 'Wall Return']
        self.handrailTypeC.SelectedIndex = 0
        self.handrailTypeC.SelectedIndexChanged += self.handrailGen
        
        #Handrail Height Label
        self.handrailHeightLabel = forms.Label(Text = 'Handrail height (mm):')
        #Handrail Height control
        self.handrailHeightC = forms.NumericStepper()
        self.handrailHeightC.DecimalPlaces = 0
        self.handrailHeightC.Increment = 1
        self.handrailHeightC.MaxValue = 5000
        self.handrailHeightC.MinValue = 100
        self.handrailHeightC.Value = 900
        self.handrailHeightC.ValueChanged += self.handrailGen
        
        #Handrail offset label
        self.handrailOffsetLabel = forms.Label(Text = 'Handrail offset from edges (mm):')
        #Handrail offset control
        self.handrailOffsetC = forms.NumericStepper()
        self.handrailOffsetC.DecimalPlaces = 0
        self.handrailOffsetC.Increment = 1
        self.handrailOffsetC.MaxValue = 5000
        self.handrailOffsetC.MinValue = 50
        self.handrailOffsetC.Value = 150
        self.handrailOffsetC.ValueChanged += self.handrailGen
        
        #Handrail extension Label
        self.handrailExtensionLabel = forms.Label(Text = 'Handrail extension (mm):')
        #Handrail extension Control
        self.handrailExtensionC = forms.NumericStepper()
        self.handrailExtensionC.DecimalPlaces = 0
        self.handrailExtensionC.Increment = 1
        self.handrailExtensionC.MaxValue = 5000
        self.handrailExtensionC.MinValue = 300
        self.handrailExtensionC.Value = 300
        self.handrailExtensionC.ValueChanged += self.handrailGen
        
        #Handrail Diameter Label
        self.handrailDiameterLabel = forms.Label(Text = 'Handrail diameter (mm):')
        #Handrail Diameter control
        self.handrailDiameterC = forms.NumericStepper()
        self.handrailDiameterC.DecimalPlaces = 0
        self.handrailDiameterC.Increment = 1
        self.handrailDiameterC.MaxValue = 50
        self.handrailDiameterC.MinValue = 30
        self.handrailDiameterC.Value = 30
        self.handrailDiameterC.ValueChanged += self.handrailGen
        
        # Create the default button
        self.DefaultButton = forms.Button(Text = 'OK')
        self.DefaultButton.Click += self.OnOKButtonClick

        # Create the abort button
        self.AbortButton = forms.Button(Text = 'Cancel')
        self.AbortButton.Click += self.OnCloseButtonClick

################################################################################

        # Create a table layout and add all the controls
        layout = forms.DynamicLayout()
        layout.Spacing = drawing.Size(5, 5)

        layout.AddRow(None)
        layout.AddRow(self.stairGenLabel)
        layout.AddRow(None)
        layout.AddRow(None)
        layout.AddRow(self.genStairLabel, self.genStairBool)
        layout.AddRow(self.numStepsLabel, self.numStepsC)
        layout.AddRow(self.treadLabel, self.treadC)
        layout.AddRow(self.riserLabel, self.riserC)
        layout.AddRow(self.flipLabel, self.flipC)
        layout.AddRow(None)
        layout.AddRow(None)
        layout.AddRow(None)
        layout.AddRow(None)
        layout.AddRow(self.handrailGenLabel)
        layout.AddRow(None)
        layout.AddRow(None)
        layout.AddRow(self.genHandrailLabel, self.genHandrailBool)
        layout.AddRow(self.handrailTypeLabel, self.handrailTypeC)
        layout.AddRow(self.handrailHeightLabel, self.handrailHeightC)
        layout.AddRow(self.handrailOffsetLabel, self.handrailOffsetC)
        layout.AddRow(self.handrailExtensionLabel, self.handrailExtensionC)
        layout.AddRow(self.handrailDiameterLabel, self.handrailDiameterC)
        layout.AddRow(self.DefaultButton, self.AbortButton)
        
        # Set the dialog content
        self.Content = layout

################################################################################

    #Stair Generator Method
    def stairGen(self, sender, e):

        # Variables and defaults
        tread = int(self.treadC.Value) * scale
        riser = int(self.riserC.Value) * scale
        numSteps = int(self.numStepsC.Value)
        flip = self.flipC.Checked
        stairLength = tread * numSteps
        genStair = self.genStairBool.Checked
        curveList = []
        junkList = []

        #get user line for top width of stair
        
        rs.EnableRedraw(False)
        
        if genStair == False:
            iteration = rs.ObjectsByName("GdC9V&amp;^a^rGZZNgiWFH&amp;aTRQLLscu*9AZCmhk8t2!a")
            if iteration:
                rs.DeleteObject(iteration)
                rs.EnableRedraw(True)
                
        if genStair == True:
            #Delete any existing iteration
            iteration = rs.ObjectsByName("GdC9V&amp;^a^rGZZNgiWFH&amp;aTRQLLscu*9AZCmhk8t2!a")
            if iteration:
                rs.DeleteObject(iteration)
            
            topLine = rs.AddLine(line[0],line[1])
            topPoint = line[0]
            stepPoint = topPoint
            
            #get perp line - length of stair
            t = rs.CurveClosestPoint(topLine, topPoint)
            planeNormal = rs.CurveNormal(topLine)
            tangent = rs.CurveTangent(topLine, t)
            curveNormal = rs.VectorCrossProduct(planeNormal, tangent)
            
            # Get vector
            vectorRun = rs.VectorCreate(topPoint, topPoint + curveNormal * tread)
            
            # Bool flip direction of stair (add bool option in GUI)
            if flip == True:
                vector = rs.VectorReverse(vectorRun)
            else:
                vector = vectorRun
                
            # loop through number of steps to gen step curve
            for i in range(numSteps):
                pt01 = rs.AddPoint(stepPoint)
                pt02 = rs.CopyObject(pt01, vector)
                pt03 = rs.CopyObject(pt02, [0,0,riser*-1])
                curve = rs.AddPolyline([pt01,pt02,pt03])
                curveList.append(curve)
                stepPoint = rs.CurveEndPoint(curve)
                rs.DeleteObjects([pt01,pt02,pt03])
            
            # Extrude stair curve to full width
            joinedCurve = rs.JoinCurves(curveList)
            bottomPoint = rs.CopyObject(line[0], [0,0,(riser*numSteps)*-1])
            stairBottom = rs.CurveEndPoint(joinedCurve)
            curve = rs.AddPolyline([line[0],bottomPoint,stairBottom])
            handRailCurve = rs.AddCurve([bottomPoint,stairBottom]) #createhandrail curve and return it
            curveList.append(curve)
            joinedCurves = rs.JoinCurves(curveList)
            stair = rs.ExtrudeCurveStraight(joinedCurves, line[0], line[1])
            rs.CapPlanarHoles(stair)
            #this identifies the generated stair geometry
            rs.ObjectName(stair, "GdC9V&amp;^a^rGZZNgiWFH&amp;aTRQLLscu*9AZCmhk8t2!a") 
            
            # clean up leftover geometry
            junkList.extend([bottomPoint,joinedCurve,joinedCurves, topLine, handRailCurve])
            junkList = junkList + curveList
            rs.DeleteObjects(junkList)
        
            rs.EnableRedraw(True)

    # Handrail Generator Method
    # hType, curve, handrailOffset, tread, riser, numSteps, scale, vectorRun, hHeight, hEndLength, pipeDiameter,
    def handrailGen(self, sender, e):
        
        flip = self.flipC.Checked
        hType = self.handrailTypeC.SelectedIndex
        handrailOffset = int(self.handrailOffsetC.Value) * scale
        tread = int(self.treadC.Value) * scale
        riser = int(self.riserC.Value) * scale
        numSteps = int(self.numStepsC.Value)
        hEndLength = int(self.handrailExtensionC.Value) * scale
        pipeDiameter = int(self.handrailDiameterC.Value) * scale
        hHeight = int(self.handrailHeightC.Value) * scale
        topLine = rs.AddLine(line[0],line[1])
        rs.ObjectName(topLine, "BC6#DT5LCQX*#8r97Tquf5gNF")
        topPoint = line[0]
        genHandrail = self.genHandrailBool.Checked

        rs.EnableRedraw(False)
        if genHandrail == False:
            iteration = rs.ObjectsByName("qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
            if iteration:
                rs.DeleteObjects(iteration)
                rs.EnableRedraw(True)
                
        if genHandrail == True:
            #Delete any existing iteration
            iteration = rs.ObjectsByName("qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
            if iteration:
                rs.DeleteObjects(iteration)
            
            #get perp line - length of stair
            t = rs.CurveClosestPoint(topLine, topPoint)
            planeNormal = rs.CurveNormal(topLine)
            tangent = rs.CurveTangent(topLine, t)
            
            if flip == False:
                curveNormal = rs.VectorCrossProduct(planeNormal, tangent)
            else:
                curveNormal = rs.VectorReverse(rs.VectorCrossProduct(planeNormal, tangent))
            
            # Get guide curve
            scaledV = rs.VectorReverse(rs.VectorScale(curveNormal, tread*numSteps))
            ptGuide1 = rs.AddPoint(line[0])
            ptGuide2 = rs.CopyObject(ptGuide1, scaledV)
            rs.MoveObjects([ptGuide1, ptGuide2], [0,0,(riser*numSteps)*-1])
            curve = rs.AddCurve([ptGuide1, ptGuide2])
            
            #Get vector for step run
            vectorRun = rs.VectorCreate(topPoint, topPoint + curveNormal * tread)
            
            # Setup curves for handrail
            curve1 = curve
            curve2 = rs.MoveObject(rs.CopyObject(curve1, rs.VectorCreate(line[1], 
            rs.CurveStartPoint(curve1))), [0,0,(riser * numSteps)*-1])
            midPoint = rs.CurveMidPoint(userCurve)
            
            # Main slanted handrail curve
            pt1 = rs.MoveObject(rs.MoveObject(rs.CurveStartPoint(curve1), vectorRun), [0,0,hHeight + (riser*numSteps)])
            pt2 = rs.MoveObject(rs.MoveObject(rs.CurveEndPoint(curve1), vectorRun), [0,0,hHeight])
            mainCurve = rs.AddCurve([pt1, pt2])
            
            # Top leveled handrail curve at 300mm standard DDA
            pt3 = rs.CopyObject(pt1, rs.VectorReverse(rs.VectorScale(rs.VectorUnitize(vectorRun), hEndLength)))
            topCurve = rs.AddCurve([pt1, pt3])
            
            # Bottom leveled handrail curve at 300mm standard DDA
            pt4 = rs.CopyObject(pt2, rs.VectorScale(rs.VectorUnitize(vectorRun), hEndLength))
            bottomCurve = rs.AddCurve([pt2, pt4])
            
            # Start list of construction geometry for later cleanup
            hGeoList = [curve1, curve2, pt1, pt2, mainCurve, pt3, topCurve, pt4, bottomCurve, ptGuide1, ptGuide2, curve, topLine]
            
            # IF STATEMENTS FOR HANDRAIL TYPE
            
            # 1 180 degree, no return
            if hType == 0:
                
                # Lower Handrail return
                hpt1 = rs.CopyObject(pt4, [0,0,(pipeDiameter * 2)* -1])
                hpt2 = rs.MoveObject(rs.CopyObject(pt4, [0,0,pipeDiameter * -1]), rs.VectorScale(rs.VectorUnitize(vectorRun), pipeDiameter))
                lowerH = rs.AddArc3Pt(pt4, hpt1, hpt2)
                
                # Upper Handrail return
                hpt3 = rs.CopyObject(pt3, [0,0,(pipeDiameter * 2)* -1])
                hpt4 = rs.MoveObject(rs.CopyObject(pt3, [0,0,pipeDiameter * -1]), rs.VectorReverse(rs.VectorScale(rs.VectorUnitize(vectorRun), pipeDiameter)))
                upperH = rs.AddArc3Pt(pt3, hpt3, hpt4)
                
                # Draw leg upper
                lpt1 = rs.CurveMidPoint(topCurve)
                lpt2 = rs.CopyObject(lpt1, [0,0,hHeight*-1])
                lCurveUpper = rs.AddCurve([lpt1, lpt2])
                
                # Draw leg lower
                lpt3 = rs.CopyObject(pt2, [0,0,hHeight*-1])
                lCurveLower = rs.AddCurve([pt2,lpt3])
                
                # Make vectors to move handrails into place
                moveShort = rs.VectorScale(userVector, handrailOffset)
                moveLong = rs.VectorScale(userVector, rs.CurveLength(userCurve) - (handrailOffset*2))
                
                # Join, offset skeleton
                hCurve = rs.JoinCurves([mainCurve, topCurve, bottomCurve, lowerH, upperH])
                hCurve1 = rs.CopyObject(hCurve, moveShort)
                lCurveUpper1 = rs.CopyObject(lCurveUpper, moveShort)
                lCurveLower1 = rs.CopyObject(lCurveLower, moveShort)
                
                # Pipe skeleton
                pipe1 = rs.AddPipe(hCurve1,0, pipeDiameter/2,blend_type=0, cap = 1)
                pipe2 = rs.AddPipe(lCurveUpper1,0, pipeDiameter/2,blend_type=0, cap = 1)
                pipe3 = rs.AddPipe(lCurveLower1,0, pipeDiameter/2,blend_type=0, cap = 1)
                
                #form list of generated geo
                handrailGeo1 = [pipe1, pipe2, pipe3]

                # Name geo for deletion
                for i in handrailGeo1:
                    rs.ObjectName(i, "qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
                #copy
                handrailGeo2 = rs.CopyObjects(handrailGeo1, moveLong)
                
                # Cleanup construction linework
                hGeoList.extend([hpt1, hpt2, lowerH, hpt3, hpt4, upperH, lpt2, lpt3, lCurveLower, hCurve, hCurve1,
                lCurveUpper1, lCurveLower1, lCurveUpper])
                rs.DeleteObjects(hGeoList)
                
                rs.EnableRedraw(True)
        
            # 2 180 degree, full return
            if hType == 1:
                
                rs.EnableRedraw(False)
                
                # Lower handrail return
                hpt1 = rs.CopyObject(pt4, [0,0,(hEndLength/3)*-2])
                hpt2 = rs.CopyObject(pt2, [0,0,(hEndLength/3)*-2])
                hCurve11 = rs.AddPolyline([pt4, hpt1, hpt2])
                lowerH = rs.JoinCurves([bottomCurve, hCurve11])
                
                # Upper handrail return
                hpt3 = rs.CopyObject(pt3, [0,0,(hEndLength/3)*-2])
                hpt4 = rs.CopyObject(rs.CurveMidPoint(topCurve), [0,0,(hEndLength/3)*-2])
                hCurve2 = rs.AddPolyline([pt3, hpt3, hpt4])
                upperH = rs.JoinCurves([topCurve, hCurve2])
                
                # Draw leg upper
                lpt1 = rs.CurveMidPoint(topCurve)
                lpt2 = rs.CopyObject(lpt1, [0,0,hHeight*-1])
                lCurveUpper = rs.AddCurve([lpt1, lpt2])
                
                # Draw leg lower
                lpt3 = rs.CopyObject(pt2, [0,0,hHeight*-1])
                lCurveLower = rs.AddCurve([pt2,lpt3])
                
                # Make vectors to move handrails into place
                moveShort = rs.VectorScale(userVector, handrailOffset)
                moveLong = rs.VectorScale(userVector, rs.CurveLength(userCurve) - (handrailOffset*2))
                
                # Pipe skeleton move
                hCurve1 = rs.JoinCurves([lowerH, upperH, mainCurve])
                rs.MoveObjects([hCurve1, lCurveUpper, lCurveLower], moveShort)
                
                #Pipe
                pipe1 = rs.AddPipe(hCurve1,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe2 = rs.AddPipe(lCurveUpper,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe3 = rs.AddPipe(lCurveLower,0, pipeDiameter/2, blend_type=0, cap = 1)
                
                handrailGeo1 = [pipe1, pipe2, pipe3]

                # Name geo for deletion
                for i in handrailGeo1:
                    rs.ObjectName(i, "qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
                
                # Move and copy into position
                handrailGeo2 = rs.CopyObjects(handrailGeo1, moveLong)
                
                # Cleanup
                hGeoList.extend([hpt1, hpt2, hCurve11, lowerH, hpt3, hpt4, hCurve2, upperH, lpt2, lCurveUpper, lpt3,
                lCurveLower, hCurve1])
                rs.DeleteObjects(hGeoList)
                
                rs.EnableRedraw(True)
                
            # 3 Ground triangle return
            if hType == 2:
                
                rs.EnableRedraw(False)
                
                # Draw leg upper
                lpt1 = rs.CurveMidPoint(topCurve)
                lpt2 = rs.CopyObject(lpt1, [0,0,hHeight*-1])
                lCurveUpper = rs.AddCurve([lpt1, lpt2])
                
                # Draw leg lower
                lpt3 = rs.CopyObject(pt2, [0,0,hHeight*-1])
                lCurveLower = rs.AddCurve([pt2,lpt3])
                
                # Lower Return
                lowerH = rs.AddCurve([pt4, lpt3])
                
                # Upper Return
                upperH = rs.AddCurve([pt3, lpt2])
                
                # Make vectors to move handrails into place
                moveShort = rs.VectorScale(userVector, handrailOffset)
                moveLong = rs.VectorScale(userVector, rs.CurveLength(userCurve) - (handrailOffset*2))
                
                # Join Curves and move
                hCurve = rs.JoinCurves([mainCurve, topCurve, bottomCurve, lowerH, upperH])
                rs.MoveObjects([hCurve, lCurveUpper, lCurveLower], moveShort)
                
                # pipe
                pipe1 = rs.AddPipe(hCurve,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe2 = rs.AddPipe(lCurveUpper,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe3 = rs.AddPipe(lCurveLower,0, pipeDiameter/2, blend_type=0, cap = 1)
                
                handrailGeo1 = [pipe1, pipe2, pipe3]
                
                # Name geo for deletion
                for i in handrailGeo1:
                    rs.ObjectName(i, "qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
                
                # move and copy into place
                handrailGeo2 = rs.CopyObjects(handrailGeo1, moveLong)
                
                # Cleanup
                hGeoList.extend([lpt2, lCurveUpper, lpt3, lCurveLower, lowerH, upperH, hCurve, topLine])
                rs.DeleteObjects(hGeoList)
                
                rs.EnableRedraw(True)
                
            # 4 Ground return
            
            if hType == 3:
                
                rs.EnableRedraw(False)
                
                # Draw leg upper
                lpt1 = rs.CurveMidPoint(topCurve)
                lpt2 = rs.CopyObject(lpt1, [0,0,hHeight*-1])
                lCurveUpper = rs.AddCurve([lpt1, lpt2])
                
                # Draw leg lower
                lpt3 = rs.CopyObject(pt2, [0,0,hHeight*-1])
                lCurveLower = rs.AddCurve([pt2,lpt3])
                
                # Lower Return
                hpt1 = rs.CopyObject(pt4, [0,0,hHeight*-1])
                hCurve1 = rs.AddCurve([pt4, hpt1])
                
                # Upper Return
                hpt2 = rs.CopyObject(pt3, [0,0,hHeight*-1])
                hCurve2 = rs.AddCurve([pt3, hpt2])
                
                # Join curves
                hCurve = rs.JoinCurves([mainCurve, topCurve, bottomCurve, hCurve1, hCurve2])
                
                # Get Vectors
                moveShort = rs.VectorScale(userVector, handrailOffset)
                moveLong = rs.VectorScale(userVector, rs.CurveLength(userCurve) - (handrailOffset*2))
                
                #move
                rs.MoveObjects([hCurve, lCurveUpper, lCurveLower], moveShort)
                
                # Pipe
                pipe1 = rs.AddPipe(hCurve,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe2 = rs.AddPipe(lCurveUpper,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe3 = rs.AddPipe(lCurveLower,0, pipeDiameter/2, blend_type=0, cap = 1)
                
                handrailGeo1 = [pipe1, pipe2, pipe3]
                
                # Name geo for deletion
                for i in handrailGeo1:
                    rs.ObjectName(i, "qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
                    
                # move and copy into place
                handrailGeo2 = rs.CopyObjects(handrailGeo1, moveLong)
                
                # Clean up
                hGeoList.extend([lpt2, lCurveUpper, lpt3, lCurveLower, hpt1, hCurve1, hpt2, hCurve2, hCurve, topLine])
                rs.DeleteObjects(hGeoList)
                
                rs.EnableRedraw(True)
        
            # 5 Wall return
            if hType == 4:
                
                rs.EnableRedraw(False)
                
                # Draw leg upper
                lpt1 = rs.CurveMidPoint(topCurve)
                lpt2 = rs.CopyObject(lpt1, [0,0,hHeight*-1])
                lCurveUpper = rs.AddCurve([lpt1, lpt2])
                
                # Draw leg lower
                lpt3 = rs.CopyObject(pt2, [0,0,hHeight*-1])
                lCurveLower = rs.AddCurve([pt2,lpt3])
                
                #get vectors
                vector1 =  rs.VectorScale(rs.VectorUnitize(rs.VectorReverse(userVector)), handrailOffset)
                vector2 = rs.VectorScale(userVector, rs.CurveLength(userCurve))
                
                # Lower Return
                hpt1 = rs.CopyObject(pt4, vector1)
                hCurve1 = rs.AddCurve([pt4, hpt1])
                
                # Upper Return
                hpt2 = rs.CopyObject(pt3, vector1)
                hCurve2 = rs.AddCurve([pt3, hpt2])
                
                # Join main curves
                hCurveMain1 = rs.JoinCurves([mainCurve, topCurve, bottomCurve])
                
                # Get Vectors
                moveShort = rs.VectorScale(userVector, handrailOffset)
                moveLong = rs.VectorScale(userVector, rs.CurveLength(userCurve) - handrailOffset)
                
                # Copy hanrail 2
                hCurveMain2 = rs.CopyObject(hCurveMain1, moveLong)
                hCurve3 = rs.CopyObject(hCurve1, vector2)
                hCurve4 = rs.CopyObject(hCurve2, vector2)
                lCurveUpper2 = rs.CopyObject(lCurveUpper, moveLong)
                lCurveLower2 = rs.CopyObject(lCurveLower, moveLong)
                
                # Join curves
                hCurveJoined1 = rs.JoinCurves([hCurve1, hCurve2, hCurveMain1])
                hCurveJoined2 = rs.JoinCurves([hCurveMain2, hCurve3, hCurve4,])
                
                # Pipe
                pipe1 = rs.AddPipe(hCurveJoined1,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe2 = rs.AddPipe(lCurveLower,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe3 = rs.AddPipe(lCurveUpper,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe4 = rs.AddPipe(hCurveJoined2,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe5 = rs.AddPipe(lCurveUpper2,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe6 = rs.AddPipe(lCurveLower2,0, pipeDiameter/2, blend_type=0, cap = 1)
                
                handrailGeo1 = [pipe1, pipe2, pipe3, pipe3, pipe4, pipe5, pipe6]
                
                # Name geo for deletion
                for i in handrailGeo1:
                    rs.ObjectName(i, "qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
                
                # Move handrail 1 into place
                rs.MoveObjects([pipe1, pipe2, pipe3], moveShort)
                
                # Cleanup
                hGeoList.extend([lpt2, lCurveUpper, lpt3, lCurveLower, hpt1, hCurve1, hpt2, hCurve2, hCurveMain1, hCurveMain2, hCurve3,
                hCurve4, lCurveUpper2, lCurveLower2, hCurveJoined1, hCurveJoined2])
                rs.DeleteObjects(hGeoList)
                
                rs.EnableRedraw(True)

    # Close button click handler
    def OnCloseButtonClick(self, sender, e):
        generatedStair = rs.ObjectsByName("GdC9V&amp;^a^rGZZNgiWFH&amp;aTRQLLscu*9AZCmhk8t2!a")
        generatedHandrail = rs.ObjectsByName("qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
        rs.DeleteObjects(rs.ObjectsByName("xAbJgNV6^bz6azN&amp;6E$Q^WeX$Dd^vygCz5z7Hmynb5"))
        rs.DeleteObjects(rs.ObjectsByName("BC6#DT5LCQX*#8r97Tquf5gNF"))
        if generatedStair:
            rs.DeleteObject(generatedStair)
        if generatedHandrail:
            rs.DeleteObjects(generatedHandrail)
        self.Close(False)

    # close x button handler
    def OnFormClosed(self, sender, e):
        generatedStair = rs.ObjectsByName("GdC9V&amp;^a^rGZZNgiWFH&amp;aTRQLLscu*9AZCmhk8t2!a")
        generatedHandrail = rs.ObjectsByName("qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
        rs.DeleteObjects(rs.ObjectsByName("xAbJgNV6^bz6azN&amp;6E$Q^WeX$Dd^vygCz5z7Hmynb5"))
        rs.DeleteObjects(rs.ObjectsByName("BC6#DT5LCQX*#8r97Tquf5gNF"))
        if generatedStair:
            rs.DeleteObject(generatedStair)
        if generatedHandrail:
            rs.DeleteObjects(generatedHandrail)
        self.Close(False)

    # OK button click handler
    def OnOKButtonClick(self, sender, e):
        #remove object name to avoid deletion
        generatedStair = rs.ObjectsByName("GdC9V&amp;^a^rGZZNgiWFH&amp;aTRQLLscu*9AZCmhk8t2!a")
        generatedHandrail = rs.ObjectsByName("qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
        rs.DeleteObjects(rs.ObjectsByName("xAbJgNV6^bz6azN&amp;6E$Q^WeX$Dd^vygCz5z7Hmynb5"))
        rs.DeleteObjects(rs.ObjectsByName("BC6#DT5LCQX*#8r97Tquf5gNF"))
        if generatedStair:
            rs.ObjectName(generatedStair, name="www.landarchtools.com")
        if generatedHandrail:
            rs.ObjectName(generatedHandrail, name="www.landarchtools.com")

        self.Close(True)


################################################################################

#Get scale factor and abort if not in mm cm or m
system = rs.UnitSystem()
if system == 2 or system == 3 or system == 4:
    scaleFactorDict = {2:1, 3:0.1, 4:0.001}
    scaleFactor = scaleFactorDict[system]
    scale = scaleFactor
else:
    rs.MessageBox("change document to use mm, cm or m")
    exit()

#Get stair width
line = rs.GetLine(mode=1,message1="Pick two points to define top step width")
line[1].Z = line[0].Z
userCurve = rs.AddLine([line[0].X, line[0].Y, line[0].Z], [line[1].X, line[1].Y, line[0].Z])
userVector = rs.VectorUnitize(rs.VectorCreate((line[1].X, line[1].Y, line[0].Z), (line[0].X, line[0].Y, line[0].Z)))
rs.ObjectName(userCurve, "xAbJgNV6^bz6azN&amp;6E$Q^WeX$Dd^vygCz5z7Hmynb5")

# The script that will be using the dialog.
def RequestStairGen(): # This will call the eto form and assign it as a daughter window of rhino
    dialog = StairGenDialog(); # sets the ETO form to dialog variable
    rc = dialog.ShowModal(Rhino.UI.RhinoEtoApp.MainWindow) # Launches UI as modal daughter of rhino window


################################################################################

RequestStairGen()
)</script>
    </macro_item>
    <macro_item guid="6beb1246-fc82-4dfc-bb54-1188098f1029" bitmap_id="0c6dcc76-9701-40e5-a9cb-b791cf15160c">
      <text>
        <locale_1033>Macro 22</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Grade Curve</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Grade Curve</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#GRADE CURVE 

import rhinoscriptsyntax as rs

def scale():
    system = rs.UnitSystem()
    if system == 2 or system == 3 or system == 4:
        scaleFactorDict = {2:1, 3:100, 4:1000}
        scaleFactor = scaleFactorDict[system]
        return scaleFactor

    if system != 2 or system != 3 or system != 4:
        return None


def main():
    #If system is not metric, bail.
    if scale() == None:
        rs.MessageBox("This tool can only be used in mm, cm or m model units")
        return None
    
    #Set Variables
    crv = rs.GetObject(message="Get object to grade", filter=4, preselect=True, select=False, custom_filter=None, subobjects=False)
    if not crv: return
    grade = rs.GetReal(message="Enter grade number", number=20, minimum=0.001, maximum=None)
    if not grade: return
    
    rs.EnableRedraw(False)
    
    #FIND LENGTH OF CURVE AT EACH GRIP POINT
    rs.EnableObjectGrips(crv)
    ctrlPts = rs.ObjectGripLocations(crv)
    crvLengths = []
    startParam = rs.CurveClosestPoint(crv, ctrlPts[0])
    
    for i in ctrlPts:
        paramNum = rs.CurveClosestPoint(crv, i)
        CL = (rs.CurveLength(crv, sub_domain=[startParam ,paramNum]))
        crvLengths.append(CL)
    
    #FIND GRADED Z HEIGHT OF GRIP POINT
    gripHeights = []
    for i in crvLengths:
        rise = i / grade
        gripHeights.append(rise)
    
    #EDIT GRIP POINTS WITH NEW Z VALUE
    newGrips = []
    gripIndex = 0
    for i in ctrlPts:
        newPt = (i.X,i.Y,(i.Z+gripHeights[gripIndex]))
        newGrips.append(newPt)
        gripIndex = gripIndex + 1
    
    #MODIFY CURVE TO ENTERED GRADE
    rs.CopyObject(crv)
    grips = rs.ObjectGripLocations(crv, newGrips)
    rs.EnableObjectGrips(crv, enable=False)
    
    rs.EnableRedraw(True)

#Run Script
main()

)</script>
    </macro_item>
    <macro_item guid="c4df9c08-dfb5-4ff9-a629-7d6192f2ec4f" bitmap_id="6783bd35-8013-48ef-b051-efcca66e123d">
      <text>
        <locale_1033>Macro 23</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Scatter Blocks</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Scatter Blocks</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2022&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#SCATTER BLOCKS

import rhinoscriptsyntax as rs
import random
import math
import Rhino
import scriptcontext as sc

#r1 = vector 01 of triangle from origin (this will be randomised between 0,1)
#r2 = vector 02 of triangle from origin (this will be randomised between 0,1)
#a = origin corner of triangle (this should be picked as largest radius)
#b, c = other corners of triangle

def main():

    ################################################################################
    #                             GET OBJECTS AND VARIABLE                         #
    ################################################################################

    obj = rs.GetObject(message="Select surface to scatter on", filter=8|16|32, preselect=False, select=False, custom_filter=None, subobjects=False)
    if not obj:
        return
    blocks = rs.GetObjects(message="Select blocks to scatter", filter=4096, group=True, preselect=False, select=False, objects=None, minimum_count=1, maximum_count=0, custom_filter=None)
    if not blocks:
        return
    scatterNum = rs.GetInteger(message="Enter scatter amount", number=100, minimum=1, maximum=10000)
    if not scatterNum:
        return
    userScale = rs.GetReal("enter scale multiplyer (0 for no scaling)", number=0, minimum=None, maximum=None)

    userRotation = rs.GetBoolean("random rotation of blocks?", ("Rotation", "No", "Yes"), (True))
    if not userRotation:
        return

    isMesh = rs.IsMesh(obj)
    ptBucket = 0
    pointList = []
    blockList = []
    worldZVector = (rs.WorldXYPlane()).ZAxis

    rs.EnableRedraw(False)

    def MeshBrep(brep_id,params):
        brep=rs.coercebrep(brep_id)
        if brep:
            mesh=Rhino.Geometry.Mesh()
            mesh_parts=Rhino.Geometry.Mesh.CreateFromBrep(brep,params)
            for mesh_part in mesh_parts: mesh.Append(mesh_part)
            mesh.Compact()
            return mesh
    
    def TestMeshBrep():
        mesh_params=Rhino.Geometry.MeshingParameters.Coarse
        mesh_brep=MeshBrep(obj,mesh_params)
        if mesh_brep:
            mesh = sc.doc.Objects.AddMesh(mesh_brep)
        return mesh
    
    def chunks(lst, n): #list split generator
        for i in xrange(0, len(lst), n):
            yield lst[i:i + n]
    
    if isMesh == False:
        mesh = TestMeshBrep()
    else:
        mesh = obj
    
    #Get and format vertex points in mesh, format from point3d object to float list
    meshVerts = rs.MeshFaces(mesh, face_type=False)
    totalArea = rs.MeshArea(mesh)
    meshFaceCount = rs.MeshFaceCount(mesh)
    
    PT01 = meshVerts[0::3]
    PT01S = []
    for i in PT01:
        i = (i.X, i.Y, i.Z)
        PT01S.append(i)
    
    PT02 = meshVerts[1::3]
    PT02S = []
    for i in PT02:
        i = (i.X, i.Y, i.Z)
        PT02S.append(i)
    
    PT03 = meshVerts[2::3]
    PT03S = []
    for i in PT03:
        i = (i.X, i.Y, i.Z)
        PT03S.append(i)
    
    triangleList = zip(PT01S, PT02S, PT03S) #format list together in order to loop through
    
    ################################################################################
    #                             POINT SCATTER LOOP                               #
    ################################################################################
    
    #loop through the three vertexes forming individual triangles
    for i in triangleList:
        a = i[0] #triangle vert 1
        b = i[1] #triangle vert 2
        c = i[2] #triangle vert 3
    
    #Find area of triangle
        dist01 = rs.Distance(a,b)
        dist02 = rs.Distance(a,c)
        dist03 = rs.Distance(b,c)
        s = (dist01 + dist02 + dist03) / 2 #Herons formula to find area of triangle by sides
        tArea = math.sqrt(s*(s-dist01)*(s-dist02)*(s-dist03))
    
    #assign portion of points base on area of triangle, if assignment of points is lower then one, add that to the next assignment
        numPtsPerUnit = totalArea[1] / scatterNum
        ptAllocation = tArea / numPtsPerUnit
        ptBucket = ptBucket + ptAllocation
    
        if ptBucket &lt; 1:
            continue
        else:
            pointShare = int (math.floor(ptBucket))
            ptBucket = 0
    
    #Vectors from origin to either corner of triangle
        ac = rs.VectorCreate(c,a)
        ab = rs.VectorCreate(b,a)
        originVector = rs.VectorCreate(a,(0,0,0))
    
    #Generate random numbers between 0,1. Random scatter onto triangle
        for i in range(pointShare):
            r1 = random.random()
            r2 = random.random()
            if r1 + r2 &lt; 1:
                p = r1 * ac + r2 * ab
            else:
                p = (1 - r1) * ac + (1 - r2) * ab
                
            points = rs.AddPoint(p)
            pointList.append(points)
            rs.MoveObjects(points, originVector)
    
    ################################################################################
    #                 MOVE BLOCKS TO POINTS WITH ROTATION / SCALE                  #
    ################################################################################
    
    #shuffle point list then split list by the number of blocks to scatter. Copy blocks to split lists
    random.shuffle(pointList)
    ptDivision = int(len(pointList) / len(blocks))
    genList = chunks(pointList, ptDivision)
    blockIndex = 0
    
    for pts in genList: #looping through split point list and blocks and copying blocks to scatter
        blockPt = rs.BlockInstanceInsertPoint(blocks[blockIndex])
        for pt in pts:
            vector = rs.VectorCreate(pt, blockPt)
            newBlock = rs.CopyObject(blocks[blockIndex], vector)
            blockList.append(newBlock) #create list of blocks for later modification
        if blockIndex &lt; (len(blocks) - 1):
            blockIndex += 1
    
    #apply random scaling and rotation to blocks
    if userRotation[0] == True:
        for block in blockList:
            centerPt = rs.BlockInstanceInsertPoint(block)
            angle = random.randint(0,360)
            rs.RotateObject(block, centerPt, angle, worldZVector)
    
    for block in blockList:
        centerPt= rs.BlockInstanceInsertPoint(block)
        scale = random.uniform((userScale/4), userScale)
        rs.ScaleObject(block, centerPt, (scale, scale, scale))
        
    #If a mesh was created, delete it, general cleanup
    if isMesh == False:
        rs.DeleteObject(mesh)
    rs.DeleteObjects(pointList)

main()

rs.EnableRedraw(True)


)</script>
    </macro_item>
    <macro_item guid="262cf1b5-9f4d-4363-8b21-c33e11c83f7b" bitmap_id="aa0767ee-0339-4044-a975-18e7177d0ab9">
      <text>
        <locale_1033>Macro 24</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Tree Soil Volume Requirements</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Tree Soil Volume Requirements</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

import rhinoscriptsyntax as rs
import math
import random

'''

Copyright &lt;2022&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Calculate Soil requirements

def main():
    litre = rs.GetReal("Enter the root ball litres, max 2000 Litres", 400)
    soilDepth = rs.GetReal('Enter the soil depth available in m', 0.8)
    matureHeight = rs.GetReal('Enter the mature tree height in m', 5)
    dbh = rs.GetReal('Enter the DBH at maturity in m, if unknown hit Enter', 0)
    userPt = rs.GetPoint('Pick a point to place rootball')

    rs.EnableRedraw(False)

    # Dictionery for litre size to pot Rootball Diameter [0] / Rootball Height [1] / Calliper [2] / Height [3] / Spread [4]
    # Figures obtained from https://winterhill.com.au/tree-sizes/
    PotDict = { 
        25: [0.300, 0.250, 0.020, 1.000, 0.500],
        45: [0.420, 0.350, 0.025, 2.000, 1.000], 
        75: [0.465, 0.500, 0.035, 2.500, 2.000],
        100: [0.520, 0.560, 0.050, 3.500, 2.000],
        200: [0.700, 0.625, 0.070, 4.500, 3.000],
        400: [0.980, 0.715, 0.090, 6.000, 4.000],
        600: [1.200, 0.600, 0.100, 6.000, 5.000],
        800: [1.300, 0.600, 0.120, 7.000, 5.000],
        1000: [1.500, 0.600, 0.150, 8.000, 5.000],
        2000: [2.000, 0.800, 0.200, 9.000, 5.000],
        }

    def closest(lst, K):
        
        return lst[min(range(len(lst)), key = lambda i: abs(lst[i]-K))]

    def scale():
        system = rs.UnitSystem()
        if system == 2 or system == 3 or system == 4:
            scaleFactorDict = {2:1000, 3:100, 4:1}
            scaleFactor = scaleFactorDict[system]
            return scaleFactor

        if system != 2 or system != 3 or system != 4:
            return None

    s = scale()

    if s == None:
        rs.MessageBox("This tool is can only be used in mm, cm or m model units")
        return None

    # Calc for standard soil requirements as per Australian Standards

    if dbh == 0:
        dbh = ((matureHeight / 100) * 4) * 1000 #Gives a DBH in mm
    reqSoil = (matureHeight * dbh) / 100 # Gives a required soil volume in M3
    reqSoilRadius = math.sqrt(reqSoil / ((math.pi)*soilDepth))
    
    # Add soil puck to doc
    reqSoilRadiusCyl = rs.AddCylinder(userPt, (soilDepth*s), (reqSoilRadius*s), cap=True)
    rs.ObjectColor(reqSoilRadiusCyl, (150,75,0))

    # Calc for size of rootball as per standard pot sizes
    litreMatch = closest(list(PotDict.keys()), litre)
    dia = (PotDict[litreMatch])[0]
    height = (PotDict[litreMatch])[1]

    # Add Rootball to doc
    rootballCyl = rs.AddCylinder(userPt, (height*s), ((dia/2)*s))
    rs.ObjectColor(rootballCyl, (0,128,0))
    vec = (0,0, ((soilDepth*s) - (height*s)))
    rs.MoveObject(rootballCyl, vec)

    # Add Tree model based on Dict
    calliper = (PotDict[litreMatch])[2]
    treeHeight = (PotDict[litreMatch])[3]
    spread = (PotDict[litreMatch])[4]
    vec02 = (0,0, (((soilDepth*s) - (height*s))) + (height*s))
    
    treeTrunk = rs.AddCylinder(userPt, (treeHeight*s), (calliper*s))
    rs.ObjectColor(treeTrunk, (101,67,33))
    rs.MoveObject(treeTrunk, vec02)
    canopy = rs.AddSphere(userPt, ((spread/2)*s))
    rs.ObjectColor(canopy, (33,101,67))
    vec03 = (0,0, (((soilDepth*s) - (height*s))) + (height*s) + (treeHeight*s) - ((spread/2)*s))
    rs.MoveObject(canopy, vec03)

    # Various Text Annotation
    txt1 = rs.AddText('Rootball ' + 'Height = ' + str(height*s) + ', Diameter = ' + str(dia*s), userPt, 
                      height=(.1*s), font="Arial", font_style=0, justification=2)
    
    txt2 = rs.AddText('Soil Volume Requirement = ' + str(reqSoil) + ' m3', (userPt.X, (userPt.Y - (.2*s)), userPt.Z), 
                      height=(.1*s), font="Arial", font_style=0, justification=2)
    
    block = rs.AddBlock((reqSoilRadiusCyl, rootballCyl, treeTrunk, canopy, txt1, txt2), userPt, 
                ("Rootball and Soil " + (str(random.random()))), delete_input=True)
    rs.BlockDescription(block, 'Rootball ' + 'Height = ' + str(height*s) + ', Diameter = ' + str(dia*s)
                        + ', Soil Volume Requirement = ' + str(reqSoil) + ' m3')

    guid = rs.InsertBlock(block, userPt)
    rs.ObjectName(guid, 'Rootball ' + 'Height = ' + str(height*s) + ', Diameter = ' + str(dia*s)
                        + ', Soil Volume Requirement = ' + str(reqSoil) + ' m3')
    
    rs.EnableRedraw(True)
main()

)</script>
    </macro_item>
  </macros>
  <bitmaps>
    <small_bitmap item_width="16" item_height="16">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap_item guid="b54432f0-91ec-43b6-8b11-4a7654e19716" index="16" />
      <bitmap_item guid="d59a330a-0413-4632-9c5c-1d8f613a7bd0" index="17" />
      <bitmap_item guid="8fa94ce8-b572-453c-8fec-ae23f13cb9ad" index="18" />
      <bitmap_item guid="adf3520d-c901-4048-a55a-24d4466b0615" index="19" />
      <bitmap_item guid="61624676-c9c5-49bf-ad20-9aa2092d1576" index="20" />
      <bitmap_item guid="85a60542-9518-495a-80eb-1e3ee6470955" index="21" />
      <bitmap_item guid="6e502bab-241b-4e5b-ab6e-45895a855e3d" index="22" />
      <bitmap_item guid="e665d72d-4470-43f1-9a74-a7f1a96e66ba" index="23" />
      <bitmap_item guid="0c6dcc76-9701-40e5-a9cb-b791cf15160c" index="24" />
      <bitmap_item guid="6783bd35-8013-48ef-b051-efcca66e123d" index="25" />
      <bitmap_item guid="aa0767ee-0339-4044-a975-18e7177d0ab9" index="26" />
      <bitmap>iVBORw0KGgoAAAANSUhEUgAAABAAAAGwCAYAAACgmOU7AAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAOwgAADsIBFShKgAAAAhtJREFUeF7t0zFoE1EYwPGHqBRXBcFZ3FQcRMHNwV13F5UuuhW6CI3W
XmuG6tDGqBV1qFIFB6EWjlZrI2ixFjXpxZS4OZQMRcHGFsLl8767vOe1qaDg4PD/wUcu373vu3fv
vTMAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L9omt6DofFyDdP7qW68VQ291pzeaw1rJybTEQ3KRwWh
GE82C70Xmr6bOrZVlkiK+6ab2wYk7Lgqza0DbcWa0/t6HT1oel0TfbLeWPJ8qXyuytjEvNR2X3PF
el2Yei9f7r5yOZ1JXNw03gE7bdtgvFSRsadzsrxrUJZ3DkrX6BsJqlVZDCoS7sjGDbQmXpOo07Dt
ahvY6L5RkO7cjGRnA5f7fuJ+ahZezjSMV7aJ4rknMjRXdnHm0Vs5G0XP6wWXK51+7Bro7pi6yfyw
iXBLv2Qzvpya/BiHbWD/Zy/58Rg7Xrd4XQPbZGXPdfl2+LZ8PXZHLmefS1e+EMf4yYdunEbcIP0K
NhrRwtWPjsjq/nw8g86XRTk/U5IL0W9w/N6vcfoK6UW0sbZ3SFaip6/tG5bOB7MyFSy6RVzq9924
eBHT27hZFA/dEn++nGzjQkVqF5/FebeNyh6k38W7IyMy+aEstZ4Jl3MHSSVH+cqLdNHGaG6PjnLr
iLcdZZU0+ZOPSWe7oThN10QX568/ZwAAAAAAAAAAAAAAAAAAAAD4p4z5CbuGQM5JVCcAAAAAAElF
TkSuQmCC</bitmap>
    </small_bitmap>
    <normal_bitmap item_width="24" item_height="24">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap_item guid="b54432f0-91ec-43b6-8b11-4a7654e19716" index="16" />
      <bitmap_item guid="d59a330a-0413-4632-9c5c-1d8f613a7bd0" index="17" />
      <bitmap_item guid="8fa94ce8-b572-453c-8fec-ae23f13cb9ad" index="18" />
      <bitmap_item guid="adf3520d-c901-4048-a55a-24d4466b0615" index="19" />
      <bitmap_item guid="61624676-c9c5-49bf-ad20-9aa2092d1576" index="20" />
      <bitmap_item guid="85a60542-9518-495a-80eb-1e3ee6470955" index="21" />
      <bitmap_item guid="6e502bab-241b-4e5b-ab6e-45895a855e3d" index="22" />
      <bitmap_item guid="e665d72d-4470-43f1-9a74-a7f1a96e66ba" index="23" />
      <bitmap_item guid="0c6dcc76-9701-40e5-a9cb-b791cf15160c" index="24" />
      <bitmap_item guid="6783bd35-8013-48ef-b051-efcca66e123d" index="25" />
      <bitmap_item guid="aa0767ee-0339-4044-a975-18e7177d0ab9" index="26" />
      <bitmap>iVBORw0KGgoAAAANSUhEUgAAABgAAAKICAYAAABqjjqSAAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAOwgAADsIBFShKgAAABHhJREFUeF7t1HtMVnUcx3EeAUEQwRSZ4g2XoqigTDGGy8yJacLmJRBQ
wSjWnNqF1BQ1/6hp3jOnzi1DvCUCVs5sXhlumZcuy6aupv3h0i0tp+INgU/fHw+ia2G0/KO292t7
b4fn/M7vyzkPHB8AAAAAAAAAAAAA/21+1nhrRN1Pj9ngNgFBJW8MS1FWwqA7vj4+6+yznt5T/05n
f1/fVam9+lyueLlAKj6kqn3HtSt/oZ7p0vOCnZ9tta1b+Q+FWdOSunT/aWPaK6peVCQtL5ZWWjZE
R07pRtlBLcvIVWx4h5O2Ns1yj/Bveaz0Dq2fKF86aoJ+XbheWlUqLdkqLd4suUHvbpLet0FlFdLR
Mzq3oVgzh6bWBvr5fWbXDqvb5RFaBno8B/qHd9C2nPzammXb7bcukd7b4h1wv0VW0V7pxI+6tfcr
rZiQVxsd2ka+Pp5N9fs0qmVcUNjO1d0GKqN9x6qcuPjb5VMXSCt2Sss+fnAXWw9Ih7/VttcW30vv
m3D39d5xt/cNT1Nzj+/m+n0aFRwTFLrjy/4jdTEpo3ZNuwF3h7aKuvnqgFG3z89d7R20fIcqpi2t
yUpIujOmY7fKsrTse9pQovO5M2XXF3q3aZwNCCneHzdc1wdn1nUq5tnq+bbRyMge1z4cn3Xn7edS
q0ZHRl5bm5hSeWnJhhqV7pc+P6LT0+Y1aUBQ74CwnQdjk/X74Az9kviCriSl62rSBB2PSb7VLTC4
Mq9Tv+s/j8m5pzkrpXXbVVOwQtpYptMzFjRtQJ+AkJLDNuBq/QDXRavq6YnKCI/SydQp0kvzVZP9
lqonzlR1zmzpo106Pb2JA/oGhZQejrM7SHowwHXDHldaeFdVPD9JerFA1ZNs86x8VefOlQo/sQHz
mzbA/opKy/s1YcDkWXYHb3oHbN6tM018RMFxwa13H40fZV9wEwa4u8i2R7SsUOdyZ7kBW7zbNC4k
1M9/z6onE+q+3Gu2qXv+jQ2odZvnztPN7FlanzjCDVjr3ebRBjX3eIoywyPuHogdbkMydNmGVf5p
gKbYo7HKR2RqfOeoKx6P5wO7Ntq7xV/Lth5+14/u6t/iUH6nGP0wMFW1QyYrMyJKx1JypLyFOjs2
T5Oi42si7DVua5O8l9QZYuV6Dx8ItY5Z1y33797fctxbdWpsi7CzhdGJGhfeRXuS07TmqWT1atn6
hJ1Lt1q4hSbeKrKuWmesZlaDPtYlyz1H13TrYZ39fTyLApr53ugZ0vaCXTnHPmvlPdVghnX/+t+s
rlaDFOsba7Hl3u/u1etuM9x6mHsUMd7DBm6NW/up9bW11DpipVoNIqz7E3tY7gs7ZX1nfWGtsQqs
LMt9V/PqP9truTXfW6ut7pbT3or0HjaunTXWesfabrnfcH997nib5c6Ns9zaxyLQCvAeAgAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAACA/xcfnz8AiQ8wz9GfExIAAAAASUVORK5CYII=</bitmap>
    </normal_bitmap>
    <large_bitmap item_width="32" item_height="32">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap_item guid="b54432f0-91ec-43b6-8b11-4a7654e19716" index="16" />
      <bitmap_item guid="d59a330a-0413-4632-9c5c-1d8f613a7bd0" index="17" />
      <bitmap_item guid="8fa94ce8-b572-453c-8fec-ae23f13cb9ad" index="18" />
      <bitmap_item guid="adf3520d-c901-4048-a55a-24d4466b0615" index="19" />
      <bitmap_item guid="61624676-c9c5-49bf-ad20-9aa2092d1576" index="20" />
      <bitmap_item guid="85a60542-9518-495a-80eb-1e3ee6470955" index="21" />
      <bitmap_item guid="6e502bab-241b-4e5b-ab6e-45895a855e3d" index="22" />
      <bitmap_item guid="e665d72d-4470-43f1-9a74-a7f1a96e66ba" index="23" />
      <bitmap_item guid="0c6dcc76-9701-40e5-a9cb-b791cf15160c" index="24" />
      <bitmap_item guid="6783bd35-8013-48ef-b051-efcca66e123d" index="25" />
      <bitmap_item guid="aa0767ee-0339-4044-a975-18e7177d0ab9" index="26" />
      <bitmap>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
AAAASUVORK5CYII=</bitmap>
    </large_bitmap>
  </bitmaps>
  <scripts />
</RhinoUI>