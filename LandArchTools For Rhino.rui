<?xml version="1.0" encoding="utf-8"?>
<RhinoUI major_ver="3" minor_ver="0" guid="a4d58c21-5e5e-4e94-b081-20bd80b704be" localize="False" default_language_id="1033" dpi_scale="100">
  <extend_rhino_menus />
  <menus />
  <tool_bar_groups>
    <tool_bar_group guid="5b0392cd-e95c-4f28-9cce-aca9b4d62e41" dock_bar_guid32="00000000-0000-0000-0000-000000000000" dock_bar_guid64="00000000-0000-0000-0000-000000000000" active_tool_bar_group="6cb13220-199f-467e-9bc6-522da054ec5c" single_file="False" hide_single_tab="True" point_floating="721,410">
      <text>
        <locale_1033>LandArchTools</locale_1033>
      </text>
      <tool_bar_group_item guid="6cb13220-199f-467e-9bc6-522da054ec5c" major_version="1" minor_version="1">
        <text>
          <locale_1033>LandArchTools</locale_1033>
        </text>
        <tool_bar_id>c53d7c66-28c0-43f8-afc2-31434d9ba451</tool_bar_id>
      </tool_bar_group_item>
      <dock_bar_info dpi_scale="100" dock_bar="False" docking="True" horz="False" visible="True" floating="True" mru_float_style="8192" bar_id="59471" mru_width="868" point_pos="-2,-2" float_point="721,410" rect_mru_dock_pos="0,529,64,966" dock_location_u="59420" dock_location="left" float_size="462,62" />
    </tool_bar_group>
  </tool_bar_groups>
  <tool_bars>
    <tool_bar guid="c53d7c66-28c0-43f8-afc2-31434d9ba451" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="d8dc19cb-56d8-4f50-b015-76d6b2e6fb1f" bitmap_id="a4555076-3c23-4105-822d-959af488b924">
      <text>
        <locale_1033>LandArchTools</locale_1033>
      </text>
      <tool_bar_item guid="8c6c083f-7df1-4293-a2cb-a5cf63943a23">
        <left_macro_id>f16bc74d-7478-4706-ac78-bdd1eaeb194c</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="cf8de7f7-87c1-42f5-b53b-db002e314038">
        <left_macro_id>874f59b6-eb09-4115-ba9f-aaaeedb83273</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9ee3ade2-91f9-4629-936e-8eae3302bdc0">
        <left_macro_id>0f0ad7e9-4b64-409b-9212-84d02357793c</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="acc4a330-4220-43df-bd16-be8acbb9708b">
        <left_macro_id>fc1ace5c-9954-41d2-83d3-b6e9efd2ac57</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="32a22072-de40-4a9d-8681-34ef005b15e9">
        <left_macro_id>66ae6395-734c-411f-8fca-e0dcbc652029</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="0713c6d7-3a9a-4d5a-a439-0975b1c6861f">
        <left_macro_id>d3b91dd1-e85c-4c08-ae78-5256730fe6da</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="6b17fbca-0d63-438e-a09d-90b111910d37">
        <left_macro_id>ef15b788-1ff3-48dd-887e-f5a939ba12a5</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="394d01ed-ca79-4810-a15c-84042c0e4a56">
        <left_macro_id>f5a0efcd-fc6f-46ba-90a5-204ce4df00fa</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="73119225-40b5-40d8-b32a-8cd222ae56ae">
        <left_macro_id>e554a8c3-a559-49cd-b5be-19814522dd9a</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="1d33c126-c464-4fdf-9d79-f7e14ceb59df">
        <left_macro_id>d072c884-e3ac-4bcf-909e-43b427795cf6</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="c5d67a65-1caa-4d30-ad14-acadc54d872d">
        <left_macro_id>e0ebefdd-02f4-48c3-803d-a5d6705087cf</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="63555532-1f47-4011-a5d0-f512c79c5401">
        <left_macro_id>92e0667f-4ec1-4dc7-8cbc-c9221e722cc7</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="4d21fb00-5065-4c48-a442-25839f699742">
        <left_macro_id>e71efc2d-1abd-4193-9097-de3a60f6f905</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="5b7f3713-c1a4-4654-be95-0e31eb7858cd">
        <left_macro_id>c3c5328b-a696-4374-8b2d-17cb589e0d5a</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="6ced6475-8ab0-43e5-afeb-f63e0f57d9f2">
        <left_macro_id>0a048bc6-627d-4c9a-b3ba-730e2a63b2f4</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="7547a5be-ce58-4e19-af64-eaffe3e4b045">
        <left_macro_id>821af65d-4167-4d65-90e4-132741c90eb8</left_macro_id>
      </tool_bar_item>
    </tool_bar>
  </tool_bars>
  <macros>
    <macro_item guid="f16bc74d-7478-4706-ac78-bdd1eaeb194c" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="5bb60bb6-b5e1-4cf6-b207-2aa05bd6bf0f" bitmap_id="9224816e-7f13-470e-a2ed-40ffd9c160a0">
      <text>
        <locale_1033>Macro 00</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Calculate grade between two points</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Calculate grade between two points</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Calculate grade between two given points
#By Thomas Chapman on 11/01/2021

import rhinoscriptsyntax as rs
import math as m

# Get points from user
pt1 = rs.GetPoint('Pick the first point')
pt2 = rs.GetPoint('Pick the second point')


if pt2:
    hypotenuse = rs.Distance(pt1, pt2)

    rs.EnableRedraw(False)


    # Find the rise of given points in any order
    if pt1.Z &gt; pt2.Z:
        rise = pt1.Z - pt2.Z
    elif pt1.Z &lt; pt2.Z:
        rise = pt2.Z - pt1.Z

    # Find the run of given points
    run = m.sqrt(hypotenuse**2 - rise**2)

    # Detect model units and scale to mm, if mm do nothing
    if rs.UnitSystem == 3:
        rise = rise*100
    if rs.UnitSystem == 4:
        rise = rise*1000

    # Calculate grade based on rise and run
    try:
        grade = run / rise

    except ZeroDivisionError:
        print('No Grade Found')
        exit()

    # Print text dot to screen
    curve = rs.AddCurve([pt1,pt2])
    midpoint = rs.CurveMidPoint(curve)
    rs.DeleteObject(curve)
    rs.AddTextDot('1:' + str(abs(round(grade,2))),midpoint)

    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="874f59b6-eb09-4115-ba9f-aaaeedb83273" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="ba483181-ff75-4d51-9bba-974118b80da5" bitmap_id="8e8e04c1-da6e-4108-aa58-63e21780c072">
      <text>
        <locale_1033>Macro 02</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Display the RL of a given point</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Display the RL of a given point</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''


# Show RL of specified point and copy to clipboard
# By Thomas Chapman on 01/10/2021

import rhinoscriptsyntax as rs
import os

point = rs.GetPoint('Select point')

if point:
    pointZ = point.Z

    if rs.UnitSystem() == 3: #if doc is in CM
        pointZ = pointZ *0.01
    if rs.UnitSystem() == 2:#if doc is in MM
         pointZ = pointZ *0.001

    rs.AddTextDot('+RL ' + str(round(pointZ,3)),point)

    #Copy RL to Clipboard

    RL = str(round(pointZ,3))

    rs.ClipboardText(RL)


)</script>
    </macro_item>
    <macro_item guid="0f0ad7e9-4b64-409b-9212-84d02357793c" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="812b1c36-0e85-4b6c-9982-e2b575bf9c7b" bitmap_id="cee78647-d0a3-4c62-9441-090347bfca16">
      <text>
        <locale_1033>Macro 14</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Calculate Height difference between two points</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Calculate Height difference between two points</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

pt01 = rs.GetPoint('Select first point to measure from')
pt02 = rs.GetPoint('Select second point to measure to')

if pt02:

    pt01Z = pt01.Z
    pt02Z = pt02.Z

    height = abs(pt01Z-pt02Z)
    height = round(height, 3)

    rs.ClipboardText(height)

    rs.MessageBox(height, buttons=0, title="Height difference - Value copied to clipboard")
)</script>
    </macro_item>
    <macro_item guid="fc1ace5c-9954-41d2-83d3-b6e9efd2ac57" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="4211923b-f22f-4ab1-8745-e05f836d0bf8" bitmap_id="e3e95335-fd99-453e-9054-a8d0f30a7e27">
      <text>
        <locale_1033>Macro 03</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

# MOVE OBJECT TO SPECIFIED RL
# BY THOMAS CHAPMAN ON 01/10/2021

import rhinoscriptsyntax as rs
import Rhino.Geometry as geo

obj = rs.GetObjects('Select objects',preselect=True)

if obj:
    current = rs.GetPoint('Select point')
    
    if current: 
        rl = rs.GetString('RL to move to?')
        rl = float(rl)
        
        if rs.UnitSystem() == 3: #if model is in cm scale by 100
            rl = rl*100
        elif rs.UnitSystem() == 2: #if model is in mm scale by 1000
            rl = rl*1000
        
        if rl == 0.000: #move objects to the 0 coord
            target3 = current.Z
            if target3:
                target3 = target3 *-1
                target4 = geo.Point3d(0,0,target3)
                rs.MoveObject(obj, target4)

        elif rl &gt; 0.000:
            target = rl - current.Z #+ or - number to target location
            target2 = geo.Point3d(0,0,target) #translated vector needed to hit target
            rs.MoveObject(obj, target2)
)</script>
    </macro_item>
    <macro_item guid="66ae6395-734c-411f-8fca-e0dcbc652029" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="ef338e36-b652-464e-9f92-9d8c746720f3" bitmap_id="6a3b1ed8-afac-43fe-862f-33c1a0935beb">
      <text>
        <locale_1033>Macro 01</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#RANDOM ROTATE BLOCK INSTANCES AROUND INSERTION POINT
#BY THOMAS CHAPMAN ON 01/09/2021

import rhinoscriptsyntax as rs
import random as r

vec = rs.VectorCreate([0,0,1],[0,0,0])
obj = rs.GetObjects('pick Blocks to rotate randomly', filter=4096, preselect=True)

if obj:
    rs.EnableRedraw(False)

    for object in obj:
        num = r.randrange(-180,180)
        point = rs.BlockInstanceInsertPoint(object)
        rs.RotateObject(object, point, num, vec)

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="d3b91dd1-e85c-4c08-ae78-5256730fe6da" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="5a023420-191b-433d-9347-d6221ccc57d3" bitmap_id="a6e8e257-a4e6-4180-babd-a00029a6f952">
      <text>
        <locale_1033>Macro 12</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Random Drop Block</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Random Drop Block</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs
import random as r


obj = rs.GetObjects('Pick blocks to drop randomly', filter=4096, preselect=True)
dropnum = rs.GetReal("Enter max drop distance")

if obj:
    rs.EnableRedraw(False)

    for object in obj:
        num = r.uniform((-abs(dropnum)),0)
        print num
        vec = rs.VectorCreate([0,0,num],[0,0,0])
        point = rs.BlockInstanceInsertPoint(object)
        rs.MoveObject(object,vec)

    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="ef15b788-1ff3-48dd-887e-f5a939ba12a5" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="d1ca3149-4600-4d59-891a-116db286a114" bitmap_id="d3886fff-3cdb-45f3-b09a-ec17b6f8404e">
      <text>
        <locale_1033>Macro 04</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Drop objects to surface

#By Thomas Chapman on 17/01/2021
#24/04/2021 revision to capture most error messages

import rhinoscriptsyntax as rs
import itertools

def main():

    # prompt user for obj and surface
    obj = rs.GetObjects('Pick objects',preselect=True,filter=(8+16+32+4096+1073741824))
    surface = rs.GetObjects('Pick Surface/Mesh')
    
    #Check selects are valid
    
    if obj == None:
        return
    if surface == None:
        return
    
    
    meshCheck = rs.IsMesh(surface[0])
    indexnum = []
    surfacetypes = []
    
    
    
    #Check if mixed surface types
    for thing in surface:
        result = rs.IsMesh(thing)
        surfacetypes.append(str(result))
    
    if ('True' in surfacetypes) and ('False' in surfacetypes):
        print ('Please select only one surface type')
        return
    
    
    
    #Turn off redraw to speed up script
    rs.EnableRedraw(False)
    
    # Generate bounding box around obj and find distance between obj and surface
    for objects in obj:
        ptlist = []
    
        # Get bounding box and make a square on lower half and find centroid
        bounds = rs.BoundingBox(objects)
        pl = rs.AddPolyline((bounds[0:4]+[bounds[0]]))
        centroid = rs.CurveAreaCentroid(pl)
    
        # Add three points at the centroid and move them in both z direction
        pt00 = rs.AddPoint(centroid[0])
        pt000 = rs.AddPoint(centroid[0])
        lowpoint = rs.AddPoint(centroid[0])
        pt01 = rs.MoveObject(pt00, (0,0,100000))
        pt02 = rs.MoveObject(pt000, (0,0,-100000))
    
        #Check if Mesh else use nurb instersect
        if meshCheck is True:
            curve = rs.AddCurve((pt01, pt02))
            for plane in surface:
                intersection = rs.CurveMeshIntersection(curve, plane)
                if intersection is None:
                    continue
                ptlist.append(list(filter(None,intersection)))
            merged = list(itertools.chain(*ptlist))
            merged = list(itertools.chain(*merged))
    
        # Create curve to intersect with surface to find distance from obj
        elif meshCheck is False:
            curve = rs.AddCurve((pt01, pt02))
            for plane in surface:
                intersection = rs.CurveBrepIntersect(curve, plane)
                if intersection is None:
                    continue
                ptlist.append(list(filter(None,intersection)))
            merged = list(itertools.chain(*ptlist))
            merged = list(itertools.chain(*merged))
    
        if merged is not None and merged != []:
            # Find the highest Z value and use that to target
            sorted = rs.SortPoints((rs.coerce3dpointlist(merged)), ascending=False, order=4)
            inter = (sorted[0])
            dist = rs.Distance(lowpoint, inter)
    
            # Convert Guid to point list
            intCon = rs.coerce3dpoint(inter)
            lowCon = rs.coerce3dpoint(lowpoint)
    
            # Find if obj is below or above surface and change dist to + or - accordingly
            if lowCon[2] &lt; intCon[2]:
                distCon = abs(dist)
            if lowCon[2] &gt; intCon[2]:
                distCon = (dist)*-1
            elif lowCon[2] == intCon[2]:
                rs.DeleteObjects([curve, pt01, pt02, pl, lowpoint]+merged)
                continue
    
            # Move obj to intersection
            rs.MoveObject(objects, (0,0,distCon))
    
            #deleate construction geo
            try:
               rs.DeleteObjects([curve, pt01, pt02, pl, lowpoint]+merged)
            except:
                continue
    
    
    
            #Clear list values for second run through loop
            del intersection
            del merged
            del ptlist
    
    
    
    #delete any polysurfaces created
    if isinstance(indexnum, int):
        rs.DeleteObjects(surface[indexnum])
    
    # Enable redraw to show results
    rs.EnableRedraw(True)


main()
)</script>
    </macro_item>
    <macro_item guid="f5a0efcd-fc6f-46ba-90a5-204ce4df00fa" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="161b2a13-4700-4945-9dae-25c70928152b" bitmap_id="00968297-8273-4260-92dc-542efb12bfce">
      <text>
        <locale_1033>Macro</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Model Standard Australian DDA Ramps

import rhinoscriptsyntax as rs
import math as m


if rs.UnitSystem() == 4: #if doc is in M
    Mult = 1
if rs.UnitSystem() == 3: #if doc is in CM
    Mult = 100
if rs.UnitSystem() == 2:#if doc is in MM
    Mult = 1000



pt00 = rs.GetPoint('Pick insertion point')

if pt00:


    pt01 = rs.CreatePoint(pt00.X,pt00.Y)
    RampOptions = 'Step Ramp', 'Kerb Ramp', 'Ramp', 'Walkway'
    RampType = rs.PopupMenu(RampOptions)

    rs.EnableRedraw(False)


    if RampType == -1:
        exit()

    if RampType == 0: #Step Ramp
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.9*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)

    if RampType == 1: #Kerb Ramp
    #main ramp portion
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.52*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)

    if RampType == 2: #Ramp
        Grade = '1:19','1:18','1:17','1:16','1:15','1:14'
        Index = rs.PopupMenu(Grade)
        GradeNum = [19,18,17,16,15,14]
        if Index == 5:
            Rise = 9/(GradeNum[Index])
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+9*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)
        elif Index != 5:
            Rise = 15/(GradeNum[Index])
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)

    if RampType == 3: #Walkway
        Grade = '1:33','1:32','1:31','1:30','1:29','1:28','1:27','1:26','1:25','1:24','1:23','1:22','1:21','1:20'
        Index = rs.PopupMenu(Grade)
        GradeNum = [33,32,31,30,29,28,27,26,25,24,23,22,21,20]
        if Index == 0:
            Rise = 25/(GradeNum[Index])
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+25*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)
        if Index == 13:
            Rise = 15/(GradeNum[Index])
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)
        elif Index != 0 or Index != 13:
            Interp = m.floor((( GradeNum[Index] - 20)*(25 - 15)/(33 - 20))+15) #Linear interpolation of landing distance - DDA requirement...Srsly?
            Rise = Interp/(GradeNum[Index])
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+Interp*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)

    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="e554a8c3-a559-49cd-b5be-19814522dd9a" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="4055eaa6-4427-427c-b6a5-e6cdbac914c2" bitmap_id="6b1ad70a-21fd-40c1-a6b5-ca825b4516df">
      <text>
        <locale_1033>Macro 05</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Patch Multiple Individual closed polylines
#By Thomas Chapman 04/22/2021

import rhinoscriptsyntax as rs

geo = rs.GetObjects('Select Closed Polylines',preselect=True)

if geo:
    
    uv1 = rs.GetInteger('enter number of UV divisions',number=1,minimum=1)

    rs.EnableRedraw(False)
    for objects in geo:
        rs.AddPatch((objects),(uv1,uv1))
    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="d072c884-e3ac-4bcf-909e-43b427795cf6" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="652506ee-7343-475c-a018-6ed9c0a76b29" bitmap_id="0e0e234e-b156-40f5-bc71-a94de72cf816">
      <text>
        <locale_1033>Macro 06</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Isolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Isolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

# Get object and find layer it is on
obj = rs.GetObjects('select an object on the layer to isolate',preselect=True)

if obj:


    rs.EnableRedraw(False)

    # Create list of selected obj layers
    selectedlayers = []
    for i in obj:
        layer = rs.ObjectLayer(i)
        selectedlayers.append(layer)

    # Select all objects on each layer

    for i in selectedlayers:
        rs.ObjectsByLayer(i,True)
    isolate = rs.SelectedObjects()

    allObjects = rs.AllObjects()

    for i in isolate:
        allObjects.remove(i)

    # Hide selected objects

    rs.HideObjects(allObjects)

    rs.UnselectAllObjects()

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="e0ebefdd-02f4-48c3-803d-a5d6705087cf" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="87791b70-7cac-4efc-a5c4-deece16831aa" bitmap_id="dd00a565-45b7-4ffb-8943-0b144db15e07">
      <text>
        <locale_1033>Macro 07</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Unisolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Unisolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Unisolate All objects
#By Thomas Chapman 21/05/01

import rhinoscriptsyntax as rs

obj = rs.HiddenObjects()

if obj:

    rs.ShowObjects(obj)
)</script>
    </macro_item>
    <macro_item guid="92e0667f-4ec1-4dc7-8cbc-c9221e722cc7" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="96e93532-81ce-4156-b7f7-b7ff1364c489" bitmap_id="e261b162-8566-47ba-91cb-8f3881834f5c">
      <text>
        <locale_1033>Macro 08</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Turn Selected Object Layers Off</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Turn Selected Object Layers Off</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

obj = rs.GetObjects("select obj Layers to turn off")

if obj:

    rs.EnableRedraw(False)

    for i in obj:
        layer = rs.ObjectLayer(i)
        rs.LayerVisible(layer, visible=False)

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="e71efc2d-1abd-4193-9097-de3a60f6f905" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="d16957a9-f662-446d-9801-c0533fb38255" bitmap_id="b220f50b-9396-4bf1-88be-a8fb69ce65f5">
      <text>
        <locale_1033>Macro 09</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Plan View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Plan View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _T")

)</script>
    </macro_item>
    <macro_item guid="c3c5328b-a696-4374-8b2d-17cb589e0d5a" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="c047d19d-b398-41b0-9fd8-74fe11b70e04" bitmap_id="9141880f-3623-4262-9345-9d3c137c52f7">
      <text>
        <locale_1033>Macro 10</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Perspective View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Perspective View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _p")

)
</script>
    </macro_item>
    <macro_item guid="0a048bc6-627d-4c9a-b3ba-730e2a63b2f4" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="cfb1aa22-1db1-4869-b63d-8a0474245511" bitmap_id="85064144-1e81-4b39-9c85-88b72d987c86">
      <text>
        <locale_1033>Macro 11</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import glob
import struct
import imghdr
import rhinoscriptsyntax as rs

#Check document units
units = rs.UnitSystem()

if units == 2: #mm
    scale = 1000
if units == 3: #cm
    scale = 100
if units == 4: #m
    scale = 1

def get_image_size(fname):
    '''Determine the image type of fhandle and return its size.
    from draco'''
    with open(fname, 'rb') as fhandle:
        head = fhandle.read(24)
        if len(head) != 24:
            return
        if imghdr.what(fname) == 'png':
            check = struct.unpack('&gt;i', head[4:8])[0]
            if check != 0x0d0a1a0a:
                return
            width, height = struct.unpack('&gt;ii', head[16:24])
        elif imghdr.what(fname) == 'gif':
            width, height = struct.unpack('&lt;HH', head[6:10])
        elif imghdr.what(fname) == 'jpeg':
            try:
                fhandle.seek(0) # Read 0xff next
                size = 2
                ftype = 0
                while not 0xc0 &lt;= ftype &lt;= 0xcf:
                    fhandle.seek(size, 1)
                    byte = fhandle.read(1)
                    while ord(byte) == 0xff:
                        byte = fhandle.read(1)
                    ftype = ord(byte)
                    size = struct.unpack('&gt;H', fhandle.read(2))[0] - 2
                # We are at a SOFn block
                fhandle.seek(1, 1)  # Skip `precision' byte.
                height, width = struct.unpack('&gt;HH', fhandle.read(4))
            except Exception: #IGNORE:W0703
                return
        else:
            return
        return width, height



#Find and open jgw file, extract scalefactor and x and y coordinates

jgw = rs.OpenFileName(title= 'Select .JGW file',filter="JGW Files (*.JGW)|*.JGW||" )

with open(jgw,'rt') as f:
    numslist = f.read().splitlines()

scaleFactor01 = numslist[0]

worldx = float(numslist[4])*int(scale)
worldy = float(numslist[5])*int(scale)

#Find and open jpg file, extract pixel size

jpg = rs.OpenFileName(title= 'Select .JPG image File',filter="JPG Files (*.JPG)|*.JPG||")

size = get_image_size(jpg)

scaleFactor02 = (float(size[0])*int(scale))
scaleFactor03 = (float(size[1])*int(scale))

# Calculate scale factor

scaleFactorWidth = (float(scaleFactor01))*(float(scaleFactor02))
scaleFactorHeight = (float(scaleFactor01))*(float(scaleFactor03))

origin = (float(worldx), (float(worldy) - float(scaleFactorHeight)), 0)

picturePlane = rs.PlaneFromFrame(origin,(1,0,0),(0,1,0))

rs.AddPictureFrame(picturePlane,jpg,width=(float(scaleFactorWidth)), height=(float(scaleFactorHeight)))

)</script>
    </macro_item>
    <macro_item guid="821af65d-4167-4d65-90e4-132741c90eb8" ImportedFromFileGuid="0804c739-59c2-4cd7-86d9-ddaf63e97340" ImportedFromItemGuid="63812035-1fa4-4e2a-8e3c-41fae14a9a2c" bitmap_id="18ff4a5b-d913-4087-8dd2-d86217e64b7f">
      <text>
        <locale_1033>Macro 13</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Create Standard Layers</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Create Standard Layers</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Create Standard Layers

import rhinoscriptsyntax as rs
import random as r

#Add Layers to document

rs.EnableRedraw(False)

layerList = [
"L_BLDS", 
"L_BNDY_WRKS", 
"L_EDGE",
"L_HARD_ROCK",
"L_HARD_WALL",
"L_HARD_STEP",
"L_HARD_RAMP",
"L_HARD_FNCE",
"L_HARD_PAV1",
"L_HARD_PAV2",
"L_HARD_PAV3",
"L_HARD_PAV4",
"L_LGHT",
"L_ENTO",
"L_PLAY_EQUI",
"L_PLNT",
"L_STRU",
"L_TEXT",
"L_TREE_PROP",
"L_TREE_RETN",
"L_WALL",
"_L_WORKING",
"L_SOFT_GRDN",
"L_SOFT_MLCH",
"L_SOFT_LAWN",
"L_SOFT_PLANT",
"L_FURN",
"_L_OFF"


]



layerList.sort()

parentLayer = rs.AddLayer(name="LANDSCAPE", color=None, visible=True, locked=False, parent=None)

for layer in layerList:
    rs.AddLayer(layer,(r.randrange(255),r.randrange(255),r.randrange(255)),visible=True, locked=False, parent= parentLayer)

rs.EnableRedraw(True)
)</script>
    </macro_item>
  </macros>
  <bitmaps>
    <small_bitmap item_width="16" item_height="16">
      <bitmap_item guid="9224816e-7f13-470e-a2ed-40ffd9c160a0" index="0" />
      <bitmap_item guid="8e8e04c1-da6e-4108-aa58-63e21780c072" index="1" />
      <bitmap_item guid="cee78647-d0a3-4c62-9441-090347bfca16" index="2" />
      <bitmap_item guid="e3e95335-fd99-453e-9054-a8d0f30a7e27" index="3" />
      <bitmap_item guid="6a3b1ed8-afac-43fe-862f-33c1a0935beb" index="4" />
      <bitmap_item guid="a6e8e257-a4e6-4180-babd-a00029a6f952" index="5" />
      <bitmap_item guid="d3886fff-3cdb-45f3-b09a-ec17b6f8404e" index="6" />
      <bitmap_item guid="00968297-8273-4260-92dc-542efb12bfce" index="7" />
      <bitmap_item guid="6b1ad70a-21fd-40c1-a6b5-ca825b4516df" index="8" />
      <bitmap_item guid="0e0e234e-b156-40f5-bc71-a94de72cf816" index="9" />
      <bitmap_item guid="dd00a565-45b7-4ffb-8943-0b144db15e07" index="10" />
      <bitmap_item guid="e261b162-8566-47ba-91cb-8f3881834f5c" index="11" />
      <bitmap_item guid="b220f50b-9396-4bf1-88be-a8fb69ce65f5" index="12" />
      <bitmap_item guid="9141880f-3623-4262-9345-9d3c137c52f7" index="13" />
      <bitmap_item guid="85064144-1e81-4b39-9c85-88b72d987c86" index="14" />
      <bitmap_item guid="18ff4a5b-d913-4087-8dd2-d86217e64b7f" index="15" />
      <bitmap_item guid="a4555076-3c23-4105-822d-959af488b924" index="16" />
      <bitmap>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
AAAAAElFTkSuQmCC</bitmap>
    </small_bitmap>
    <normal_bitmap item_width="24" item_height="24">
      <bitmap_item guid="9224816e-7f13-470e-a2ed-40ffd9c160a0" index="0" />
      <bitmap_item guid="8e8e04c1-da6e-4108-aa58-63e21780c072" index="1" />
      <bitmap_item guid="cee78647-d0a3-4c62-9441-090347bfca16" index="2" />
      <bitmap_item guid="e3e95335-fd99-453e-9054-a8d0f30a7e27" index="3" />
      <bitmap_item guid="6a3b1ed8-afac-43fe-862f-33c1a0935beb" index="4" />
      <bitmap_item guid="a6e8e257-a4e6-4180-babd-a00029a6f952" index="5" />
      <bitmap_item guid="d3886fff-3cdb-45f3-b09a-ec17b6f8404e" index="6" />
      <bitmap_item guid="00968297-8273-4260-92dc-542efb12bfce" index="7" />
      <bitmap_item guid="6b1ad70a-21fd-40c1-a6b5-ca825b4516df" index="8" />
      <bitmap_item guid="0e0e234e-b156-40f5-bc71-a94de72cf816" index="9" />
      <bitmap_item guid="dd00a565-45b7-4ffb-8943-0b144db15e07" index="10" />
      <bitmap_item guid="e261b162-8566-47ba-91cb-8f3881834f5c" index="11" />
      <bitmap_item guid="b220f50b-9396-4bf1-88be-a8fb69ce65f5" index="12" />
      <bitmap_item guid="9141880f-3623-4262-9345-9d3c137c52f7" index="13" />
      <bitmap_item guid="85064144-1e81-4b39-9c85-88b72d987c86" index="14" />
      <bitmap_item guid="18ff4a5b-d913-4087-8dd2-d86217e64b7f" index="15" />
      <bitmap_item guid="a4555076-3c23-4105-822d-959af488b924" index="16" />
      <bitmap>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
AAAASUVORK5CYII=</bitmap>
    </normal_bitmap>
    <large_bitmap item_width="32" item_height="32">
      <bitmap_item guid="9224816e-7f13-470e-a2ed-40ffd9c160a0" index="0" />
      <bitmap_item guid="8e8e04c1-da6e-4108-aa58-63e21780c072" index="1" />
      <bitmap_item guid="cee78647-d0a3-4c62-9441-090347bfca16" index="2" />
      <bitmap_item guid="e3e95335-fd99-453e-9054-a8d0f30a7e27" index="3" />
      <bitmap_item guid="6a3b1ed8-afac-43fe-862f-33c1a0935beb" index="4" />
      <bitmap_item guid="a6e8e257-a4e6-4180-babd-a00029a6f952" index="5" />
      <bitmap_item guid="d3886fff-3cdb-45f3-b09a-ec17b6f8404e" index="6" />
      <bitmap_item guid="00968297-8273-4260-92dc-542efb12bfce" index="7" />
      <bitmap_item guid="6b1ad70a-21fd-40c1-a6b5-ca825b4516df" index="8" />
      <bitmap_item guid="0e0e234e-b156-40f5-bc71-a94de72cf816" index="9" />
      <bitmap_item guid="dd00a565-45b7-4ffb-8943-0b144db15e07" index="10" />
      <bitmap_item guid="e261b162-8566-47ba-91cb-8f3881834f5c" index="11" />
      <bitmap_item guid="b220f50b-9396-4bf1-88be-a8fb69ce65f5" index="12" />
      <bitmap_item guid="9141880f-3623-4262-9345-9d3c137c52f7" index="13" />
      <bitmap_item guid="85064144-1e81-4b39-9c85-88b72d987c86" index="14" />
      <bitmap_item guid="18ff4a5b-d913-4087-8dd2-d86217e64b7f" index="15" />
      <bitmap_item guid="a4555076-3c23-4105-822d-959af488b924" index="16" />
      <bitmap>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</bitmap>
    </large_bitmap>
  </bitmaps>
  <scripts />
</RhinoUI>