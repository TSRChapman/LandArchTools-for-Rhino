<?xml version="1.0" encoding="utf-8"?>
<RhinoUI major_ver="3" minor_ver="0" guid="0804c739-59c2-4cd7-86d9-ddaf63e97340" localize="False" default_language_id="1033" dpi_scale="100">
  <extend_rhino_menus>
    <menu guid="d58ceae7-fdb0-4104-80da-274b94ad44a9">
      <text>
        <locale_1033>Extend Rhino Menus</locale_1033>
      </text>
    </menu>
  </extend_rhino_menus>
  <menus />
  <tool_bar_groups>
    <tool_bar_group guid="4830f6fe-5b84-4155-9c85-a8ae8942b65e" dock_bar_guid32="00000000-0000-0000-0000-000000000000" dock_bar_guid64="92d659a2-6f79-4f2b-8ba6-2670971a2e86" active_tool_bar_group="c0ddb15f-03f5-4dff-86f7-7745ab4674f7" single_file="False" hide_single_tab="True" point_floating="-142,810">
      <text>
        <locale_1033>LandArchTools</locale_1033>
      </text>
      <tool_bar_group_item guid="c0ddb15f-03f5-4dff-86f7-7745ab4674f7" major_version="1" minor_version="1">
        <text>
          <locale_1033>LandArchTools</locale_1033>
        </text>
        <tool_bar_id>d8dc19cb-56d8-4f50-b015-76d6b2e6fb1f</tool_bar_id>
      </tool_bar_group_item>
      <dock_bar_info dpi_scale="100" dock_bar="False" docking="True" horz="False" visible="True" floating="False" mru_float_style="8192" bar_id="59472" mru_width="868" point_pos="0,561" float_point="-142,810" rect_mru_dock_pos="0,561,64,1082" dock_location_u="59420" dock_location="left" float_size="498,62" />
    </tool_bar_group>
  </tool_bar_groups>
  <tool_bars>
    <tool_bar guid="d8dc19cb-56d8-4f50-b015-76d6b2e6fb1f" bitmap_id="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb">
      <text>
        <locale_1033>LandArchTools</locale_1033>
      </text>
      <tool_bar_item guid="bcc9156a-6e1d-4be5-8f0e-7bfcfc3e4f0c">
        <left_macro_id>5bb60bb6-b5e1-4cf6-b207-2aa05bd6bf0f</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="49c53416-e30d-414d-a4e3-f9daca5032dc">
        <left_macro_id>ba483181-ff75-4d51-9bba-974118b80da5</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2f4946a0-eb09-4882-aecb-284bc226419e">
        <left_macro_id>812b1c36-0e85-4b6c-9982-e2b575bf9c7b</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="e021088f-3f01-4ec2-b7f8-7e141567db90">
        <left_macro_id>4211923b-f22f-4ab1-8745-e05f836d0bf8</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="70198725-314c-45f3-be45-e35fdd8208df">
        <left_macro_id>ef338e36-b652-464e-9f92-9d8c746720f3</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="eef8629f-6a85-4738-8531-046c164ab354">
        <left_macro_id>5a023420-191b-433d-9347-d6221ccc57d3</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="73e33de0-b307-41c7-b2cf-7058df45f707">
        <left_macro_id>2f54edf0-21f1-40d0-9cfb-31f8276274ca</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9f05992f-75c6-4360-8a00-5412592b1130">
        <left_macro_id>d1ca3149-4600-4d59-891a-116db286a114</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9d56baae-f374-4ee4-8917-a3170cadab27">
        <left_macro_id>161b2a13-4700-4945-9dae-25c70928152b</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="5598f291-9102-4785-ad1f-89305c097143">
        <left_macro_id>4055eaa6-4427-427c-b6a5-e6cdbac914c2</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="31d82a86-c02b-4786-9489-884129774c95">
        <left_macro_id>652506ee-7343-475c-a018-6ed9c0a76b29</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="1c7275d2-d2bb-4582-835c-2dc2ea64040d">
        <left_macro_id>87791b70-7cac-4efc-a5c4-deece16831aa</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9b1ad1b4-64b4-46ff-a3b6-2df1205041f4">
        <left_macro_id>96e93532-81ce-4156-b7f7-b7ff1364c489</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="0c1a0eb2-86c5-4735-a356-9ab261bf6b7c">
        <left_macro_id>d16957a9-f662-446d-9801-c0533fb38255</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2dce03e3-13e1-4b50-a92c-2f59b9947d33">
        <left_macro_id>c047d19d-b398-41b0-9fd8-74fe11b70e04</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="135b9233-ad6d-4ea1-b6b8-967e3eb44a41">
        <left_macro_id>cfb1aa22-1db1-4869-b63d-8a0474245511</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2d5840f3-4ba6-4be7-b14d-725b51e62bb2">
        <left_macro_id>63812035-1fa4-4e2a-8e3c-41fae14a9a2c</left_macro_id>
      </tool_bar_item>
    </tool_bar>
  </tool_bars>
  <macros>
    <macro_item guid="5bb60bb6-b5e1-4cf6-b207-2aa05bd6bf0f" bitmap_id="f9c5b694-dced-4977-a15f-92d9fff043bc">
      <text>
        <locale_1033>Macro 00</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Calculate grade between two points</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Calculate grade between two points</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Calculate grade between two given points
#By Thomas Chapman on 11/01/2021

import rhinoscriptsyntax as rs
import math as m

# Get points from user
pt1 = rs.GetPoint('Pick the first point')
pt2 = rs.GetPoint('Pick the second point')


if pt2:
    hypotenuse = rs.Distance(pt1, pt2)

    rs.EnableRedraw(False)


    # Find the rise of given points in any order
    if pt1.Z &gt; pt2.Z:
        rise = pt1.Z - pt2.Z
    elif pt1.Z &lt; pt2.Z:
        rise = pt2.Z - pt1.Z

    # Find the run of given points
    run = m.sqrt(hypotenuse**2 - rise**2)

    # Detect model units and scale to mm, if mm do nothing
    if rs.UnitSystem == 3:
        rise = rise*100
    if rs.UnitSystem == 4:
        rise = rise*1000

    # Calculate grade based on rise and run
    try:
        grade = run / rise

    except ZeroDivisionError:
        print('No Grade Found')
        exit()

    # Print text dot to screen
    curve = rs.AddCurve([pt1,pt2])
    midpoint = rs.CurveMidPoint(curve)
    rs.DeleteObject(curve)
    rs.AddTextDot('1:' + str(abs(round(grade,2))),midpoint)

    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="ba483181-ff75-4d51-9bba-974118b80da5" bitmap_id="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92">
      <text>
        <locale_1033>Macro 02</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Display the RL of a given point</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Display the RL of a given point</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''


# Show RL of specified point and copy to clipboard
# By Thomas Chapman on 01/10/2021

import rhinoscriptsyntax as rs
import os

point = rs.GetPoint('Select point')

if point:
    pointZ = point.Z

    if rs.UnitSystem() == 3: #if doc is in CM
        pointZ = pointZ *0.01
    if rs.UnitSystem() == 2:#if doc is in MM
         pointZ = pointZ *0.001

    rs.AddTextDot('+RL ' + str(round(pointZ,3)),point)

    #Copy RL to Clipboard

    RL = str(round(pointZ,3))

    rs.ClipboardText(RL)


)</script>
    </macro_item>
    <macro_item guid="4211923b-f22f-4ab1-8745-e05f836d0bf8" bitmap_id="8a465cae-79a9-4baa-b77e-ef3d92b27f3c">
      <text>
        <locale_1033>Macro 03</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

# MOVE OBJECT TO SPECIFIED RL
# BY THOMAS CHAPMAN ON 01/10/2021

import rhinoscriptsyntax as rs
import Rhino.Geometry as geo

obj = rs.GetObjects('Select objects',preselect=True)

if obj:
    current = rs.GetPoint('Select point')
    
    if current: 
        rl = rs.GetString('RL to move to?')
        rl = float(rl)
        
        if rs.UnitSystem() == 3: #if model is in cm scale by 100
            rl = rl*100
        elif rs.UnitSystem() == 2: #if model is in mm scale by 1000
            rl = rl*1000
        
        if rl == 0.000: #move objects to the 0 coord
            target3 = current.Z
            if target3:
                target3 = target3 *-1
                target4 = geo.Point3d(0,0,target3)
                rs.MoveObject(obj, target4)

        elif rl &gt; 0.000:
            target = rl - current.Z #+ or - number to target location
            target2 = geo.Point3d(0,0,target) #translated vector needed to hit target
            rs.MoveObject(obj, target2)
)</script>
    </macro_item>
    <macro_item guid="ef338e36-b652-464e-9f92-9d8c746720f3" bitmap_id="bca0a23f-5397-475b-9a42-1ef72c11f863">
      <text>
        <locale_1033>Macro 01</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#RANDOM ROTATE BLOCK INSTANCES AROUND INSERTION POINT
#BY THOMAS CHAPMAN ON 01/09/2021

import rhinoscriptsyntax as rs
import random as r

vec = rs.VectorCreate([0,0,1],[0,0,0])
obj = rs.GetObjects('pick Blocks to rotate randomly', filter=4096, preselect=True)

if obj:
    rs.EnableRedraw(False)

    for object in obj:
        num = r.randrange(-180,180)
        point = rs.BlockInstanceInsertPoint(object)
        rs.RotateObject(object, point, num, vec)

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="5a023420-191b-433d-9347-d6221ccc57d3" bitmap_id="f3c1fd4a-470f-412b-98a3-4374e134c963">
      <text>
        <locale_1033>Macro 12</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Random Drop Block</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Random Drop Block</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs
import random as r


obj = rs.GetObjects('Pick blocks to drop randomly', filter=4096, preselect=True)
dropnum = rs.GetReal("Enter max drop distance")

if obj:
    rs.EnableRedraw(False)

    for object in obj:
        num = r.uniform((-abs(dropnum)),0)
        print num
        vec = rs.VectorCreate([0,0,num],[0,0,0])
        point = rs.BlockInstanceInsertPoint(object)
        rs.MoveObject(object,vec)

    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="d1ca3149-4600-4d59-891a-116db286a114" bitmap_id="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24">
      <text>
        <locale_1033>Macro 04</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Drop objects to surface

#By Thomas Chapman on 17/01/2021
#24/04/2021 revision to capture most error messages

import rhinoscriptsyntax as rs
import itertools

def main():

    # prompt user for obj and surface
    obj = rs.GetObjects('Pick objects',preselect=True,filter=(8+16+32+4096+1073741824))
    surface = rs.GetObjects('Pick Surface/Mesh')
    
    #Check selects are valid
    
    if obj == None:
        return
    if surface == None:
        return
    
    
    meshCheck = rs.IsMesh(surface[0])
    indexnum = []
    surfacetypes = []
    
    
    
    #Check if mixed surface types
    for thing in surface:
        result = rs.IsMesh(thing)
        surfacetypes.append(str(result))
    
    if ('True' in surfacetypes) and ('False' in surfacetypes):
        print ('Please select only one surface type')
        return
    
    
    
    #Turn off redraw to speed up script
    rs.EnableRedraw(False)
    
    # Generate bounding box around obj and find distance between obj and surface
    for objects in obj:
        ptlist = []
    
        # Get bounding box and make a square on lower half and find centroid
        bounds = rs.BoundingBox(objects)
        pl = rs.AddPolyline((bounds[0:4]+[bounds[0]]))
        centroid = rs.CurveAreaCentroid(pl)
    
        # Add three points at the centroid and move them in both z direction
        pt00 = rs.AddPoint(centroid[0])
        pt000 = rs.AddPoint(centroid[0])
        lowpoint = rs.AddPoint(centroid[0])
        pt01 = rs.MoveObject(pt00, (0,0,100000))
        pt02 = rs.MoveObject(pt000, (0,0,-100000))
    
        #Check if Mesh else use nurb instersect
        if meshCheck is True:
            curve = rs.AddCurve((pt01, pt02))
            for plane in surface:
                intersection = rs.CurveMeshIntersection(curve, plane)
                if intersection is None:
                    continue
                ptlist.append(list(filter(None,intersection)))
            merged = list(itertools.chain(*ptlist))
            merged = list(itertools.chain(*merged))
    
        # Create curve to intersect with surface to find distance from obj
        elif meshCheck is False:
            curve = rs.AddCurve((pt01, pt02))
            for plane in surface:
                intersection = rs.CurveBrepIntersect(curve, plane)
                if intersection is None:
                    continue
                ptlist.append(list(filter(None,intersection)))
            merged = list(itertools.chain(*ptlist))
            merged = list(itertools.chain(*merged))
    
        if merged is not None and merged != []:
            # Find the highest Z value and use that to target
            sorted = rs.SortPoints((rs.coerce3dpointlist(merged)), ascending=False, order=4)
            inter = (sorted[0])
            dist = rs.Distance(lowpoint, inter)
    
            # Convert Guid to point list
            intCon = rs.coerce3dpoint(inter)
            lowCon = rs.coerce3dpoint(lowpoint)
    
            # Find if obj is below or above surface and change dist to + or - accordingly
            if lowCon[2] &lt; intCon[2]:
                distCon = abs(dist)
            if lowCon[2] &gt; intCon[2]:
                distCon = (dist)*-1
            elif lowCon[2] == intCon[2]:
                rs.DeleteObjects([curve, pt01, pt02, pl, lowpoint]+merged)
                continue
    
            # Move obj to intersection
            rs.MoveObject(objects, (0,0,distCon))
    
            #deleate construction geo
            try:
               rs.DeleteObjects([curve, pt01, pt02, pl, lowpoint]+merged)
            except:
                continue
    
    
    
            #Clear list values for second run through loop
            del intersection
            del merged
            del ptlist
    
    
    
    #delete any polysurfaces created
    if isinstance(indexnum, int):
        rs.DeleteObjects(surface[indexnum])
    
    # Enable redraw to show results
    rs.EnableRedraw(True)


main()
)</script>
    </macro_item>
    <macro_item guid="161b2a13-4700-4945-9dae-25c70928152b" bitmap_id="bd3a0457-e280-44b4-95ec-68bf6d152c4f">
      <text>
        <locale_1033>Macro</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Model Standard Australian DDA Ramps

import rhinoscriptsyntax as rs
import math as m


if rs.UnitSystem() == 4: #if doc is in M
    Mult = 1
if rs.UnitSystem() == 3: #if doc is in CM
    Mult = 100
if rs.UnitSystem() == 2:#if doc is in MM
    Mult = 1000



pt00 = rs.GetPoint('Pick insertion point')

if pt00:


    pt01 = rs.CreatePoint(pt00.X,pt00.Y)
    RampOptions = 'Step Ramp', 'Kerb Ramp', 'Ramp', 'Walkway'
    RampType = rs.PopupMenu(RampOptions)

    rs.EnableRedraw(False)


    if RampType == -1:
        exit()

    if RampType == 0: #Step Ramp
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.9*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)

    if RampType == 1: #Kerb Ramp
    #main ramp portion
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.52*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)

    if RampType == 2: #Ramp
        Grade = '1:19','1:18','1:17','1:16','1:15','1:14'
        Index = rs.PopupMenu(Grade)
        GradeNum = [19,18,17,16,15,14]
        if Index == 5:
            Rise = 9/(GradeNum[Index])
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+9*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)
        elif Index != 5:
            Rise = 15/(GradeNum[Index])
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)

    if RampType == 3: #Walkway
        Grade = '1:33','1:32','1:31','1:30','1:29','1:28','1:27','1:26','1:25','1:24','1:23','1:22','1:21','1:20'
        Index = rs.PopupMenu(Grade)
        GradeNum = [33,32,31,30,29,28,27,26,25,24,23,22,21,20]
        if Index == 0:
            Rise = 25/(GradeNum[Index])
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+25*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)
        if Index == 13:
            Rise = 15/(GradeNum[Index])
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)
        elif Index != 0 or Index != 13:
            Interp = m.floor((( GradeNum[Index] - 20)*(25 - 15)/(33 - 20))+15) #Linear interpolation of landing distance - DDA requirement...Srsly?
            Rise = Interp/(GradeNum[Index])
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+Interp*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)

    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="4055eaa6-4427-427c-b6a5-e6cdbac914c2" bitmap_id="4bec978a-dd98-4658-b848-0f810eefd6bf">
      <text>
        <locale_1033>Macro 05</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Patch Multiple Individual closed polylines
#By Thomas Chapman 04/22/2021

import rhinoscriptsyntax as rs

geo = rs.GetObjects('Select Closed Polylines',preselect=True)

if geo:
    
    uv1 = rs.GetInteger('enter number of UV divisions',number=1,minimum=1)

    rs.EnableRedraw(False)
    for objects in geo:
        rs.AddPatch((objects),(uv1,uv1),tolerance=0.0001)
    rs.EnableRedraw(True)


)</script>
    </macro_item>
    <macro_item guid="652506ee-7343-475c-a018-6ed9c0a76b29" bitmap_id="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676">
      <text>
        <locale_1033>Macro 06</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Isolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Isolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

# Get object and find layer it is on
obj = rs.GetObjects('select an object on the layer to isolate',preselect=True)

if obj:


    rs.EnableRedraw(False)

    # Create list of selected obj layers
    selectedlayers = []
    for i in obj:
        layer = rs.ObjectLayer(i)
        selectedlayers.append(layer)

    # Select all objects on each layer

    for i in selectedlayers:
        rs.ObjectsByLayer(i,True)
    isolate = rs.SelectedObjects()

    allObjects = rs.AllObjects()

    for i in isolate:
        allObjects.remove(i)

    # Hide selected objects

    rs.HideObjects(allObjects)

    rs.UnselectAllObjects()

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="87791b70-7cac-4efc-a5c4-deece16831aa" bitmap_id="7c225bac-4566-4c22-8529-19795734ecf8">
      <text>
        <locale_1033>Macro 07</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Unisolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Unisolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Unisolate All objects
#By Thomas Chapman 21/05/01

import rhinoscriptsyntax as rs

obj = rs.HiddenObjects()

if obj:

    rs.ShowObjects(obj)
)</script>
    </macro_item>
    <macro_item guid="96e93532-81ce-4156-b7f7-b7ff1364c489" bitmap_id="3a30ba51-3cf2-4d5a-ae4e-e7727296e181">
      <text>
        <locale_1033>Macro 08</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Turn Selected Object Layers Off</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Turn Selected Object Layers Off</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

obj = rs.GetObjects("select obj Layers to turn off")

if obj:

    rs.EnableRedraw(False)

    for i in obj:
        layer = rs.ObjectLayer(i)
        rs.LayerVisible(layer, visible=False)

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="d16957a9-f662-446d-9801-c0533fb38255" bitmap_id="5ecdbeb8-4c26-464d-965a-d29084b78338">
      <text>
        <locale_1033>Macro 09</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Plan View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Plan View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _T")

)</script>
    </macro_item>
    <macro_item guid="c047d19d-b398-41b0-9fd8-74fe11b70e04" bitmap_id="3f736f77-7940-4134-9713-dac547abd1c6">
      <text>
        <locale_1033>Macro 10</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Perspective View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Perspective View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _p")

)
</script>
    </macro_item>
    <macro_item guid="cfb1aa22-1db1-4869-b63d-8a0474245511" bitmap_id="c351dd99-b010-4a89-86fe-835dd645a1b8">
      <text>
        <locale_1033>Macro 11</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import glob
import struct
import imghdr
import rhinoscriptsyntax as rs

#Check document units
units = rs.UnitSystem()

if units == 2: #mm
    scale = 1000
if units == 3: #cm
    scale = 100
if units == 4: #m
    scale = 1

def get_image_size(fname):
    '''Determine the image type of fhandle and return its size.
    from draco'''
    with open(fname, 'rb') as fhandle:
        head = fhandle.read(24)
        if len(head) != 24:
            return
        if imghdr.what(fname) == 'png':
            check = struct.unpack('&gt;i', head[4:8])[0]
            if check != 0x0d0a1a0a:
                return
            width, height = struct.unpack('&gt;ii', head[16:24])
        elif imghdr.what(fname) == 'gif':
            width, height = struct.unpack('&lt;HH', head[6:10])
        elif imghdr.what(fname) == 'jpeg':
            try:
                fhandle.seek(0) # Read 0xff next
                size = 2
                ftype = 0
                while not 0xc0 &lt;= ftype &lt;= 0xcf:
                    fhandle.seek(size, 1)
                    byte = fhandle.read(1)
                    while ord(byte) == 0xff:
                        byte = fhandle.read(1)
                    ftype = ord(byte)
                    size = struct.unpack('&gt;H', fhandle.read(2))[0] - 2
                # We are at a SOFn block
                fhandle.seek(1, 1)  # Skip `precision' byte.
                height, width = struct.unpack('&gt;HH', fhandle.read(4))
            except Exception: #IGNORE:W0703
                return
        else:
            return
        return width, height



#Find and open jgw file, extract scalefactor and x and y coordinates

jgw = rs.OpenFileName(title= 'Select .JGW file',filter="JGW Files (*.JGW)|*.JGW||" )

with open(jgw,'rt') as f:
    numslist = f.read().splitlines()

scaleFactor01 = numslist[0]

worldx = float(numslist[4])*int(scale)
worldy = float(numslist[5])*int(scale)

#Find and open jpg file, extract pixel size

jpg = rs.OpenFileName(title= 'Select .JPG image File',filter="JPG Files (*.JPG)|*.JPG||")

size = get_image_size(jpg)

scaleFactor02 = (float(size[0])*int(scale))
scaleFactor03 = (float(size[1])*int(scale))

# Calculate scale factor

scaleFactorWidth = (float(scaleFactor01))*(float(scaleFactor02))
scaleFactorHeight = (float(scaleFactor01))*(float(scaleFactor03))

origin = (float(worldx), (float(worldy) - float(scaleFactorHeight)), 0)

picturePlane = rs.PlaneFromFrame(origin,(1,0,0),(0,1,0))

rs.AddPictureFrame(picturePlane,jpg,width=(float(scaleFactorWidth)), height=(float(scaleFactorHeight)))

)</script>
    </macro_item>
    <macro_item guid="63812035-1fa4-4e2a-8e3c-41fae14a9a2c" bitmap_id="5bb47664-de86-4b8e-88ce-835cfa2b3981">
      <text>
        <locale_1033>Macro 13</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Create Standard Layers</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Create Standard Layers</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Create Standard Layers

import rhinoscriptsyntax as rs
import random as r

#Add Layers to document

rs.EnableRedraw(False)

layerList = [
"L_BLDS", 
"L_BNDY_WRKS", 
"L_EDGE",
"L_HARD_ROCK",
"L_HARD_WALL",
"L_HARD_STEP",
"L_HARD_RAMP",
"L_HARD_FNCE",
"L_HARD_PAV1",
"L_HARD_PAV2",
"L_HARD_PAV3",
"L_HARD_PAV4",
"L_LGHT",
"L_ENTO",
"L_PLAY_EQUI",
"L_PLNT",
"L_STRU",
"L_TEXT",
"L_TREE_PROP",
"L_TREE_RETN",
"L_WALL",
"_L_WORKING",
"L_SOFT_GRDN",
"L_SOFT_MLCH",
"L_SOFT_LAWN",
"L_SOFT_PLANT",
"L_FURN",
"_L_OFF"


]



layerList.sort()

parentLayer = rs.AddLayer(name="LANDSCAPE", color=None, visible=True, locked=False, parent=None)

for layer in layerList:
    rs.AddLayer(layer,(r.randrange(255),r.randrange(255),r.randrange(255)),visible=True, locked=False, parent= parentLayer)

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="812b1c36-0e85-4b6c-9982-e2b575bf9c7b" bitmap_id="b54432f0-91ec-43b6-8b11-4a7654e19716">
      <text>
        <locale_1033>Macro 14</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Calculate Height difference between two points</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Calculate Height difference between two points</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

pt01 = rs.GetPoint('Select first point to measure from')
pt02 = rs.GetPoint('Select second point to measure to')

if pt02:

    pt01Z = pt01.Z
    pt02Z = pt02.Z

    height = abs(pt01Z-pt02Z)
    height = round(height, 3)

    rs.ClipboardText(height)

    rs.MessageBox(height, buttons=0, title="Height difference - Value copied to clipboard")
)</script>
    </macro_item>
    <macro_item guid="2f54edf0-21f1-40d0-9cfb-31f8276274ca" bitmap_id="d59a330a-0413-4632-9c5c-1d8f613a7bd0">
      <text>
        <locale_1033>Macro 15</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Rotate picture frames to face current camera view</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Rotate picture frames to face current camera view</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''
#Rotate picture frames to face camera

import rhinoscriptsyntax as rs

frames = rs.GetObjects("Select Picture Frames",filter=8,preselect=True)


#rotate surfaces around z axis towards camera point
if frames:

    cam = rs.ViewCamera()
    camz = (cam.X,cam.Y,0)
    world = rs.WorldXYPlane()
    angle = 1

    rs.EnableRedraw(False)

    for i in frames:
        angle = 1
        while angle &gt;= 1:
            
            #get mid point of surface and move to z 0
            pointmid = rs.SurfaceAreaCentroid(i)
            pointmidz = (pointmid[0].X,pointmid[0].Y,0)
            #Get center UV of surface
            domainU = rs.SurfaceDomain(i, 0)
            domainV = rs.SurfaceDomain(i, 1)
            u = domainU[1]/2.0
            v = domainV[1]/2.0
            #Get normal vector of surface and cam vector
            vec1 = rs.SurfaceNormal(i,(u,v))
            vec1 = vec1.X,vec1.Y,0
            vec2 = rs.VectorCreate(camz,pointmidz)
            #find angle difference between the two vectors
            angle = rs.VectorAngle(vec1,vec2)
            angle = round(angle)
            #Rotate Object
            rs.RotateObject(i,pointmidz,angle)
        continue

    rs.EnableRedraw(True)

)</script>
    </macro_item>
  </macros>
  <bitmaps>
    <small_bitmap item_width="16" item_height="16">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap_item guid="b54432f0-91ec-43b6-8b11-4a7654e19716" index="16" />
      <bitmap_item guid="d59a330a-0413-4632-9c5c-1d8f613a7bd0" index="17" />
      <bitmap>iVBORw0KGgoAAAANSUhEUgAAABAAAAEgCAYAAAC9/vN4AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADrwAAA68AZW8ckkAAAIKSURBVHhe7dNBSBRRGAfwh6RI14Kgc3Sr6BAJ
3jp0r7uXCi91E7wEaq6jzcE66LqWkR4qNOgQmDCoqRukZFLtOuvKdvMgexCDtBVi5t97b+a9nVUD
vXn4/+BjZr553zdv3rwRREREREREREREREREREREREREREREREREREREREREJ0Uouq8EwkkHIrUm
j5Uo9Hla3YuHHQTR2SgHZWQEEA4OC3UvED3DamxcFomKe+bC+j4EjY8Rnuo7UKxy6n7caK6miXqy
urHpeCj+LGF8agXlc09ssTrPznzDxstPNqdmootD4Vw20zYNJvNFjL9fxtbZfmyd6Ufbq0X4pRLW
/SKC066ZRaDXRHYaNF1NAxPtQ1m0pxfgLvk29/vmWGIWTlpNv2ASuXvvMLBcsHFn4gvuyuj4vGpz
+Za3iQapNdkg9ccm6nrhdnq4Pf1Dh2lgrt0uT4+pNnAqNQ1Mk53zT/Hr2nNsN7/AI3cWbZmsjslb
b+w4PTZqUH0FE3/lwu02jaByKaNn0Dqfw/2FPB7Io39jNNFAv0J1EU3sXRjAjnz63sVBtL5ewoy/
bhdxs9dLNJCLmPyMh0Xu6jN4K4XoM64WUX74QedVjd3a8kJvpP/F1+sjmP5eQLljyubsRlKirZz6
mCzaH2GD3MrxFpcPrN3KStTkKD+Tmu2+4qR4TY7/OxMRERFpQvwDC2ZBbMQT780AAAAASUVORK5C
YII=</bitmap>
    </small_bitmap>
    <normal_bitmap item_width="24" item_height="24">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap_item guid="b54432f0-91ec-43b6-8b11-4a7654e19716" index="16" />
      <bitmap_item guid="d59a330a-0413-4632-9c5c-1d8f613a7bd0" index="17" />
      <bitmap>iVBORw0KGgoAAAANSUhEUgAAABgAAAGwCAYAAACzT6XPAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADrwAAA68AZW8ckkAAARYSURBVHhe7dR7TJV1HMfxcwTkJgHpkYnGpYEg
ykWmFMKixoAkYUvpcPECepQ5p/4hihfU0VaTBG/E1LlFCBrJzcqpTVAYbJlol0VDV9N/nLWlyQSU
6zmfvj8eLq517LTc6o/Pa3tvD+f5Pb8vz3Pg0RERERERERERERERERHR/5u9lCYljfz0nMVOdXSp
2xKfgjVRcf12Ot0x+SxYO/Xv+DjY2R1OnRNxv3VdAVBzBYOX2nE2rxCv+wbflfPbpWkjK/8hD2lj
jG/gz+XG9RjeVwkcqAEOSTIEbR3oabiMkkwTwgzeN2StUVKP8G/ppXRvzxdbipMz8FvhceBwPbD/
NFBUBahB758Ejsighlbg6k3cPlGDbW+kWpzs7b+Qa+NHdnmGKU56fdN8gzcacvIs5pJq+a3rgA9O
aQPG2idVXgSu/4QnF7/G0YxcS5D7VNjp9CdH97FqSriLR23pywuxekbAYE7Eor6WDXuBg7VAyacT
d3G6CWj+Dg07iobSQ6MGds5d0HcpwYjJeruq0X2scg1xcT/z1fzFeBiTaSnzWTCweLr/4y2xyX13
dpVqgw6cQfvWYrNpUXx/xqzA3gvGtUM4UYc7pm2Q6yu0bayTAW41jeEJ6I7NGqkjInl4z6zg3sUz
Zz/6KM3U/+6bxsElM/0flcem9HbtP2FGfSNwoQ2dG3fbNMBlrqNH7eWwRDyMzcS96HfwICYdXTEZ
aA9NfBLk5NqbGxDRfe/t9UPYeQg4Vg1zwUGgvAGdm/faNmCeo1tdswzoGh2g+kUafG0FMg3+uJG6
Gli7B+bsHRhesQ3DOduBj8+ic5ONA0Jd3Oqbw+UOYiYGqHrkcRkNfmh9ayWwpgDDK2Xz5XkYNu0C
Kj6TAXtsGyB/RfUtETYMWJUvd7BVG1B1DjdtfESu4a6e565GJssXbMMAdRfZ8ohKKnDblK8GnNK2
sc7N3d7h/OGAqJEv95Fsqp6/tQEWtblpNx5n5+N4dJIacFTb5tlemazXV2YZfAeawhJkSCbuy7De
Pw3Aank0UktSFtJ8Ah7o9foP5dogbYu/li09/a5f4ufgfCXvpRD8uDAVlrhVyPLyx7WUHCC3ELeW
5mJdUKTZS17jsjZGu2REnGTSDie4S9ekbkn9u8+XFPVW3RDm7HGrIigaywy+OJ9oRNmriZgzxfO6
nEuXnNVCESlVSl3STWmSNG6e9KuknqNqk/Q0Hwedfp/jJLueOW7T7sqVO+WzF7RT4zZLY9f/LvlJ
41Kkb6UiSb3f1atX3aZBepp6FCHa4Ti1Rq39XPpGKpbapFRpnJc0NnG2pL6wDul76UupTCqQlkvq
u9o9+tlFSa35QSqVAiVlhjRTO7RuurRUek+qltRv2DiaOv5EUueWSWrtc+EkOWqHRERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE/xWd
7g95wjH+2icRSQAAAABJRU5ErkJggg==</bitmap>
    </normal_bitmap>
    <large_bitmap item_width="32" item_height="32">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap_item guid="b54432f0-91ec-43b6-8b11-4a7654e19716" index="16" />
      <bitmap_item guid="d59a330a-0413-4632-9c5c-1d8f613a7bd0" index="17" />
      <bitmap>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
cgAAAABJRU5ErkJggg==</bitmap>
    </large_bitmap>
  </bitmaps>
  <scripts />
</RhinoUI>