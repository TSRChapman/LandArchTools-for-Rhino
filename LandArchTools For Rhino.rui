<?xml version="1.0" encoding="utf-8"?>
<RhinoUI major_ver="3" minor_ver="0" guid="0804c739-59c2-4cd7-86d9-ddaf63e97340" localize="False" default_language_id="1033" dpi_scale="100">
  <extend_rhino_menus>
    <menu guid="d58ceae7-fdb0-4104-80da-274b94ad44a9">
      <text>
        <locale_1033>Extend Rhino Menus</locale_1033>
      </text>
    </menu>
  </extend_rhino_menus>
  <menus />
  <tool_bar_groups>
    <tool_bar_group guid="1067bebe-88d0-4b21-ab8b-9c9b8b4860e0" dock_bar_guid32="00000000-0000-0000-0000-000000000000" dock_bar_guid64="764b7a3c-c626-4771-bff3-c47aa63fd0b1" active_tool_bar_group="d51f71b9-4a55-481d-a2ed-9bbc51b0bc7e" single_file="False" hide_single_tab="False" point_floating="1471,361">
      <text>
        <locale_1033>LandArchTools</locale_1033>
      </text>
      <tool_bar_group_item guid="d51f71b9-4a55-481d-a2ed-9bbc51b0bc7e" major_version="1" minor_version="1">
        <text>
          <locale_1033>LandArchTools</locale_1033>
        </text>
        <tool_bar_id>d8dc19cb-56d8-4f50-b015-76d6b2e6fb1f</tool_bar_id>
      </tool_bar_group_item>
      <dock_bar_info dpi_scale="100" dock_bar="False" docking="True" horz="False" visible="True" floating="True" mru_float_style="8192" bar_id="59476" mru_width="868" point_pos="-2,-2" float_point="1471,361" rect_mru_dock_pos="0,0,0,0" dock_location_u="59419" dock_location="top" float_size="713,62" />
    </tool_bar_group>
  </tool_bar_groups>
  <tool_bars>
    <tool_bar guid="d8dc19cb-56d8-4f50-b015-76d6b2e6fb1f" bitmap_id="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb">
      <text>
        <locale_1033>LandArchTools</locale_1033>
      </text>
      <tool_bar_item guid="bcc9156a-6e1d-4be5-8f0e-7bfcfc3e4f0c">
        <left_macro_id>5bb60bb6-b5e1-4cf6-b207-2aa05bd6bf0f</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="49c53416-e30d-414d-a4e3-f9daca5032dc">
        <left_macro_id>ba483181-ff75-4d51-9bba-974118b80da5</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2f4946a0-eb09-4882-aecb-284bc226419e">
        <left_macro_id>812b1c36-0e85-4b6c-9982-e2b575bf9c7b</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="e021088f-3f01-4ec2-b7f8-7e141567db90">
        <left_macro_id>4211923b-f22f-4ab1-8745-e05f836d0bf8</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="3c553441-e8b2-4259-9aae-3907facf4694">
        <left_macro_id>6beb1246-fc82-4dfc-bb54-1188098f1029</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="70198725-314c-45f3-be45-e35fdd8208df">
        <left_macro_id>ef338e36-b652-464e-9f92-9d8c746720f3</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="eef8629f-6a85-4738-8531-046c164ab354">
        <left_macro_id>5a023420-191b-433d-9347-d6221ccc57d3</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="73e33de0-b307-41c7-b2cf-7058df45f707">
        <left_macro_id>2f54edf0-21f1-40d0-9cfb-31f8276274ca</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="7e3ac271-33ec-4c9d-95df-0f279a9766bf">
        <left_macro_id>89640668-abe2-45c1-9303-09a96c1466e8</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9f05992f-75c6-4360-8a00-5412592b1130">
        <left_macro_id>d1ca3149-4600-4d59-891a-116db286a114</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9d56baae-f374-4ee4-8917-a3170cadab27">
        <left_macro_id>161b2a13-4700-4945-9dae-25c70928152b</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="7d72bb3e-1647-4aea-b42b-f69fcedf7f4d">
        <left_macro_id>05291655-fced-47a7-a765-dc4637a8e6f2</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="5598f291-9102-4785-ad1f-89305c097143">
        <left_macro_id>4055eaa6-4427-427c-b6a5-e6cdbac914c2</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="59e8d235-d308-4e12-8984-461790c354b8">
        <left_macro_id>650f2340-8c69-4456-84be-cdc45ddf12be</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="31d82a86-c02b-4786-9489-884129774c95">
        <left_macro_id>652506ee-7343-475c-a018-6ed9c0a76b29</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="1c7275d2-d2bb-4582-835c-2dc2ea64040d">
        <left_macro_id>87791b70-7cac-4efc-a5c4-deece16831aa</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9b1ad1b4-64b4-46ff-a3b6-2df1205041f4">
        <left_macro_id>96e93532-81ce-4156-b7f7-b7ff1364c489</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="0c1a0eb2-86c5-4735-a356-9ab261bf6b7c">
        <left_macro_id>d16957a9-f662-446d-9801-c0533fb38255</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2dce03e3-13e1-4b50-a92c-2f59b9947d33">
        <left_macro_id>c047d19d-b398-41b0-9fd8-74fe11b70e04</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="135b9233-ad6d-4ea1-b6b8-967e3eb44a41">
        <left_macro_id>cfb1aa22-1db1-4869-b63d-8a0474245511</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="c99e2c9d-6eca-4bb1-b6ed-a1bc76f32a53">
        <left_macro_id>978e1959-d9a6-4142-8d86-6b21b079eaa6</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="8f524430-3fa1-4122-b71c-bdb05bc6ac7e">
        <left_macro_id>00485d86-6061-4967-b8a5-b52920e03baa</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2f572106-b4a8-40ad-883d-b7e4c17ba136">
        <left_macro_id>b7943e02-c0c3-4bd4-af85-e859db81c052</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2d5840f3-4ba6-4be7-b14d-725b51e62bb2">
        <left_macro_id>63812035-1fa4-4e2a-8e3c-41fae14a9a2c</left_macro_id>
      </tool_bar_item>
    </tool_bar>
  </tool_bars>
  <macros>
    <macro_item guid="5bb60bb6-b5e1-4cf6-b207-2aa05bd6bf0f" bitmap_id="f9c5b694-dced-4977-a15f-92d9fff043bc">
      <text>
        <locale_1033>Macro 00</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Calculate grade between two points</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Calculate grade between two points</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Calculate grade between two given points
#By Thomas Chapman on 11/01/2021

import rhinoscriptsyntax as rs
import math as m

#Determin Unit system and scale m input to unit system scale and close if not mm, cm, m
def scale():
    system = rs.UnitSystem()
    if system == 2 or system == 3 or system == 4:
        scaleFactorDict = {2:1000, 3:100, 4:1}
        scaleFactor = scaleFactorDict[system]
        return scaleFactor

    if system != 2 or system != 3 or system != 4:
        return None

def main():
    if scale() == None:
        rs.MessageBox("This tool is can only be used in mm, cm or m model units")
        return None
    
    # Get points from user
    pt1 = rs.GetPoint('Pick the first point')
    pt2 = rs.GetPoint('Pick the second point')
    
    if pt2:
        rs.EnableRedraw(False)
        hypotenuse = rs.Distance(pt1, pt2)
    
        # Find the rise of given points in any order
        if pt1.Z == pt2.Z:
            return None
        if pt1.Z &gt; pt2.Z:
            rise = pt1.Z - pt2.Z
        elif pt1.Z &lt; pt2.Z:
            rise = pt2.Z - pt1.Z
    
        # Find the run of given points
        run = m.sqrt(hypotenuse**2 - rise**2)
    
        # Detect model units and scale to mm, if mm do nothing
        rise = rise*scale()
        run = run*scale()
    
        # Calculate grade based on rise and run
        try:
            grade = run / rise
    
        except ZeroDivisionError:
            print('No Grade Found')
            exit()
    
        # Print text dot to screen
        curve = rs.AddCurve([pt1,pt2])
        midpoint = rs.CurveMidPoint(curve)
        rs.DeleteObject(curve)
        rs.AddTextDot('1:' + str(abs(round(grade,2))),midpoint)
        rs.EnableRedraw(True)

main()
)</script>
    </macro_item>
    <macro_item guid="ba483181-ff75-4d51-9bba-974118b80da5" bitmap_id="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92">
      <text>
        <locale_1033>Macro 02</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Display the RL of a given point</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Display the RL of a given point</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''


# Show RL of specified point and copy to clipboard
# By Thomas Chapman on 01/10/2021

import rhinoscriptsyntax as rs
import os

def scale():
    system = rs.UnitSystem()
    if system == 2 or system == 3 or system == 4:
        scaleFactorDict = {2:0.001, 3:0.01, 4:1}
        scaleFactor = scaleFactorDict[system]
        return scaleFactor

    if system != 2 or system != 3 or system != 4:
        return None

def main():
    if scale() == None:
        rs.MessageBox("This tool is can only be used in mm, cm or m model units")
        return None
        
    point = rs.GetPoint('Select point')
    
    if point:
        pointZ = point.Z
    pointZ = pointZ*scale()
    rs.AddTextDot('+RL ' + str(round(pointZ,3)),point)
    
    #Copy RL to Clipboard
    RL = str(round(pointZ,3))
    rs.ClipboardText(RL)

main()
)</script>
    </macro_item>
    <macro_item guid="4211923b-f22f-4ab1-8745-e05f836d0bf8" bitmap_id="8a465cae-79a9-4baa-b77e-ef3d92b27f3c">
      <text>
        <locale_1033>Macro 03</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

# MOVE OBJECT TO SPECIFIED RL
# BY THOMAS CHAPMAN ON 01/10/2021

import rhinoscriptsyntax as rs
import Rhino.Geometry as geo


#Determin Unit system and scale m input to unit system scale and close if not mm, cm, m
def scale():
    system = rs.UnitSystem()
    if system == 2 or system == 3 or system == 4:
        scaleFactorDict = {2:1000, 3:100, 4:1}
        scaleFactor = scaleFactorDict[system]
        return scaleFactor

    if system != 2 or system != 3 or system != 4:
        return None



def main():

    if scale() == None:
        rs.MessageBox("This tool is can only be used in mm, cm or m model units")
        return None

    obj = rs.GetObjects('Select objects',preselect=True)
    if obj:
        current = rs.GetPoint('Select point')
        
        if current: 
            rl = rs.GetString('RL to move to?')
            rl = float(rl)
            rl = rl*scale()
            
            if rl == 0.000: #move objects to the 0 coord
                target3 = current.Z
                if target3:
                    target3 = target3 *-1
                    target4 = geo.Point3d(0,0,target3)
                    rs.MoveObject(obj, target4)
    
            elif rl &gt; 0.000:
                target = rl - current.Z #+ or - number to target location
                target2 = geo.Point3d(0,0,target) #translated vector needed to hit target
                rs.MoveObject(obj, target2)

main ()
)</script>
    </macro_item>
    <macro_item guid="ef338e36-b652-464e-9f92-9d8c746720f3" bitmap_id="bca0a23f-5397-475b-9a42-1ef72c11f863">
      <text>
        <locale_1033>Macro 01</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#RANDOM ROTATE BLOCK INSTANCES AROUND INSERTION POINT
#BY THOMAS CHAPMAN ON 01/09/2021

import rhinoscriptsyntax as rs
import random as r

vec = rs.VectorCreate([0,0,1],[0,0,0])
obj = rs.GetObjects('pick Blocks to rotate randomly', filter=4096, preselect=True)

if obj:
    rs.EnableRedraw(False)

    for object in obj:
        num = r.randrange(-180,180)
        point = rs.BlockInstanceInsertPoint(object)
        rs.RotateObject(object, point, num, vec)

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="5a023420-191b-433d-9347-d6221ccc57d3" bitmap_id="f3c1fd4a-470f-412b-98a3-4374e134c963">
      <text>
        <locale_1033>Macro 12</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Random Drop Block</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Random Drop Block</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs
import random as r


obj = rs.GetObjects('Pick blocks to drop randomly', filter=4096, preselect=True)
dropnum = rs.GetReal("Enter max drop distance")

if obj:
    rs.EnableRedraw(False)

    for object in obj:
        num = r.uniform((-abs(dropnum)),0)
        print num
        vec = rs.VectorCreate([0,0,num],[0,0,0])
        point = rs.BlockInstanceInsertPoint(object)
        rs.MoveObject(object,vec)

    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="d1ca3149-4600-4d59-891a-116db286a114" bitmap_id="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24">
      <text>
        <locale_1033>Macro 04</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#DROP OBJECTS TO SELECTED SRF    


import rhinoscriptsyntax as rs

obj = rs.GetObjects('Select Objects',rs.filter.curve | rs.filter.instance | rs.filter.mesh | rs.filter.surface | rs.filter.subd | rs.filter.light | rs.filter.polysurface,preselect=True)
srf = rs.GetObject ('Select Surface')

if obj:
    if srf:
        
        rs.EnableRedraw(False)
        
        # Check if srf is a mesh, if so convert to Nurb
        isMesh = rs.IsMesh(srf)
        if isMesh == True: 
            srf  = rs.MeshToNurb(srf)
        
        # For each object send test rays up and down in Z coord
        # Move each object to the ray test that hits a srf
        for i in obj:
            bndBox = rs.BoundingBox(i)
            pt1 = bndBox[0]
            pt2 = bndBox[2]
            crv = rs.AddLine(pt1,pt2)
            
            if crv:
                midcrv = rs.CurveMidPoint(crv)
                rs.DeleteObject(crv)
                
            ray_pt_up = rs.ShootRay(srf,midcrv,(0,0,1),reflections=1)
            ray_pt_down = rs.ShootRay(srf,midcrv,(0,0,-1),reflections=1)
            
            if ray_pt_up:
                vector = rs.VectorCreate(ray_pt_up[1],midcrv)
                rs.MoveObject(i,vector)
                
            if ray_pt_down:
                vector = rs.VectorCreate(ray_pt_down[1],midcrv)
                rs.MoveObject(i,vector)  
        
        # deleate any created srf
        if isMesh == True:
            rs.DeleteObject(srf)
        rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="161b2a13-4700-4945-9dae-25c70928152b" bitmap_id="bd3a0457-e280-44b4-95ec-68bf6d152c4f">
      <text>
        <locale_1033>Macro</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Model Standard Australian DDA Ramps

import rhinoscriptsyntax as rs
import math as m

#Determin Unit system and scale m input to unit system scale and close if not mm, cm, m
def scale():
    system = rs.UnitSystem()
    if system == 2 or system == 3 or system == 4:
        scaleFactorDict = {2:1000, 3:100, 4:1}
        scaleFactor = scaleFactorDict[system]
        return scaleFactor

    if system != 2 or system != 3 or system != 4:
        return None

def main():
    if scale() == None:
        rs.MessageBox("This tool is can only be used in mm, cm or m model units")
        return None

    Mult = scale()
    pt00 = rs.GetPoint('Pick insertion point')
    
    if pt00:
    
    
        pt01 = rs.CreatePoint(pt00.X,pt00.Y)
        RampOptions = 'Step Ramp', 'Kerb Ramp', 'Ramp', 'Walkway'
        RampType = rs.PopupMenu(RampOptions)
    
        rs.EnableRedraw(False)
    
    
        if RampType == -1:
            exit()
    
        if RampType == 0: #Step Ramp
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.9*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)
    
        if RampType == 1: #Kerb Ramp
        #main ramp portion
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.52*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)
    
        if RampType == 2: #Ramp
            Grade = '1:19','1:18','1:17','1:16','1:15','1:14'
            Index = rs.PopupMenu(Grade)
            GradeNum = [19,18,17,16,15,14]
            if Index == 5:
                Rise = 9/(GradeNum[Index])
                Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+9*Mult),pt01.Y,pt01.Z),(pt01)])
                Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
                rs.CapPlanarHoles(Surface)
                rs.DeleteObject(Curve)
            elif Index != 5:
                Rise = 15/(GradeNum[Index])
                Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
                Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
                rs.CapPlanarHoles(Surface)
                rs.DeleteObject(Curve)
    
        if RampType == 3: #Walkway
            Grade = '1:33','1:32','1:31','1:30','1:29','1:28','1:27','1:26','1:25','1:24','1:23','1:22','1:21','1:20'
            Index = rs.PopupMenu(Grade)
            GradeNum = [33,32,31,30,29,28,27,26,25,24,23,22,21,20]
            if Index == 0:
                Rise = 25/(GradeNum[Index])
                Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+25*Mult),pt01.Y,pt01.Z),(pt01)])
                Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
                rs.CapPlanarHoles(Surface)
                rs.DeleteObject(Curve)
            if Index == 13:
                Rise = 15/(GradeNum[Index])
                Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
                Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
                rs.CapPlanarHoles(Surface)
                rs.DeleteObject(Curve)
            elif Index != 0 or Index != 13:
                Interp = m.floor((( GradeNum[Index] - 20)*(25 - 15)/(33 - 20))+15) #Linear interpolation of landing distance - DDA requirement...Srsly?
                Rise = Interp/(GradeNum[Index])
                Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+Interp*Mult),pt01.Y,pt01.Z),(pt01)])
                Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
                rs.CapPlanarHoles(Surface)
                rs.DeleteObject(Curve)
    
        rs.EnableRedraw(True)

main()
)</script>
    </macro_item>
    <macro_item guid="4055eaa6-4427-427c-b6a5-e6cdbac914c2" bitmap_id="4bec978a-dd98-4658-b848-0f810eefd6bf">
      <text>
        <locale_1033>Macro 05</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Patch Multiple Individual closed polylines
#By Thomas Chapman 04/22/2021

import rhinoscriptsyntax as rs

geo = rs.GetObjects('Select Closed Polylines',preselect=True)

if geo:
    
    uv1 = rs.GetInteger('enter number of UV divisions',number=1,minimum=1)

    rs.EnableRedraw(False)
    for objects in geo:
        rs.AddPatch((objects),(uv1,uv1),tolerance=0.0001)
    rs.EnableRedraw(True)


)</script>
    </macro_item>
    <macro_item guid="652506ee-7343-475c-a018-6ed9c0a76b29" bitmap_id="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676">
      <text>
        <locale_1033>Macro 06</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Isolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Isolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

# Get object and find layer it is on
obj = rs.GetObjects('select an object on the layer to isolate',preselect=True)

if obj:


    rs.EnableRedraw(False)

    # Create list of selected obj layers
    selectedlayers = []
    for i in obj:
        layer = rs.ObjectLayer(i)
        selectedlayers.append(layer)

    # Select all objects on each layer

    for i in selectedlayers:
        rs.ObjectsByLayer(i,True)
    isolate = rs.SelectedObjects()

    allObjects = rs.AllObjects()

    for i in isolate:
        allObjects.remove(i)

    # Hide selected objects

    rs.HideObjects(allObjects)

    rs.UnselectAllObjects()

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="87791b70-7cac-4efc-a5c4-deece16831aa" bitmap_id="7c225bac-4566-4c22-8529-19795734ecf8">
      <text>
        <locale_1033>Macro 07</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Unisolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Unisolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Unisolate All objects
#By Thomas Chapman 21/05/01

import rhinoscriptsyntax as rs

obj = rs.HiddenObjects()

if obj:

    rs.ShowObjects(obj)
)</script>
    </macro_item>
    <macro_item guid="96e93532-81ce-4156-b7f7-b7ff1364c489" bitmap_id="3a30ba51-3cf2-4d5a-ae4e-e7727296e181">
      <text>
        <locale_1033>Macro 08</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Turn Selected Object Layers Off</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Turn Selected Object Layers Off</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

obj = rs.GetObjects("select obj Layers to turn off")

if obj:

    rs.EnableRedraw(False)

    for i in obj:
        layer = rs.ObjectLayer(i)
        rs.LayerVisible(layer, visible=False)

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="d16957a9-f662-446d-9801-c0533fb38255" bitmap_id="5ecdbeb8-4c26-464d-965a-d29084b78338">
      <text>
        <locale_1033>Macro 09</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Plan View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Plan View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _T")

)</script>
    </macro_item>
    <macro_item guid="c047d19d-b398-41b0-9fd8-74fe11b70e04" bitmap_id="3f736f77-7940-4134-9713-dac547abd1c6">
      <text>
        <locale_1033>Macro 10</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Perspective View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Perspective View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _p")

)
</script>
    </macro_item>
    <macro_item guid="cfb1aa22-1db1-4869-b63d-8a0474245511" bitmap_id="c351dd99-b010-4a89-86fe-835dd645a1b8">
      <text>
        <locale_1033>Macro 11</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
import struct
import imghdr
import rhinoscriptsyntax as rs

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Check document units

#Determin Unit system and scale m input to unit system scale and close if not mm, cm, m
def scale():
    system = rs.UnitSystem()
    if system == 2 or system == 3 or system == 4:
        scaleFactorDict = {2:1000, 3:100, 4:1}
        scaleFactor = scaleFactorDict[system]
        return scaleFactor

    if system != 2 or system != 3 or system != 4:
        return None

def get_image_size(fname):
    '''Determine the image type of fhandle and return its size.
    from draco'''
    with open(fname, 'rb') as fhandle:
        head = fhandle.read(24)
        if len(head) != 24:
            return
        if imghdr.what(fname) == 'png':
            check = struct.unpack('&gt;i', head[4:8])[0]
            if check != 0x0d0a1a0a:
                return
            width, height = struct.unpack('&gt;ii', head[16:24])
        elif imghdr.what(fname) == 'gif':
            width, height = struct.unpack('&lt;HH', head[6:10])
        elif imghdr.what(fname) == 'jpeg':
            try:
                fhandle.seek(0) # Read 0xff next
                size = 2
                ftype = 0
                while not 0xc0 &lt;= ftype &lt;= 0xcf:
                    fhandle.seek(size, 1)
                    byte = fhandle.read(1)
                    while ord(byte) == 0xff:
                        byte = fhandle.read(1)
                    ftype = ord(byte)
                    size = struct.unpack('&gt;H', fhandle.read(2))[0] - 2
                # We are at a SOFn block
                fhandle.seek(1, 1)  # Skip `precision' byte.
                height, width = struct.unpack('&gt;HH', fhandle.read(4))
            except Exception: #IGNORE:W0703
                return
        else:
            return
        return width, height

def main():
    if scale() == None:
        rs.MessageBox("This tool is can only be used in mm, cm or m model units")
        return None
    
    factor = scale()
    
    #Find and open jgw file, extract scalefactor and x and y coordinates
    
    jgw = rs.OpenFileName(title= 'Select .JGW file',filter="JGW Files (*.JGW)|*.JGW||" )
    
    with open(jgw,'rt') as f:
        numslist = f.read().splitlines()
    
    scaleFactor01 = numslist[0]
    
    worldx = float(numslist[4])*int(factor)
    worldy = float(numslist[5])*int(factor)
    
    #Find and open jpg file, extract pixel size
    
    jpg = rs.OpenFileName(title= 'Select .JPG image File',filter="JPG Files (*.JPG)|*.JPG||")
    
    size = get_image_size(jpg)
    
    scaleFactor02 = (float(size[0])*int(factor))
    scaleFactor03 = (float(size[1])*int(factor))
    
    # Calculate scale factor
    
    scaleFactorWidth = (float(scaleFactor01))*(float(scaleFactor02))
    scaleFactorHeight = (float(scaleFactor01))*(float(scaleFactor03))
    
    origin = (float(worldx), (float(worldy) - float(scaleFactorHeight)), 0)
    
    picturePlane = rs.PlaneFromFrame(origin,(1,0,0),(0,1,0))
    
    rs.AddPictureFrame(picturePlane,jpg,width=(float(scaleFactorWidth)), height=(float(scaleFactorHeight)))

main()
)</script>
    </macro_item>
    <macro_item guid="63812035-1fa4-4e2a-8e3c-41fae14a9a2c" bitmap_id="5bb47664-de86-4b8e-88ce-835cfa2b3981">
      <text>
        <locale_1033>Macro 13</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Create Standard Layers</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Create Standard Layers</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Create Standard Layers

import rhinoscriptsyntax as rs
import random as r

#Add Layers to document

rs.EnableRedraw(False)

layerList = [
"L_BLDS", 
"L_BNDY_WRKS", 
"L_EDGE",
"L_HARD_ROCK",
"L_HARD_WALL",
"L_HARD_STEP",
"L_HARD_RAMP",
"L_HARD_FNCE",
"L_HARD_PAV1",
"L_HARD_PAV2",
"L_HARD_PAV3",
"L_HARD_PAV4",
"L_LGHT",
"L_ENTO",
"L_PLAY_EQUI",
"L_PLNT",
"L_STRU",
"L_TEXT",
"L_TREE_PROP",
"L_TREE_RETN",
"L_WALL",
"_L_WORKING",
"L_SOFT_GRDN",
"L_SOFT_MLCH",
"L_SOFT_LAWN",
"L_SOFT_PLANT",
"L_FURN",
"_L_OFF"


]



layerList.sort()

parentLayer = rs.AddLayer(name="LANDSCAPE", color=None, visible=True, locked=False, parent=None)

for layer in layerList:
    rs.AddLayer(layer,(r.randrange(255),r.randrange(255),r.randrange(255)),visible=True, locked=False, parent= parentLayer)

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="812b1c36-0e85-4b6c-9982-e2b575bf9c7b" bitmap_id="b54432f0-91ec-43b6-8b11-4a7654e19716">
      <text>
        <locale_1033>Macro 14</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Calculate Height difference between two points</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Calculate Height difference between two points</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

pt01 = rs.GetPoint('Select first point to measure from')
pt02 = rs.GetPoint('Select second point to measure to')

if pt02:

    pt01Z = pt01.Z
    pt02Z = pt02.Z

    height = abs(pt01Z-pt02Z)
    height = round(height, 3)

    rs.ClipboardText(height)

    rs.MessageBox(height, buttons=0, title="Height difference - Value copied to clipboard")
)</script>
    </macro_item>
    <macro_item guid="2f54edf0-21f1-40d0-9cfb-31f8276274ca" bitmap_id="d59a330a-0413-4632-9c5c-1d8f613a7bd0">
      <text>
        <locale_1033>Macro 15</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Rotate picture frames to face current camera view</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Rotate picture frames to face current camera view</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''
#Rotate picture frames to face camera

import rhinoscriptsyntax as rs

frames = rs.GetObjects("Select Picture Frames",filter=8,preselect=True)


#rotate surfaces around z axis towards camera point
if frames:

    cam = rs.ViewCamera()
    camz = (cam.X,cam.Y,0)
    world = rs.WorldXYPlane()
    angle = 1

    rs.EnableRedraw(False)

    for i in frames:
        angle = 1
        while angle &gt;= 1:
            
            #get mid point of surface and move to z 0
            pointmid = rs.SurfaceAreaCentroid(i)
            pointmidz = (pointmid[0].X,pointmid[0].Y,0)
            #Get center UV of surface
            domainU = rs.SurfaceDomain(i, 0)
            domainV = rs.SurfaceDomain(i, 1)
            u = domainU[1]/2.0
            v = domainV[1]/2.0
            #Get normal vector of surface and cam vector
            vec1 = rs.SurfaceNormal(i,(u,v))
            vec1 = vec1.X,vec1.Y,0
            vec2 = rs.VectorCreate(camz,pointmidz)
            #find angle difference between the two vectors
            angle = rs.VectorAngle(vec1,vec2)
            angle = round(angle)
            #Rotate Object
            rs.RotateObject(i,pointmidz,angle)
        continue

    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="650f2340-8c69-4456-84be-cdc45ddf12be" bitmap_id="8fa94ce8-b572-453c-8fec-ae23f13cb9ad">
      <text>
        <locale_1033>Macro 16</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Multi-Offset Closed Curves</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Multi-Offset Closed Curves</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''
#Multi Offset

import rhinoscriptsyntax as rs

obj = rs.GetObjects('Select Closed Curves for Offset',preselect=True)
bool = rs.GetBoolean('Offset Direction',('Direction','Inward','Outward'),(False))


if bool:
    bool = bool[0]
    offset = rs.GetReal('Distance to Offset')
    
    for i in obj:
        if rs.IsCurveClosed(i):
            if bool == False:
                pt = rs.CurveAreaCentroid(i)
                pt = pt[0]
                rs.OffsetCurve(i,pt,offset)
            if bool == True:
                pt = [1000000,1000000,1000000]
                rs.OffsetCurve(i,pt,offset)
)</script>
    </macro_item>
    <macro_item guid="89640668-abe2-45c1-9303-09a96c1466e8" bitmap_id="adf3520d-c901-4048-a55a-24d4466b0615">
      <text>
        <locale_1033>Macro 17</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Delete or hide selected objects not in the current view</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Delete or hide selected objects not in the current view</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Delete selected objects outside view cone


import rhinoscriptsyntax as rs

obj = rs.GetObjects('Select objects to test', preselect=True)
bool = rs.GetBoolean('Delete or Hide',('Option','Delete','Hide'),(False))


if obj:
    rs.EnableRedraw(False)
    
    for i in obj:
        
        isVisible = rs.IsVisibleInView(i)
        if isVisible == False:
            if bool[0] == True:
                rs.HideObject(i)
            if bool[0] == False:
                rs.DeleteObject(i)

rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="00485d86-6061-4967-b8a5-b52920e03baa" bitmap_id="61624676-c9c5-49bf-ad20-9aa2092d1576">
      <text>
        <locale_1033>Macro 18</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Relocate World coordinated drawing to rhino origin</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Relocate World coordinated drawing to rhino origin</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Truncate World Coordinate

import rhinoscriptsyntax as rs


#Get setout point
point = rs.GetPoint("Pick Point for World Coordinate value")

if point:
    rs.EnableRedraw(False)
    northing = round(point.Y,5)
    easting = round(point.X,5)

    #Add origin layer and lock it
    rs.AddLayer("_ORIGIN_",(255,0,0),visible=True,locked=True)
    originPoint = rs.AddPoint(point)

    #Move all objects to origin
    allObj = rs.AllObjects()
    vector = rs.VectorCreate((0,0,0),point)
    rs.MoveObjects(allObj,vector)

    #Draw origin marker`
    circle = rs.AddCircle(originPoint,1)
    quads = rs.EllipseQuadPoints(circle)
    line1 = rs.AddLine(quads[0],quads[1])
    line2 = rs.AddLine(quads[2],quads[3])

    #Draw text marker and designate a name
    text = rs.AddText((" E "+ str(easting) + " N " + str(northing)), originPoint, 0.5)
    rs.ObjectName(text, "_ORIGIN_TEXT_")
    rs.ObjectName(originPoint, "_ORIGIN_POINT_")

    #Move geometry to locked origin layer
    rs.ObjectLayer([circle, line1, line2, originPoint, text], "_ORIGIN_")
    
    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="b7943e02-c0c3-4bd4-af85-e859db81c052" bitmap_id="85a60542-9518-495a-80eb-1e3ee6470955">
      <text>
        <locale_1033>Macro 19</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Restore world coordinated drawing to world coordinates</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Restore world coordinated drawing to world coordinates</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Restore Origin

import rhinoscriptsyntax as rs

rs.EnableRedraw(False)

#retreive northing and easting from text object
obj = rs.ObjectsByName("_ORIGIN_TEXT_")
if obj:
    text = rs.TextObjectText(obj)
    textList = text.split()
    easting = float(textList[1])
    northing = float(textList[3])
    
    #create reference coordinates to make vector
    orPoint = (easting,northing,0)
    point = rs.PointCoordinates(rs.ObjectsByName("_ORIGIN_POINT_"))
    vector = rs.VectorCreate(orPoint,point)
    
    #move all objects back to original origin point
    allObj = rs.AllObjects()
    rs.MoveObjects(allObj,vector)
    
    #delete coordinate geometry
    isCurrent = rs.IsLayerCurrent("_ORIGIN_")
    if isCurrent == False:
        rs.PurgeLayer("_ORIGIN_")
    if isCurrent == True:
        defaultCheck = rs.IsLayer("Default")
        if defaultCheck == True:
            rs.CurrentLayer("Default")
            rs.PurgeLayer("_ORIGIN_")
        if defaultCheck == False:
            rs.AddLayer("Default")
            rs.CurrentLayer("Default")
            rs.PurgeLayer("_ORIGIN_")
    
    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="978e1959-d9a6-4142-8d86-6b21b079eaa6" bitmap_id="6e502bab-241b-4e5b-ab6e-45895a855e3d">
      <text>
        <locale_1033>Macro 20</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Get Coordinates</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Get Coordinates</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Get Coordinates

import rhinoscriptsyntax as rs

#Get point from user and round to nearest 3 decimal points
point = rs.GetPoint("Pick point to find Coordinate information")
pointX = round(point.X, 3)
pointY = round(point.Y, 3)
pointZ = round(point.Z, 3)

#store string in variable
coord = ("E " + str(pointX) + " N " + str(pointY) + " Z " + str(pointZ))

#Create textdot
rs.AddTextDot("E " + str(pointX) + " N " + str(pointY) + " Z " + str(pointZ),point)

#copy to clipboard
rs.ClipboardText(coord)
)</script>
    </macro_item>
    <macro_item guid="05291655-fced-47a7-a765-dc4637a8e6f2" bitmap_id="e665d72d-4470-43f1-9a74-a7f1a96e66ba">
      <text>
        <locale_1033>Macro 21</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Stair Generator</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Stair Generator</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
# Imports
import System
import Rhino.UI
import Eto.Drawing as drawing
import Eto.Forms as forms
import rhinoscriptsyntax as rs

################################################################################

# SampleEtoRoomNumber dialog class
class StairGenDialog(forms.Dialog[bool]):

    # Dialog box Class initializer
    def __init__(self):
        # Initialize dialog box
        self.Title = 'LandArchTools: Stair Generator'
        self.Padding = drawing.Padding(10)
        self.Resizable = False
        self.Closing += self.OnFormClosed
################################################################################
        
        # Create controls for the dialog
        #Stair gen label
        self.stairGenLabel = forms.Label(Text = 'STAIR GENERATOR')
        
        #Gen Handrail label
        self.genStairLabel = forms.Label(Text = 'Generate Stair?:')
        #Gen Handrail control
        self.genStairBool = forms.CheckBox()
        self.genStairBool.Checked = False
        self.genStairBool.CheckedChanged += self.stairGen
        
        #Number of Steps Label
        self.numStepsLabel = forms.Label(Text = 'Number of steps:')
        #Number of Steps control
        self.numStepsC = forms.NumericStepper()
        self.numStepsC.DecimalPlaces = 0
        self.numStepsC.Increment = 1
        self.numStepsC.MaxValue = 100
        self.numStepsC.MinValue = 2
        self.numStepsC.Value = 3
        self.numStepsC.ValueChanged += self.stairGen
        self.numStepsC.ValueChanged += self.handrailGen

        
        #Tread label
        self.treadLabel = forms.Label(Text = 'Tread (mm):')
        #Tread length control
        self.treadC = forms.NumericStepper()
        self.treadC.DecimalPlaces = 0
        self.treadC.Increment = 1
        self.treadC.MaxValue = 1000
        self.treadC.MinValue = 1
        self.treadC.Value = 300
        self.treadC.ValueChanged += self.stairGen
        self.treadC.ValueChanged += self.handrailGen
        
        #Riser Label
        self.riserLabel = forms.Label(Text = 'Riser (mm):')
        #Tread length control
        self.riserC = forms.NumericStepper()
        self.riserC.DecimalPlaces = 0
        self.riserC.Increment = 1
        self.riserC.MaxValue = 1000
        self.riserC.MinValue = 1
        self.riserC.Value = 150
        self.riserC.ValueChanged += self.stairGen
        self.riserC.ValueChanged += self.handrailGen
        
        #Flip label
        self.flipLabel = forms.Label(Text = 'Flip direction of stairs:')
        #Flip control
        self.flipC = forms.CheckBox()
        self.flipC.CheckedChanged += self.stairGen
        self.flipC.CheckedChanged += self.handrailGen
        
        ###########################################
        #Handrail Gen Label
        self.handrailGenLabel = forms.Label(Text = 'HANDRAIL GENERATOR')
        #self.handrailGenLabel.VerticalAlignment.Center
        
        #Gen Handrail label
        self.genHandrailLabel = forms.Label(Text = 'Generate Handrail?:')
        #Gen Handrail control
        self.genHandrailBool = forms.CheckBox()
        self.genHandrailBool.Checked = False
        self.genHandrailBool.CheckedChanged += self.handrailGen
        
        #Handrail Type Label
        self.handrailTypeLabel = forms.Label(Text = 'Handrail type:')
        #Handrail Type Dropdown
        self.handrailTypeC = forms.DropDown()
        self.handrailTypeC.DataStore = ['180 No Return', '180 Full Return', 'Ground Triangular Return', 'Ground Return', 'Wall Return']
        self.handrailTypeC.SelectedIndex = 0
        self.handrailTypeC.SelectedIndexChanged += self.handrailGen
        
        #Handrail Height Label
        self.handrailHeightLabel = forms.Label(Text = 'Handrail height (mm):')
        #Handrail Height control
        self.handrailHeightC = forms.NumericStepper()
        self.handrailHeightC.DecimalPlaces = 0
        self.handrailHeightC.Increment = 1
        self.handrailHeightC.MaxValue = 5000
        self.handrailHeightC.MinValue = 100
        self.handrailHeightC.Value = 900
        self.handrailHeightC.ValueChanged += self.handrailGen
        
        #Handrail offset label
        self.handrailOffsetLabel = forms.Label(Text = 'Handrail offset from edges (mm):')
        #Handrail offset control
        self.handrailOffsetC = forms.NumericStepper()
        self.handrailOffsetC.DecimalPlaces = 0
        self.handrailOffsetC.Increment = 1
        self.handrailOffsetC.MaxValue = 5000
        self.handrailOffsetC.MinValue = 50
        self.handrailOffsetC.Value = 150
        self.handrailOffsetC.ValueChanged += self.handrailGen
        
        #Handrail extension Label
        self.handrailExtensionLabel = forms.Label(Text = 'Handrail extension (mm):')
        #Handrail extension Control
        self.handrailExtensionC = forms.NumericStepper()
        self.handrailExtensionC.DecimalPlaces = 0
        self.handrailExtensionC.Increment = 1
        self.handrailExtensionC.MaxValue = 5000
        self.handrailExtensionC.MinValue = 300
        self.handrailExtensionC.Value = 300
        self.handrailExtensionC.ValueChanged += self.handrailGen
        
        #Handrail Diameter Label
        self.handrailDiameterLabel = forms.Label(Text = 'Handrail diameter (mm):')
        #Handrail Diameter control
        self.handrailDiameterC = forms.NumericStepper()
        self.handrailDiameterC.DecimalPlaces = 0
        self.handrailDiameterC.Increment = 1
        self.handrailDiameterC.MaxValue = 50
        self.handrailDiameterC.MinValue = 30
        self.handrailDiameterC.Value = 30
        self.handrailDiameterC.ValueChanged += self.handrailGen
        
        # Create the default button
        self.DefaultButton = forms.Button(Text = 'OK')
        self.DefaultButton.Click += self.OnOKButtonClick

        # Create the abort button
        self.AbortButton = forms.Button(Text = 'Cancel')
        self.AbortButton.Click += self.OnCloseButtonClick

################################################################################

        # Create a table layout and add all the controls
        layout = forms.DynamicLayout()
        layout.Spacing = drawing.Size(5, 5)

        layout.AddRow(None)
        layout.AddRow(self.stairGenLabel)
        layout.AddRow(None)
        layout.AddRow(None)
        layout.AddRow(self.genStairLabel, self.genStairBool)
        layout.AddRow(self.numStepsLabel, self.numStepsC)
        layout.AddRow(self.treadLabel, self.treadC)
        layout.AddRow(self.riserLabel, self.riserC)
        layout.AddRow(self.flipLabel, self.flipC)
        layout.AddRow(None)
        layout.AddRow(None)
        layout.AddRow(None)
        layout.AddRow(None)
        layout.AddRow(self.handrailGenLabel)
        layout.AddRow(None)
        layout.AddRow(None)
        layout.AddRow(self.genHandrailLabel, self.genHandrailBool)
        layout.AddRow(self.handrailTypeLabel, self.handrailTypeC)
        layout.AddRow(self.handrailHeightLabel, self.handrailHeightC)
        layout.AddRow(self.handrailOffsetLabel, self.handrailOffsetC)
        layout.AddRow(self.handrailExtensionLabel, self.handrailExtensionC)
        layout.AddRow(self.handrailDiameterLabel, self.handrailDiameterC)
        layout.AddRow(self.DefaultButton, self.AbortButton)
        
        # Set the dialog content
        self.Content = layout

################################################################################

    #Stair Generator Method
    def stairGen(self, sender, e):

        # Variables and defaults
        tread = int(self.treadC.Value) * scale
        riser = int(self.riserC.Value) * scale
        numSteps = int(self.numStepsC.Value)
        flip = self.flipC.Checked
        stairLength = tread * numSteps
        genStair = self.genStairBool.Checked
        curveList = []
        junkList = []

        #get user line for top width of stair
        
        rs.EnableRedraw(False)
        
        if genStair == False:
            iteration = rs.ObjectsByName("GdC9V&amp;^a^rGZZNgiWFH&amp;aTRQLLscu*9AZCmhk8t2!a")
            if iteration:
                rs.DeleteObject(iteration)
                rs.EnableRedraw(True)
                
        if genStair == True:
            #Delete any existing iteration
            iteration = rs.ObjectsByName("GdC9V&amp;^a^rGZZNgiWFH&amp;aTRQLLscu*9AZCmhk8t2!a")
            if iteration:
                rs.DeleteObject(iteration)
            
            topLine = rs.AddLine(line[0],line[1])
            topPoint = line[0]
            stepPoint = topPoint
            
            #get perp line - length of stair
            t = rs.CurveClosestPoint(topLine, topPoint)
            planeNormal = rs.CurveNormal(topLine)
            tangent = rs.CurveTangent(topLine, t)
            curveNormal = rs.VectorCrossProduct(planeNormal, tangent)
            
            # Get vector
            vectorRun = rs.VectorCreate(topPoint, topPoint + curveNormal * tread)
            
            # Bool flip direction of stair (add bool option in GUI)
            if flip == True:
                vector = rs.VectorReverse(vectorRun)
            else:
                vector = vectorRun
                
            # loop through number of steps to gen step curve
            for i in range(numSteps):
                pt01 = rs.AddPoint(stepPoint)
                pt02 = rs.CopyObject(pt01, vector)
                pt03 = rs.CopyObject(pt02, [0,0,riser*-1])
                curve = rs.AddPolyline([pt01,pt02,pt03])
                curveList.append(curve)
                stepPoint = rs.CurveEndPoint(curve)
                rs.DeleteObjects([pt01,pt02,pt03])
            
            # Extrude stair curve to full width
            joinedCurve = rs.JoinCurves(curveList)
            bottomPoint = rs.CopyObject(line[0], [0,0,(riser*numSteps)*-1])
            stairBottom = rs.CurveEndPoint(joinedCurve)
            curve = rs.AddPolyline([line[0],bottomPoint,stairBottom])
            handRailCurve = rs.AddCurve([bottomPoint,stairBottom]) #createhandrail curve and return it
            curveList.append(curve)
            joinedCurves = rs.JoinCurves(curveList)
            stair = rs.ExtrudeCurveStraight(joinedCurves, line[0], line[1])
            rs.CapPlanarHoles(stair)
            #this identifies the generated stair geometry
            rs.ObjectName(stair, "GdC9V&amp;^a^rGZZNgiWFH&amp;aTRQLLscu*9AZCmhk8t2!a") 
            
            # clean up leftover geometry
            junkList.extend([bottomPoint,joinedCurve,joinedCurves, topLine, handRailCurve])
            junkList = junkList + curveList
            rs.DeleteObjects(junkList)
        
            rs.EnableRedraw(True)

    # Handrail Generator Method
    # hType, curve, handrailOffset, tread, riser, numSteps, scale, vectorRun, hHeight, hEndLength, pipeDiameter,
    def handrailGen(self, sender, e):
        
        flip = self.flipC.Checked
        hType = self.handrailTypeC.SelectedIndex
        handrailOffset = int(self.handrailOffsetC.Value) * scale
        tread = int(self.treadC.Value) * scale
        riser = int(self.riserC.Value) * scale
        numSteps = int(self.numStepsC.Value)
        hEndLength = int(self.handrailExtensionC.Value) * scale
        pipeDiameter = int(self.handrailDiameterC.Value) * scale
        hHeight = int(self.handrailHeightC.Value) * scale
        topLine = rs.AddLine(line[0],line[1])
        rs.ObjectName(topLine, "BC6#DT5LCQX*#8r97Tquf5gNF")
        topPoint = line[0]
        genHandrail = self.genHandrailBool.Checked

        rs.EnableRedraw(False)
        if genHandrail == False:
            iteration = rs.ObjectsByName("qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
            if iteration:
                rs.DeleteObjects(iteration)
                rs.EnableRedraw(True)
                
        if genHandrail == True:
            #Delete any existing iteration
            iteration = rs.ObjectsByName("qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
            if iteration:
                rs.DeleteObjects(iteration)
            
            #get perp line - length of stair
            t = rs.CurveClosestPoint(topLine, topPoint)
            planeNormal = rs.CurveNormal(topLine)
            tangent = rs.CurveTangent(topLine, t)
            
            if flip == False:
                curveNormal = rs.VectorCrossProduct(planeNormal, tangent)
            else:
                curveNormal = rs.VectorReverse(rs.VectorCrossProduct(planeNormal, tangent))
            
            # Get guide curve
            scaledV = rs.VectorReverse(rs.VectorScale(curveNormal, tread*numSteps))
            ptGuide1 = rs.AddPoint(line[0])
            ptGuide2 = rs.CopyObject(ptGuide1, scaledV)
            rs.MoveObjects([ptGuide1, ptGuide2], [0,0,(riser*numSteps)*-1])
            curve = rs.AddCurve([ptGuide1, ptGuide2])
            
            #Get vector for step run
            vectorRun = rs.VectorCreate(topPoint, topPoint + curveNormal * tread)
            
            # Setup curves for handrail
            curve1 = curve
            curve2 = rs.MoveObject(rs.CopyObject(curve1, rs.VectorCreate(line[1], 
            rs.CurveStartPoint(curve1))), [0,0,(riser * numSteps)*-1])
            midPoint = rs.CurveMidPoint(userCurve)
            
            # Main slanted handrail curve
            pt1 = rs.MoveObject(rs.MoveObject(rs.CurveStartPoint(curve1), vectorRun), [0,0,hHeight + (riser*numSteps)])
            pt2 = rs.MoveObject(rs.MoveObject(rs.CurveEndPoint(curve1), vectorRun), [0,0,hHeight])
            mainCurve = rs.AddCurve([pt1, pt2])
            
            # Top leveled handrail curve at 300mm standard DDA
            pt3 = rs.CopyObject(pt1, rs.VectorReverse(rs.VectorScale(rs.VectorUnitize(vectorRun), hEndLength)))
            topCurve = rs.AddCurve([pt1, pt3])
            
            # Bottom leveled handrail curve at 300mm standard DDA
            pt4 = rs.CopyObject(pt2, rs.VectorScale(rs.VectorUnitize(vectorRun), hEndLength))
            bottomCurve = rs.AddCurve([pt2, pt4])
            
            # Start list of construction geometry for later cleanup
            hGeoList = [curve1, curve2, pt1, pt2, mainCurve, pt3, topCurve, pt4, bottomCurve, ptGuide1, ptGuide2, curve, topLine]
            
            # IF STATEMENTS FOR HANDRAIL TYPE
            
            # 1 180 degree, no return
            if hType == 0:
                
                # Lower Handrail return
                hpt1 = rs.CopyObject(pt4, [0,0,(pipeDiameter * 2)* -1])
                hpt2 = rs.MoveObject(rs.CopyObject(pt4, [0,0,pipeDiameter * -1]), rs.VectorScale(rs.VectorUnitize(vectorRun), pipeDiameter))
                lowerH = rs.AddArc3Pt(pt4, hpt1, hpt2)
                
                # Upper Handrail return
                hpt3 = rs.CopyObject(pt3, [0,0,(pipeDiameter * 2)* -1])
                hpt4 = rs.MoveObject(rs.CopyObject(pt3, [0,0,pipeDiameter * -1]), rs.VectorReverse(rs.VectorScale(rs.VectorUnitize(vectorRun), pipeDiameter)))
                upperH = rs.AddArc3Pt(pt3, hpt3, hpt4)
                
                # Draw leg upper
                lpt1 = rs.CurveMidPoint(topCurve)
                lpt2 = rs.CopyObject(lpt1, [0,0,hHeight*-1])
                lCurveUpper = rs.AddCurve([lpt1, lpt2])
                
                # Draw leg lower
                lpt3 = rs.CopyObject(pt2, [0,0,hHeight*-1])
                lCurveLower = rs.AddCurve([pt2,lpt3])
                
                # Make vectors to move handrails into place
                moveShort = rs.VectorScale(userVector, handrailOffset)
                moveLong = rs.VectorScale(userVector, rs.CurveLength(userCurve) - (handrailOffset*2))
                
                # Join, offset skeleton
                hCurve = rs.JoinCurves([mainCurve, topCurve, bottomCurve, lowerH, upperH])
                hCurve1 = rs.CopyObject(hCurve, moveShort)
                lCurveUpper1 = rs.CopyObject(lCurveUpper, moveShort)
                lCurveLower1 = rs.CopyObject(lCurveLower, moveShort)
                
                # Pipe skeleton
                pipe1 = rs.AddPipe(hCurve1,0, pipeDiameter/2,blend_type=0, cap = 1)
                pipe2 = rs.AddPipe(lCurveUpper1,0, pipeDiameter/2,blend_type=0, cap = 1)
                pipe3 = rs.AddPipe(lCurveLower1,0, pipeDiameter/2,blend_type=0, cap = 1)
                
                #form list of generated geo
                handrailGeo1 = [pipe1, pipe2, pipe3]

                # Name geo for deletion
                for i in handrailGeo1:
                    rs.ObjectName(i, "qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
                #copy
                handrailGeo2 = rs.CopyObjects(handrailGeo1, moveLong)
                
                # Cleanup construction linework
                hGeoList.extend([hpt1, hpt2, lowerH, hpt3, hpt4, upperH, lpt2, lpt3, lCurveLower, hCurve, hCurve1,
                lCurveUpper1, lCurveLower1, lCurveUpper])
                rs.DeleteObjects(hGeoList)
                
                rs.EnableRedraw(True)
        
            # 2 180 degree, full return
            if hType == 1:
                
                rs.EnableRedraw(False)
                
                # Lower handrail return
                hpt1 = rs.CopyObject(pt4, [0,0,(hEndLength/3)*-2])
                hpt2 = rs.CopyObject(pt2, [0,0,(hEndLength/3)*-2])
                hCurve11 = rs.AddPolyline([pt4, hpt1, hpt2])
                lowerH = rs.JoinCurves([bottomCurve, hCurve11])
                
                # Upper handrail return
                hpt3 = rs.CopyObject(pt3, [0,0,(hEndLength/3)*-2])
                hpt4 = rs.CopyObject(rs.CurveMidPoint(topCurve), [0,0,(hEndLength/3)*-2])
                hCurve2 = rs.AddPolyline([pt3, hpt3, hpt4])
                upperH = rs.JoinCurves([topCurve, hCurve2])
                
                # Draw leg upper
                lpt1 = rs.CurveMidPoint(topCurve)
                lpt2 = rs.CopyObject(lpt1, [0,0,hHeight*-1])
                lCurveUpper = rs.AddCurve([lpt1, lpt2])
                
                # Draw leg lower
                lpt3 = rs.CopyObject(pt2, [0,0,hHeight*-1])
                lCurveLower = rs.AddCurve([pt2,lpt3])
                
                # Make vectors to move handrails into place
                moveShort = rs.VectorScale(userVector, handrailOffset)
                moveLong = rs.VectorScale(userVector, rs.CurveLength(userCurve) - (handrailOffset*2))
                
                # Pipe skeleton move
                hCurve1 = rs.JoinCurves([lowerH, upperH, mainCurve])
                rs.MoveObjects([hCurve1, lCurveUpper, lCurveLower], moveShort)
                
                #Pipe
                pipe1 = rs.AddPipe(hCurve1,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe2 = rs.AddPipe(lCurveUpper,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe3 = rs.AddPipe(lCurveLower,0, pipeDiameter/2, blend_type=0, cap = 1)
                
                handrailGeo1 = [pipe1, pipe2, pipe3]

                # Name geo for deletion
                for i in handrailGeo1:
                    rs.ObjectName(i, "qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
                
                # Move and copy into position
                handrailGeo2 = rs.CopyObjects(handrailGeo1, moveLong)
                
                # Cleanup
                hGeoList.extend([hpt1, hpt2, hCurve11, lowerH, hpt3, hpt4, hCurve2, upperH, lpt2, lCurveUpper, lpt3,
                lCurveLower, hCurve1])
                rs.DeleteObjects(hGeoList)
                
                rs.EnableRedraw(True)
                
            # 3 Ground triangle return
            if hType == 2:
                
                rs.EnableRedraw(False)
                
                # Draw leg upper
                lpt1 = rs.CurveMidPoint(topCurve)
                lpt2 = rs.CopyObject(lpt1, [0,0,hHeight*-1])
                lCurveUpper = rs.AddCurve([lpt1, lpt2])
                
                # Draw leg lower
                lpt3 = rs.CopyObject(pt2, [0,0,hHeight*-1])
                lCurveLower = rs.AddCurve([pt2,lpt3])
                
                # Lower Return
                lowerH = rs.AddCurve([pt4, lpt3])
                
                # Upper Return
                upperH = rs.AddCurve([pt3, lpt2])
                
                # Make vectors to move handrails into place
                moveShort = rs.VectorScale(userVector, handrailOffset)
                moveLong = rs.VectorScale(userVector, rs.CurveLength(userCurve) - (handrailOffset*2))
                
                # Join Curves and move
                hCurve = rs.JoinCurves([mainCurve, topCurve, bottomCurve, lowerH, upperH])
                rs.MoveObjects([hCurve, lCurveUpper, lCurveLower], moveShort)
                
                # pipe
                pipe1 = rs.AddPipe(hCurve,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe2 = rs.AddPipe(lCurveUpper,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe3 = rs.AddPipe(lCurveLower,0, pipeDiameter/2, blend_type=0, cap = 1)
                
                handrailGeo1 = [pipe1, pipe2, pipe3]
                
                # Name geo for deletion
                for i in handrailGeo1:
                    rs.ObjectName(i, "qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
                
                # move and copy into place
                handrailGeo2 = rs.CopyObjects(handrailGeo1, moveLong)
                
                # Cleanup
                hGeoList.extend([lpt2, lCurveUpper, lpt3, lCurveLower, lowerH, upperH, hCurve, topLine])
                rs.DeleteObjects(hGeoList)
                
                rs.EnableRedraw(True)
                
            # 4 Ground return
            
            if hType == 3:
                
                rs.EnableRedraw(False)
                
                # Draw leg upper
                lpt1 = rs.CurveMidPoint(topCurve)
                lpt2 = rs.CopyObject(lpt1, [0,0,hHeight*-1])
                lCurveUpper = rs.AddCurve([lpt1, lpt2])
                
                # Draw leg lower
                lpt3 = rs.CopyObject(pt2, [0,0,hHeight*-1])
                lCurveLower = rs.AddCurve([pt2,lpt3])
                
                # Lower Return
                hpt1 = rs.CopyObject(pt4, [0,0,hHeight*-1])
                hCurve1 = rs.AddCurve([pt4, hpt1])
                
                # Upper Return
                hpt2 = rs.CopyObject(pt3, [0,0,hHeight*-1])
                hCurve2 = rs.AddCurve([pt3, hpt2])
                
                # Join curves
                hCurve = rs.JoinCurves([mainCurve, topCurve, bottomCurve, hCurve1, hCurve2])
                
                # Get Vectors
                moveShort = rs.VectorScale(userVector, handrailOffset)
                moveLong = rs.VectorScale(userVector, rs.CurveLength(userCurve) - (handrailOffset*2))
                
                #move
                rs.MoveObjects([hCurve, lCurveUpper, lCurveLower], moveShort)
                
                # Pipe
                pipe1 = rs.AddPipe(hCurve,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe2 = rs.AddPipe(lCurveUpper,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe3 = rs.AddPipe(lCurveLower,0, pipeDiameter/2, blend_type=0, cap = 1)
                
                handrailGeo1 = [pipe1, pipe2, pipe3]
                
                # Name geo for deletion
                for i in handrailGeo1:
                    rs.ObjectName(i, "qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
                    
                # move and copy into place
                handrailGeo2 = rs.CopyObjects(handrailGeo1, moveLong)
                
                # Clean up
                hGeoList.extend([lpt2, lCurveUpper, lpt3, lCurveLower, hpt1, hCurve1, hpt2, hCurve2, hCurve, topLine])
                rs.DeleteObjects(hGeoList)
                
                rs.EnableRedraw(True)
        
            # 5 Wall return
            if hType == 4:
                
                rs.EnableRedraw(False)
                
                # Draw leg upper
                lpt1 = rs.CurveMidPoint(topCurve)
                lpt2 = rs.CopyObject(lpt1, [0,0,hHeight*-1])
                lCurveUpper = rs.AddCurve([lpt1, lpt2])
                
                # Draw leg lower
                lpt3 = rs.CopyObject(pt2, [0,0,hHeight*-1])
                lCurveLower = rs.AddCurve([pt2,lpt3])
                
                #get vectors
                vector1 =  rs.VectorScale(rs.VectorUnitize(rs.VectorReverse(userVector)), handrailOffset)
                vector2 = rs.VectorScale(userVector, rs.CurveLength(userCurve))
                
                # Lower Return
                hpt1 = rs.CopyObject(pt4, vector1)
                hCurve1 = rs.AddCurve([pt4, hpt1])
                
                # Upper Return
                hpt2 = rs.CopyObject(pt3, vector1)
                hCurve2 = rs.AddCurve([pt3, hpt2])
                
                # Join main curves
                hCurveMain1 = rs.JoinCurves([mainCurve, topCurve, bottomCurve])
                
                # Get Vectors
                moveShort = rs.VectorScale(userVector, handrailOffset)
                moveLong = rs.VectorScale(userVector, rs.CurveLength(userCurve) - handrailOffset)
                
                # Copy hanrail 2
                hCurveMain2 = rs.CopyObject(hCurveMain1, moveLong)
                hCurve3 = rs.CopyObject(hCurve1, vector2)
                hCurve4 = rs.CopyObject(hCurve2, vector2)
                lCurveUpper2 = rs.CopyObject(lCurveUpper, moveLong)
                lCurveLower2 = rs.CopyObject(lCurveLower, moveLong)
                
                # Join curves
                hCurveJoined1 = rs.JoinCurves([hCurve1, hCurve2, hCurveMain1])
                hCurveJoined2 = rs.JoinCurves([hCurveMain2, hCurve3, hCurve4,])
                
                # Pipe
                pipe1 = rs.AddPipe(hCurveJoined1,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe2 = rs.AddPipe(lCurveLower,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe3 = rs.AddPipe(lCurveUpper,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe4 = rs.AddPipe(hCurveJoined2,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe5 = rs.AddPipe(lCurveUpper2,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe6 = rs.AddPipe(lCurveLower2,0, pipeDiameter/2, blend_type=0, cap = 1)
                
                handrailGeo1 = [pipe1, pipe2, pipe3, pipe3, pipe4, pipe5, pipe6]
                
                # Name geo for deletion
                for i in handrailGeo1:
                    rs.ObjectName(i, "qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
                
                # Move handrail 1 into place
                rs.MoveObjects([pipe1, pipe2, pipe3], moveShort)
                
                # Cleanup
                hGeoList.extend([lpt2, lCurveUpper, lpt3, lCurveLower, hpt1, hCurve1, hpt2, hCurve2, hCurveMain1, hCurveMain2, hCurve3,
                hCurve4, lCurveUpper2, lCurveLower2, hCurveJoined1, hCurveJoined2])
                rs.DeleteObjects(hGeoList)
                
                rs.EnableRedraw(True)

    # Close button click handler
    def OnCloseButtonClick(self, sender, e):
        generatedStair = rs.ObjectsByName("GdC9V&amp;^a^rGZZNgiWFH&amp;aTRQLLscu*9AZCmhk8t2!a")
        generatedHandrail = rs.ObjectsByName("qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
        rs.DeleteObjects(rs.ObjectsByName("xAbJgNV6^bz6azN&amp;6E$Q^WeX$Dd^vygCz5z7Hmynb5"))
        rs.DeleteObjects(rs.ObjectsByName("BC6#DT5LCQX*#8r97Tquf5gNF"))
        if generatedStair:
            rs.DeleteObject(generatedStair)
        if generatedHandrail:
            rs.DeleteObjects(generatedHandrail)
        self.Close(False)

    # close x button handler
    def OnFormClosed(self, sender, e):
        generatedStair = rs.ObjectsByName("GdC9V&amp;^a^rGZZNgiWFH&amp;aTRQLLscu*9AZCmhk8t2!a")
        generatedHandrail = rs.ObjectsByName("qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
        rs.DeleteObjects(rs.ObjectsByName("xAbJgNV6^bz6azN&amp;6E$Q^WeX$Dd^vygCz5z7Hmynb5"))
        rs.DeleteObjects(rs.ObjectsByName("BC6#DT5LCQX*#8r97Tquf5gNF"))
        if generatedStair:
            rs.DeleteObject(generatedStair)
        if generatedHandrail:
            rs.DeleteObjects(generatedHandrail)
        self.Close(False)

    # OK button click handler
    def OnOKButtonClick(self, sender, e):
        #remove object name to avoid deletion
        generatedStair = rs.ObjectsByName("GdC9V&amp;^a^rGZZNgiWFH&amp;aTRQLLscu*9AZCmhk8t2!a")
        generatedHandrail = rs.ObjectsByName("qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
        rs.DeleteObjects(rs.ObjectsByName("xAbJgNV6^bz6azN&amp;6E$Q^WeX$Dd^vygCz5z7Hmynb5"))
        rs.DeleteObjects(rs.ObjectsByName("BC6#DT5LCQX*#8r97Tquf5gNF"))
        if generatedStair:
            rs.ObjectName(generatedStair, name="www.landarchtools.com")
        if generatedHandrail:
            rs.ObjectName(generatedHandrail, name="www.landarchtools.com")

        self.Close(True)


################################################################################

#Get scale factor and abort if not in mm cm or m
system = rs.UnitSystem()
if system == 2 or system == 3 or system == 4:
    scaleFactorDict = {2:1, 3:0.1, 4:0.001}
    scaleFactor = scaleFactorDict[system]
    scale = scaleFactor
else:
    rs.MessageBox("change document to use mm, cm or m")
    exit()

#Get stair width
line = rs.GetLine(mode=1,message1="Pick two points to define top step width")
line[1].Z = line[0].Z
userCurve = rs.AddLine([line[0].X, line[0].Y, line[0].Z], [line[1].X, line[1].Y, line[0].Z])
userVector = rs.VectorUnitize(rs.VectorCreate((line[1].X, line[1].Y, line[0].Z), (line[0].X, line[0].Y, line[0].Z)))
rs.ObjectName(userCurve, "xAbJgNV6^bz6azN&amp;6E$Q^WeX$Dd^vygCz5z7Hmynb5")

# The script that will be using the dialog.
def RequestStairGen(): # This will call the eto form and assign it as a daughter window of rhino
    dialog = StairGenDialog(); # sets the ETO form to dialog variable
    rc = dialog.ShowModal(Rhino.UI.RhinoEtoApp.MainWindow) # Launches UI as modal daughter of rhino window


################################################################################

RequestStairGen()
)</script>
    </macro_item>
    <macro_item guid="6beb1246-fc82-4dfc-bb54-1188098f1029" bitmap_id="0c6dcc76-9701-40e5-a9cb-b791cf15160c">
      <text>
        <locale_1033>Macro 22</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Grade Curve</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Grade Curve</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#GRADE CURVE 

import rhinoscriptsyntax as rs

def scale():
    system = rs.UnitSystem()
    if system == 2 or system == 3 or system == 4:
        scaleFactorDict = {2:1, 3:100, 4:1000}
        scaleFactor = scaleFactorDict[system]
        return scaleFactor

    if system != 2 or system != 3 or system != 4:
        return None


def main():
    #If system is not metric, bail.
    if scale() == None:
        rs.MessageBox("This tool can only be used in mm, cm or m model units")
        return None
    
    #Set Variables
    crv = rs.GetObject(message="Get object to grade", filter=4, preselect=True, select=False, custom_filter=None, subobjects=False)
    if not crv: return
    grade = rs.GetReal(message="Enter grade number", number=20, minimum=0.001, maximum=None)
    if not grade: return
    
    rs.EnableRedraw(False)
    
    #FIND LENGTH OF CURVE AT EACH GRIP POINT
    rs.EnableObjectGrips(crv)
    ctrlPts = rs.ObjectGripLocations(crv)
    crvLengths = []
    startParam = rs.CurveClosestPoint(crv, ctrlPts[0])
    
    for i in ctrlPts:
        paramNum = rs.CurveClosestPoint(crv, i)
        CL = (rs.CurveLength(crv, sub_domain=[startParam ,paramNum]))
        crvLengths.append(CL)
    
    #FIND GRADED Z HEIGHT OF GRIP POINT
    gripHeights = []
    for i in crvLengths:
        rise = i / grade
        gripHeights.append(rise)
    
    #EDIT GRIP POINTS WITH NEW Z VALUE
    newGrips = []
    gripIndex = 0
    for i in ctrlPts:
        newPt = (i.X,i.Y,(i.Z+gripHeights[gripIndex]))
        newGrips.append(newPt)
        gripIndex = gripIndex + 1
    
    #MODIFY CURVE TO ENTERED GRADE
    rs.CopyObject(crv)
    grips = rs.ObjectGripLocations(crv, newGrips)
    rs.EnableObjectGrips(crv, enable=False)
    
    rs.EnableRedraw(True)

#Run Script
main()

)</script>
    </macro_item>
  </macros>
  <bitmaps>
    <small_bitmap item_width="16" item_height="16">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap_item guid="b54432f0-91ec-43b6-8b11-4a7654e19716" index="16" />
      <bitmap_item guid="d59a330a-0413-4632-9c5c-1d8f613a7bd0" index="17" />
      <bitmap_item guid="8fa94ce8-b572-453c-8fec-ae23f13cb9ad" index="18" />
      <bitmap_item guid="adf3520d-c901-4048-a55a-24d4466b0615" index="19" />
      <bitmap_item guid="61624676-c9c5-49bf-ad20-9aa2092d1576" index="20" />
      <bitmap_item guid="85a60542-9518-495a-80eb-1e3ee6470955" index="21" />
      <bitmap_item guid="6e502bab-241b-4e5b-ab6e-45895a855e3d" index="22" />
      <bitmap_item guid="e665d72d-4470-43f1-9a74-a7f1a96e66ba" index="23" />
      <bitmap_item guid="0c6dcc76-9701-40e5-a9cb-b791cf15160c" index="24" />
      <bitmap>iVBORw0KGgoAAAANSUhEUgAAABAAAAGQCAYAAACnNOANAAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAOwgAADsIBFShKgAAAAhdJREFUeF7t0zFoE1EYwPGHqBRXBcFZ3FQcRMHNwV13F5UuuhW6CI3W
XmuG6tDGqBV1UGkFB6EWjlZrI2ixFjVpYkrcHEqGomA1hXD3ed9d3vPaVFBcOvx/8JHLd+/77t17
7wwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbBah6T0YGC/XNL2fGsZraOi15vRea1g7MZmOaFA+KgjE
eLJR6L3A9N3Usa2yRFLcNx1uG5Cg46qEWwfaijWn9/U6etD0mib6ZL2x5PlS/VyT0Yl5qe++5or1
ujD1Xr7cfeVyOpO4ODTeATtt22C8VJXRp3OyvGtQlncOSteDN1Ku1WSxXJVgRzZuoDXxmkSdhm1X
28BG942CdOdmJDtbdrnvJ+6nZuHlTNN4FZsonnsiQ3MVF2fG3srZKHpeL7hc6fRj10B3xzRM5qdN
BFv6JZvx5dTkxzhsA/s/e8mPx9jxusVrGtgmK3uuy7fDt+XrsTtyOftcuvKFOMZPPnLjNOIG6Vew
0YwW7sfREWnsz8cz6HxZlPMzJbkQ/ZaP3/s9Tl8hvYg2VvcOyUr09NV9w9L5cFamyotuEZf6fTcu
XsT0Nm4UxUO3xJ+vJNu4UJX6xWdx3m2jsgfpT/HuyIhMfqhIvWfC5dxBUslRvvIiXbQ+wu3RUW4d
8bajrJImf/Mx6WzXFafpmuji/PPnDAAAAAAAAAAAAAAAAAD/xZhf5mBA7ngIX6YAAAAASUVORK5C
YII=</bitmap>
    </small_bitmap>
    <normal_bitmap item_width="24" item_height="24">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap_item guid="b54432f0-91ec-43b6-8b11-4a7654e19716" index="16" />
      <bitmap_item guid="d59a330a-0413-4632-9c5c-1d8f613a7bd0" index="17" />
      <bitmap_item guid="8fa94ce8-b572-453c-8fec-ae23f13cb9ad" index="18" />
      <bitmap_item guid="adf3520d-c901-4048-a55a-24d4466b0615" index="19" />
      <bitmap_item guid="61624676-c9c5-49bf-ad20-9aa2092d1576" index="20" />
      <bitmap_item guid="85a60542-9518-495a-80eb-1e3ee6470955" index="21" />
      <bitmap_item guid="6e502bab-241b-4e5b-ab6e-45895a855e3d" index="22" />
      <bitmap_item guid="e665d72d-4470-43f1-9a74-a7f1a96e66ba" index="23" />
      <bitmap_item guid="0c6dcc76-9701-40e5-a9cb-b791cf15160c" index="24" />
      <bitmap>iVBORw0KGgoAAAANSUhEUgAAABgAAAJYCAYAAAB4sCa9AAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAOwgAADsIBFShKgAAABHJJREFUeF7t1G1MVmUcx/H7FhAECUzJlEJxKYoK6pRiWNZUTBNWaiAo
glKsObVNUlPUfFHTFJXMpXPLEDUVQS1nNh+ZtsyHHpZNXU174XrUcio+IfDrf3EjuhZGyxe++H62
73a4z3WuP+fccDwAAAAAAAAAAAAA7m/+1ihrSN1P91j/1oHBZVMHpmhsQuJ1P49nhX3W1Xfq/4kK
8PMrSu3W49yBlwuk0n2q2nVEW/Pn6ekOXc/a+RlWm7qV/1G4NSmpQ+cfVqe9our5JdLiUmmpZUN0
8Lgub9mrwoxcxUW0P2Zr0yz3CP+V10pv3+rBikXDRuv3eSulonJp4XppwVrJDXprjfSODdpyQDp0
UqdXlWraM6m1Qf7+H9u1A+t2uYuWQV7vnt4R7bUxJ7+2pnCD/dZl0tvrfANuNd8q2Skd/V5Xd36h
otF5tTFhreXn8a6p36dRLeODwzcv69RPY9pFVeXE971WMXGutGSzVLjx9l2s3yPt/1obpy64md4z
4UZ+9/hruwanqbnXb239Po0KiQ0O2/R576H6NSmjdvnDfW8MDI++8mrCsGtnZi3zDVq8SZ9NWVST
lfDk9RGPdKrclpZ9U6vKdCZ3muz6Yt82jbMBoaW74wfrUv/Muo7HDqqeYxsNjexy8f1RWdffePb5
quGRkRdXJqZU/rZwVY3Kd0ufHNSJSbObNCC4e2D45r1xyfqzf4Z+SnxR55PSdSFptI7EJl/tFBRS
mRfV69KPL0y4qZlLpRUbVFOwRFq9RSemzG3agB6BoWX7bcCF+gGun62qp8YqIyJax1LHSy/NUU32
66oeO03VOTOkD7bqxOQmDugZHFq+P97uIOn2ANdle1xpER114LksaUKBqrNs8zH5qs6dJRVvswFz
mjbA/orKK3o1YcC46XYHr/kGrN2uk018RCHxIa22H+ozzL7gJgxwd5Ftj6iwWKdzp7sB63zbNC40
zD9gR9FjCXVf7kXb1D3/xgbUus1zZ+tK9nStTBziBrzn2+buHm/u9ZZkRrS7sSdusA3J0DkbVvm3
ARpvj8aqGJKpUVHR571e77t2bYxvi3+Wbd35rh/eMaDFvvxHY/Vdv1TVDhinzLbROpySI+XN06kR
ecqO6VPT1l7jtjbJd0mdAVau7/C2MOuwdcly/+69Lce9VSfGtQg/VRyTqJERHbQjOU3Ln0hWt5at
jtq5dKuFW2j6WCXWBeuk1cxq0MP6xXLP0TXZulNUgMc7P7CZ3+WuoW3O2pUz7bMHfKcaTLFuXf+H
1dFqkGJ9ZS2w3PvdvXrdbUZYd3KPItZ32MCtcWs/sr60FlkHrVSrQVvr1sQulvvCjlvfWJ9ay60C
a4zlvqvZ9Z/ttNyab61lVmfLaWdF+g4b95A1wnrT2mC533B3fe74Q8udG2m5tfdEkBXoOwQAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAA3P88nr8AcosxCEvfR4EAAAAASUVORK5CYII=</bitmap>
    </normal_bitmap>
    <large_bitmap item_width="32" item_height="32">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap_item guid="b54432f0-91ec-43b6-8b11-4a7654e19716" index="16" />
      <bitmap_item guid="d59a330a-0413-4632-9c5c-1d8f613a7bd0" index="17" />
      <bitmap_item guid="8fa94ce8-b572-453c-8fec-ae23f13cb9ad" index="18" />
      <bitmap_item guid="adf3520d-c901-4048-a55a-24d4466b0615" index="19" />
      <bitmap_item guid="61624676-c9c5-49bf-ad20-9aa2092d1576" index="20" />
      <bitmap_item guid="85a60542-9518-495a-80eb-1e3ee6470955" index="21" />
      <bitmap_item guid="6e502bab-241b-4e5b-ab6e-45895a855e3d" index="22" />
      <bitmap_item guid="e665d72d-4470-43f1-9a74-a7f1a96e66ba" index="23" />
      <bitmap_item guid="0c6dcc76-9701-40e5-a9cb-b791cf15160c" index="24" />
      <bitmap>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
YII=</bitmap>
    </large_bitmap>
  </bitmaps>
  <scripts />
</RhinoUI>