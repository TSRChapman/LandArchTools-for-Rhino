<?xml version="1.0" encoding="utf-8"?>
<RhinoUI major_ver="3" minor_ver="0" guid="0804c739-59c2-4cd7-86d9-ddaf63e97340" localize="False" default_language_id="1033" dpi_scale="100">
  <extend_rhino_menus>
    <menu guid="d58ceae7-fdb0-4104-80da-274b94ad44a9">
      <text>
        <locale_1033>Extend Rhino Menus</locale_1033>
      </text>
    </menu>
  </extend_rhino_menus>
  <menus />
  <tool_bar_groups>
    <tool_bar_group guid="1067bebe-88d0-4b21-ab8b-9c9b8b4860e0" dock_bar_guid32="00000000-0000-0000-0000-000000000000" dock_bar_guid64="764b7a3c-c626-4771-bff3-c47aa63fd0b1" active_tool_bar_group="d51f71b9-4a55-481d-a2ed-9bbc51b0bc7e" single_file="False" hide_single_tab="False" point_floating="1199,369">
      <text>
        <locale_1033>LandArchTools</locale_1033>
      </text>
      <tool_bar_group_item guid="d51f71b9-4a55-481d-a2ed-9bbc51b0bc7e" major_version="1" minor_version="1">
        <text>
          <locale_1033>LandArchTools</locale_1033>
        </text>
        <tool_bar_id>d8dc19cb-56d8-4f50-b015-76d6b2e6fb1f</tool_bar_id>
      </tool_bar_group_item>
      <dock_bar_info dpi_scale="100" dock_bar="False" docking="True" horz="False" visible="True" floating="True" mru_float_style="8192" bar_id="59473" mru_width="868" point_pos="-2,-2" float_point="1199,369" rect_mru_dock_pos="0,0,0,0" dock_location_u="59419" dock_location="top" float_size="777,62" />
    </tool_bar_group>
  </tool_bar_groups>
  <tool_bars>
    <tool_bar guid="d8dc19cb-56d8-4f50-b015-76d6b2e6fb1f" bitmap_id="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb">
      <text>
        <locale_1033>LandArchTools</locale_1033>
      </text>
      <tool_bar_item guid="bcc9156a-6e1d-4be5-8f0e-7bfcfc3e4f0c">
        <left_macro_id>5bb60bb6-b5e1-4cf6-b207-2aa05bd6bf0f</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="49c53416-e30d-414d-a4e3-f9daca5032dc">
        <left_macro_id>ba483181-ff75-4d51-9bba-974118b80da5</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2f4946a0-eb09-4882-aecb-284bc226419e">
        <left_macro_id>812b1c36-0e85-4b6c-9982-e2b575bf9c7b</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="e021088f-3f01-4ec2-b7f8-7e141567db90">
        <left_macro_id>4211923b-f22f-4ab1-8745-e05f836d0bf8</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="3c553441-e8b2-4259-9aae-3907facf4694">
        <left_macro_id>6beb1246-fc82-4dfc-bb54-1188098f1029</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="70198725-314c-45f3-be45-e35fdd8208df">
        <left_macro_id>ef338e36-b652-464e-9f92-9d8c746720f3</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="eef8629f-6a85-4738-8531-046c164ab354">
        <left_macro_id>5a023420-191b-433d-9347-d6221ccc57d3</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="c1155d88-0d72-4cd3-a0e2-7a23baa8f8d1">
        <left_macro_id>c4df9c08-dfb5-4ff9-a629-7d6192f2ec4f</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="73e33de0-b307-41c7-b2cf-7058df45f707">
        <left_macro_id>2f54edf0-21f1-40d0-9cfb-31f8276274ca</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="7e3ac271-33ec-4c9d-95df-0f279a9766bf">
        <left_macro_id>89640668-abe2-45c1-9303-09a96c1466e8</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9f05992f-75c6-4360-8a00-5412592b1130">
        <left_macro_id>d1ca3149-4600-4d59-891a-116db286a114</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="b0604b6e-f847-447f-9448-ad2e691dc93a">
        <left_macro_id>9403536b-930f-44c0-9a77-6c4f6122bc9e</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9d56baae-f374-4ee4-8917-a3170cadab27">
        <left_macro_id>161b2a13-4700-4945-9dae-25c70928152b</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="7d72bb3e-1647-4aea-b42b-f69fcedf7f4d">
        <left_macro_id>05291655-fced-47a7-a765-dc4637a8e6f2</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="6721b51f-7913-4c8c-98f8-e432ec106cd3">
        <left_macro_id>262cf1b5-9f4d-4363-8b21-c33e11c83f7b</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="5598f291-9102-4785-ad1f-89305c097143">
        <left_macro_id>4055eaa6-4427-427c-b6a5-e6cdbac914c2</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="59e8d235-d308-4e12-8984-461790c354b8">
        <left_macro_id>650f2340-8c69-4456-84be-cdc45ddf12be</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="31d82a86-c02b-4786-9489-884129774c95">
        <left_macro_id>652506ee-7343-475c-a018-6ed9c0a76b29</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="1c7275d2-d2bb-4582-835c-2dc2ea64040d">
        <left_macro_id>87791b70-7cac-4efc-a5c4-deece16831aa</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9b1ad1b4-64b4-46ff-a3b6-2df1205041f4">
        <left_macro_id>96e93532-81ce-4156-b7f7-b7ff1364c489</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="0c1a0eb2-86c5-4735-a356-9ab261bf6b7c">
        <left_macro_id>d16957a9-f662-446d-9801-c0533fb38255</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2dce03e3-13e1-4b50-a92c-2f59b9947d33">
        <left_macro_id>c047d19d-b398-41b0-9fd8-74fe11b70e04</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="135b9233-ad6d-4ea1-b6b8-967e3eb44a41">
        <left_macro_id>cfb1aa22-1db1-4869-b63d-8a0474245511</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="c99e2c9d-6eca-4bb1-b6ed-a1bc76f32a53">
        <left_macro_id>978e1959-d9a6-4142-8d86-6b21b079eaa6</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="8f524430-3fa1-4122-b71c-bdb05bc6ac7e">
        <left_macro_id>00485d86-6061-4967-b8a5-b52920e03baa</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2f572106-b4a8-40ad-883d-b7e4c17ba136">
        <left_macro_id>b7943e02-c0c3-4bd4-af85-e859db81c052</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2d5840f3-4ba6-4be7-b14d-725b51e62bb2">
        <left_macro_id>63812035-1fa4-4e2a-8e3c-41fae14a9a2c</left_macro_id>
      </tool_bar_item>
    </tool_bar>
  </tool_bars>
  <macros>
    <macro_item guid="5bb60bb6-b5e1-4cf6-b207-2aa05bd6bf0f" bitmap_id="f9c5b694-dced-4977-a15f-92d9fff043bc">
      <text>
        <locale_1033>Macro 00</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Calculate grade between two points</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Calculate grade between two points</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Calculate grade between two given points
#By Thomas Chapman on 11/01/2021

import rhinoscriptsyntax as rs
import math as m

#Determin Unit system and scale m input to unit system scale and close if not mm, cm, m
def scale():
    system = rs.UnitSystem()
    if system == 2 or system == 3 or system == 4:
        scaleFactorDict = {2:1000, 3:100, 4:1}
        scaleFactor = scaleFactorDict[system]
        return scaleFactor

    if system != 2 or system != 3 or system != 4:
        return None

def main():
    if scale() == None:
        rs.MessageBox("This tool is can only be used in mm, cm or m model units")
        return None
    
    # Get points from user
    pt1 = rs.GetPoint('Pick the first point')
    pt2 = rs.GetPoint('Pick the second point')
    
    if pt2:
        rs.EnableRedraw(False)
        hypotenuse = rs.Distance(pt1, pt2)
    
        # Find the rise of given points in any order
        if pt1.Z == pt2.Z:
            return None
        if pt1.Z &gt; pt2.Z:
            rise = pt1.Z - pt2.Z
        elif pt1.Z &lt; pt2.Z:
            rise = pt2.Z - pt1.Z
    
        # Find the run of given points
        run = m.sqrt(hypotenuse**2 - rise**2)
    
        # Detect model units and scale to mm, if mm do nothing
        rise = rise*scale()
        run = run*scale()
    
        # Calculate grade based on rise and run
        try:
            grade = run / rise
    
        except ZeroDivisionError:
            print('No Grade Found')
            exit()
    
        # Print text dot to screen
        curve = rs.AddCurve([pt1,pt2])
        midpoint = rs.CurveMidPoint(curve)
        rs.DeleteObject(curve)
        rs.AddTextDot('1:' + str(abs(round(grade,2))),midpoint)
        rs.EnableRedraw(True)

main()
)</script>
    </macro_item>
    <macro_item guid="ba483181-ff75-4d51-9bba-974118b80da5" bitmap_id="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92">
      <text>
        <locale_1033>Macro 02</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Display the RL of a given point</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Display the RL of a given point</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''


# Show RL of specified point and copy to clipboard
# By Thomas Chapman on 01/10/2021

import rhinoscriptsyntax as rs
import os

def scale():
    system = rs.UnitSystem()
    if system == 2 or system == 3 or system == 4:
        scaleFactorDict = {2:0.001, 3:0.01, 4:1}
        scaleFactor = scaleFactorDict[system]
        return scaleFactor

    if system != 2 or system != 3 or system != 4:
        return None

def main():
    if scale() == None:
        rs.MessageBox("This tool is can only be used in mm, cm or m model units")
        return None
        
    point = rs.GetPoint('Select point')
    
    if point:
        pointZ = point.Z
    pointZ = pointZ*scale()
    rs.AddTextDot('+RL ' + str(round(pointZ,3)),point)
    
    #Copy RL to Clipboard
    RL = str(round(pointZ,3))
    rs.ClipboardText(RL)

main()
)</script>
    </macro_item>
    <macro_item guid="4211923b-f22f-4ab1-8745-e05f836d0bf8" bitmap_id="8a465cae-79a9-4baa-b77e-ef3d92b27f3c">
      <text>
        <locale_1033>Macro 03</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

# MOVE OBJECT TO SPECIFIED RL
# BY THOMAS CHAPMAN ON 01/10/2021

import rhinoscriptsyntax as rs
import Rhino.Geometry as geo


#Determin Unit system and scale m input to unit system scale and close if not mm, cm, m
def scale():
    system = rs.UnitSystem()
    if system == 2 or system == 3 or system == 4:
        scaleFactorDict = {2:1000, 3:100, 4:1}
        scaleFactor = scaleFactorDict[system]
        return scaleFactor

    if system != 2 or system != 3 or system != 4:
        return None



def main():

    if scale() == None:
        rs.MessageBox("This tool is can only be used in mm, cm or m model units")
        return None

    obj = rs.GetObjects('Select objects',preselect=True)
    if obj:
        current = rs.GetPoint('Select point')
        
        if current: 
            rl = rs.GetString('RL to move to?')
            rl = float(rl)
            rl = rl*scale()
            
            if rl == 0.000: #move objects to the 0 coord
                target3 = current.Z
                if target3:
                    target3 = target3 *-1
                    target4 = geo.Point3d(0,0,target3)
                    rs.MoveObject(obj, target4)
    
            elif rl &gt; 0.000:
                target = rl - current.Z #+ or - number to target location
                target2 = geo.Point3d(0,0,target) #translated vector needed to hit target
                rs.MoveObject(obj, target2)

main ()
)</script>
    </macro_item>
    <macro_item guid="ef338e36-b652-464e-9f92-9d8c746720f3" bitmap_id="bca0a23f-5397-475b-9a42-1ef72c11f863">
      <text>
        <locale_1033>Macro 01</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#RANDOM ROTATE BLOCK INSTANCES AROUND INSERTION POINT
#BY THOMAS CHAPMAN ON 01/09/2021

import rhinoscriptsyntax as rs
import random as r

vec = rs.VectorCreate([0,0,1],[0,0,0])
obj = rs.GetObjects('pick Blocks to rotate randomly', filter=4096, preselect=True)

if obj:
    rs.EnableRedraw(False)

    for object in obj:
        num = r.randrange(-180,180)
        point = rs.BlockInstanceInsertPoint(object)
        rs.RotateObject(object, point, num, vec)

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="5a023420-191b-433d-9347-d6221ccc57d3" bitmap_id="f3c1fd4a-470f-412b-98a3-4374e134c963">
      <text>
        <locale_1033>Macro 12</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Random Drop Block</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Random Drop Block</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs
import random as r


obj = rs.GetObjects('Pick blocks to drop randomly', filter=4096, preselect=True)
dropnum = rs.GetReal("Enter max drop distance")

if obj:
    rs.EnableRedraw(False)

    for object in obj:
        num = r.uniform((-abs(dropnum)),0)
        print num
        vec = rs.VectorCreate([0,0,num],[0,0,0])
        point = rs.BlockInstanceInsertPoint(object)
        rs.MoveObject(object,vec)

    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="d1ca3149-4600-4d59-891a-116db286a114" bitmap_id="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24">
      <text>
        <locale_1033>Macro 04</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#DROP OBJECTS TO SELECTED SRF    


import rhinoscriptsyntax as rs

obj = rs.GetObjects('Select Objects',rs.filter.curve | rs.filter.instance | rs.filter.mesh | rs.filter.surface | rs.filter.subd | rs.filter.light | rs.filter.polysurface,preselect=True)
srf = rs.GetObject ('Select Surface')

if obj:
    if srf:
        
        rs.EnableRedraw(False)
        
        # Check if srf is a mesh, if so convert to Nurb
        isMesh = rs.IsMesh(srf)
        if isMesh == True: 
            srf  = rs.MeshToNurb(srf)
        
        # For each object send test rays up and down in Z coord
        # Move each object to the ray test that hits a srf
        for i in obj:
            bndBox = rs.BoundingBox(i)
            pt1 = bndBox[0]
            pt2 = bndBox[2]
            crv = rs.AddLine(pt1,pt2)
            
            if crv:
                midcrv = rs.CurveMidPoint(crv)
                rs.DeleteObject(crv)
                
            ray_pt_up = rs.ShootRay(srf,midcrv,(0,0,1),reflections=1)
            ray_pt_down = rs.ShootRay(srf,midcrv,(0,0,-1),reflections=1)
            
            if ray_pt_up:
                vector = rs.VectorCreate(ray_pt_up[1],midcrv)
                rs.MoveObject(i,vector)
                
            if ray_pt_down:
                vector = rs.VectorCreate(ray_pt_down[1],midcrv)
                rs.MoveObject(i,vector)  
        
        # deleate any created srf
        if isMesh == True:
            rs.DeleteObject(srf)
        rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="161b2a13-4700-4945-9dae-25c70928152b" bitmap_id="bd3a0457-e280-44b4-95ec-68bf6d152c4f">
      <text>
        <locale_1033>Macro</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Model Standard Australian DDA Ramps

import rhinoscriptsyntax as rs
import math as m

#Determin Unit system and scale m input to unit system scale and close if not mm, cm, m
def scale():
    system = rs.UnitSystem()
    if system == 2 or system == 3 or system == 4:
        scaleFactorDict = {2:1000, 3:100, 4:1}
        scaleFactor = scaleFactorDict[system]
        return scaleFactor

    if system != 2 or system != 3 or system != 4:
        return None

def main():
    if scale() == None:
        rs.MessageBox("This tool is can only be used in mm, cm or m model units")
        return None

    Mult = scale()
    pt00 = rs.GetPoint('Pick insertion point')
    
    if pt00:
    
    
        pt01 = rs.CreatePoint(pt00.X,pt00.Y)
        RampOptions = 'Step Ramp', 'Kerb Ramp', 'Ramp', 'Walkway'
        RampType = rs.PopupMenu(RampOptions)
    
        rs.EnableRedraw(False)
    
    
        if RampType == -1:
            exit()
    
        if RampType == 0: #Step Ramp
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.9*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)
    
        if RampType == 1: #Kerb Ramp
        #main ramp portion
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.52*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)
    
        if RampType == 2: #Ramp
            Grade = '1:19','1:18','1:17','1:16','1:15','1:14'
            Index = rs.PopupMenu(Grade)
            GradeNum = [19,18,17,16,15,14]
            if Index == 5:
                Rise = 9/(GradeNum[Index])
                Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+9*Mult),pt01.Y,pt01.Z),(pt01)])
                Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
                rs.CapPlanarHoles(Surface)
                rs.DeleteObject(Curve)
            elif Index != 5:
                Rise = 15/(GradeNum[Index])
                Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
                Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
                rs.CapPlanarHoles(Surface)
                rs.DeleteObject(Curve)
    
        if RampType == 3: #Walkway
            Grade = '1:33','1:32','1:31','1:30','1:29','1:28','1:27','1:26','1:25','1:24','1:23','1:22','1:21','1:20'
            Index = rs.PopupMenu(Grade)
            GradeNum = [33,32,31,30,29,28,27,26,25,24,23,22,21,20]
            if Index == 0:
                Rise = 25/(GradeNum[Index])
                Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+25*Mult),pt01.Y,pt01.Z),(pt01)])
                Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
                rs.CapPlanarHoles(Surface)
                rs.DeleteObject(Curve)
            if Index == 13:
                Rise = 15/(GradeNum[Index])
                Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
                Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
                rs.CapPlanarHoles(Surface)
                rs.DeleteObject(Curve)
            elif Index != 0 or Index != 13:
                Interp = m.floor((( GradeNum[Index] - 20)*(25 - 15)/(33 - 20))+15) #Linear interpolation of landing distance - DDA requirement...Srsly?
                Rise = Interp/(GradeNum[Index])
                Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+Interp*Mult),pt01.Y,pt01.Z),(pt01)])
                Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
                rs.CapPlanarHoles(Surface)
                rs.DeleteObject(Curve)
    
        rs.EnableRedraw(True)

main()
)</script>
    </macro_item>
    <macro_item guid="4055eaa6-4427-427c-b6a5-e6cdbac914c2" bitmap_id="4bec978a-dd98-4658-b848-0f810eefd6bf">
      <text>
        <locale_1033>Macro 05</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Patch Multiple Individual closed polylines
#By Thomas Chapman 04/22/2021

import rhinoscriptsyntax as rs

geo = rs.GetObjects('Select Closed Polylines',preselect=True)

if geo:
    
    uv1 = rs.GetInteger('enter number of UV divisions',number=1,minimum=1)

    rs.EnableRedraw(False)
    for objects in geo:
        rs.AddPatch((objects),(uv1,uv1),tolerance=0.0001)
    rs.EnableRedraw(True)


)</script>
    </macro_item>
    <macro_item guid="652506ee-7343-475c-a018-6ed9c0a76b29" bitmap_id="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676">
      <text>
        <locale_1033>Macro 06</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Isolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Isolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

# Get object and find layer it is on
obj = rs.GetObjects('select an object on the layer to isolate',preselect=True)

if obj:


    rs.EnableRedraw(False)

    # Create list of selected obj layers
    selectedlayers = []
    for i in obj:
        layer = rs.ObjectLayer(i)
        selectedlayers.append(layer)

    # Select all objects on each layer

    for i in selectedlayers:
        rs.ObjectsByLayer(i,True)
    isolate = rs.SelectedObjects()

    allObjects = rs.AllObjects()

    for i in isolate:
        allObjects.remove(i)

    # Hide selected objects

    rs.HideObjects(allObjects)

    rs.UnselectAllObjects()

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="87791b70-7cac-4efc-a5c4-deece16831aa" bitmap_id="7c225bac-4566-4c22-8529-19795734ecf8">
      <text>
        <locale_1033>Macro 07</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Unisolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Unisolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Unisolate All objects
#By Thomas Chapman 21/05/01

import rhinoscriptsyntax as rs

obj = rs.HiddenObjects()

if obj:

    rs.ShowObjects(obj)
)</script>
    </macro_item>
    <macro_item guid="96e93532-81ce-4156-b7f7-b7ff1364c489" bitmap_id="3a30ba51-3cf2-4d5a-ae4e-e7727296e181">
      <text>
        <locale_1033>Macro 08</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Turn Selected Object Layers Off</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Turn Selected Object Layers Off</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

obj = rs.GetObjects("select obj Layers to turn off")

if obj:

    rs.EnableRedraw(False)

    for i in obj:
        layer = rs.ObjectLayer(i)
        rs.LayerVisible(layer, visible=False)

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="d16957a9-f662-446d-9801-c0533fb38255" bitmap_id="5ecdbeb8-4c26-464d-965a-d29084b78338">
      <text>
        <locale_1033>Macro 09</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Plan View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Plan View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _T")

)</script>
    </macro_item>
    <macro_item guid="c047d19d-b398-41b0-9fd8-74fe11b70e04" bitmap_id="3f736f77-7940-4134-9713-dac547abd1c6">
      <text>
        <locale_1033>Macro 10</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Perspective View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Perspective View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _p")

)
</script>
    </macro_item>
    <macro_item guid="cfb1aa22-1db1-4869-b63d-8a0474245511" bitmap_id="c351dd99-b010-4a89-86fe-835dd645a1b8">
      <text>
        <locale_1033>Macro 11</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
import struct
import imghdr
import rhinoscriptsyntax as rs

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Check document units

#Determin Unit system and scale m input to unit system scale and close if not mm, cm, m
def scale():
    system = rs.UnitSystem()
    if system == 2 or system == 3 or system == 4:
        scaleFactorDict = {2:1000, 3:100, 4:1}
        scaleFactor = scaleFactorDict[system]
        return scaleFactor

    if system != 2 or system != 3 or system != 4:
        return None

def get_image_size(fname):
    '''Determine the image type of fhandle and return its size.
    from draco'''
    with open(fname, 'rb') as fhandle:
        head = fhandle.read(24)
        if len(head) != 24:
            return
        if imghdr.what(fname) == 'png':
            check = struct.unpack('&gt;i', head[4:8])[0]
            if check != 0x0d0a1a0a:
                return
            width, height = struct.unpack('&gt;ii', head[16:24])
        elif imghdr.what(fname) == 'gif':
            width, height = struct.unpack('&lt;HH', head[6:10])
        elif imghdr.what(fname) == 'jpeg':
            try:
                fhandle.seek(0) # Read 0xff next
                size = 2
                ftype = 0
                while not 0xc0 &lt;= ftype &lt;= 0xcf:
                    fhandle.seek(size, 1)
                    byte = fhandle.read(1)
                    while ord(byte) == 0xff:
                        byte = fhandle.read(1)
                    ftype = ord(byte)
                    size = struct.unpack('&gt;H', fhandle.read(2))[0] - 2
                # We are at a SOFn block
                fhandle.seek(1, 1)  # Skip `precision' byte.
                height, width = struct.unpack('&gt;HH', fhandle.read(4))
            except Exception: #IGNORE:W0703
                return
        else:
            return
        return width, height

def main():
    if scale() == None:
        rs.MessageBox("This tool is can only be used in mm, cm or m model units")
        return None
    
    factor = scale()
    
    #Find and open jgw file, extract scalefactor and x and y coordinates
    
    jgw = rs.OpenFileName(title= 'Select .JGW file',filter="JGW Files (*.JGW)|*.JGW||" )
    
    with open(jgw,'rt') as f:
        numslist = f.read().splitlines()
    
    scaleFactor01 = numslist[0]
    
    worldx = float(numslist[4])*int(factor)
    worldy = float(numslist[5])*int(factor)
    
    #Find and open jpg file, extract pixel size
    
    jpg = rs.OpenFileName(title= 'Select .JPG image File',filter="JPG Files (*.JPG)|*.JPG||")
    
    size = get_image_size(jpg)
    
    scaleFactor02 = (float(size[0])*int(factor))
    scaleFactor03 = (float(size[1])*int(factor))
    
    # Calculate scale factor
    
    scaleFactorWidth = (float(scaleFactor01))*(float(scaleFactor02))
    scaleFactorHeight = (float(scaleFactor01))*(float(scaleFactor03))
    
    origin = (float(worldx), (float(worldy) - float(scaleFactorHeight)), 0)
    
    picturePlane = rs.PlaneFromFrame(origin,(1,0,0),(0,1,0))
    
    rs.AddPictureFrame(picturePlane,jpg,width=(float(scaleFactorWidth)), height=(float(scaleFactorHeight)))

main()
)</script>
    </macro_item>
    <macro_item guid="63812035-1fa4-4e2a-8e3c-41fae14a9a2c" bitmap_id="5bb47664-de86-4b8e-88ce-835cfa2b3981">
      <text>
        <locale_1033>Macro 13</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Create Standard Layers</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Create Standard Layers</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Create Standard Layers

import rhinoscriptsyntax as rs
import random as r

#Add Layers to document

rs.EnableRedraw(False)

layerList = [
"L_BLDS", 
"L_BNDY_WRKS", 
"L_EDGE",
"L_HARD_ROCK",
"L_HARD_WALL",
"L_HARD_STEP",
"L_HARD_RAMP",
"L_HARD_FNCE",
"L_HARD_PAV1",
"L_HARD_PAV2",
"L_HARD_PAV3",
"L_HARD_PAV4",
"L_LGHT",
"L_ENTO",
"L_PLAY_EQUI",
"L_PLNT",
"L_STRU",
"L_TEXT",
"L_TREE_PROP",
"L_TREE_RETN",
"L_WALL",
"_L_WORKING",
"L_SOFT_GRDN",
"L_SOFT_MLCH",
"L_SOFT_LAWN",
"L_SOFT_PLANT",
"L_FURN",
"_L_OFF"


]



layerList.sort()

parentLayer = rs.AddLayer(name="LANDSCAPE", color=None, visible=True, locked=False, parent=None)

for layer in layerList:
    rs.AddLayer(layer,(r.randrange(255),r.randrange(255),r.randrange(255)),visible=True, locked=False, parent= parentLayer)

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="812b1c36-0e85-4b6c-9982-e2b575bf9c7b" bitmap_id="b54432f0-91ec-43b6-8b11-4a7654e19716">
      <text>
        <locale_1033>Macro 14</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Calculate Height difference between two points</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Calculate Height difference between two points</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

pt01 = rs.GetPoint('Select first point to measure from')
pt02 = rs.GetPoint('Select second point to measure to')

if pt02:

    pt01Z = pt01.Z
    pt02Z = pt02.Z

    height = abs(pt01Z-pt02Z)
    height = round(height, 3)

    rs.ClipboardText(height)

    rs.MessageBox(height, buttons=0, title="Height difference - Value copied to clipboard")
)</script>
    </macro_item>
    <macro_item guid="2f54edf0-21f1-40d0-9cfb-31f8276274ca" bitmap_id="d59a330a-0413-4632-9c5c-1d8f613a7bd0">
      <text>
        <locale_1033>Macro 15</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Rotate picture frames to face current camera view</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Rotate picture frames to face current camera view</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''
#Rotate picture frames to face camera

import rhinoscriptsyntax as rs

frames = rs.GetObjects("Select Picture Frames",filter=8,preselect=True)


#rotate surfaces around z axis towards camera point
if frames:

    cam = rs.ViewCamera()
    camz = (cam.X,cam.Y,0)
    world = rs.WorldXYPlane()
    angle = 1

    rs.EnableRedraw(False)

    for i in frames:
        angle = 1
        while angle &gt;= 1:
            
            #get mid point of surface and move to z 0
            pointmid = rs.SurfaceAreaCentroid(i)
            pointmidz = (pointmid[0].X,pointmid[0].Y,0)
            #Get center UV of surface
            domainU = rs.SurfaceDomain(i, 0)
            domainV = rs.SurfaceDomain(i, 1)
            u = domainU[1]/2.0
            v = domainV[1]/2.0
            #Get normal vector of surface and cam vector
            vec1 = rs.SurfaceNormal(i,(u,v))
            vec1 = vec1.X,vec1.Y,0
            vec2 = rs.VectorCreate(camz,pointmidz)
            #find angle difference between the two vectors
            angle = rs.VectorAngle(vec1,vec2)
            angle = round(angle)
            #Rotate Object
            rs.RotateObject(i,pointmidz,angle)
        continue

    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="650f2340-8c69-4456-84be-cdc45ddf12be" bitmap_id="8fa94ce8-b572-453c-8fec-ae23f13cb9ad">
      <text>
        <locale_1033>Macro 16</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Multi-Offset Closed Curves</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Multi-Offset Closed Curves</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''
#Multi Offset

import rhinoscriptsyntax as rs

obj = rs.GetObjects('Select Closed Curves for Offset',preselect=True)
bool = rs.GetBoolean('Offset Direction',('Direction','Inward','Outward'),(False))


if bool:
    bool = bool[0]
    offset = rs.GetReal('Distance to Offset')
    
    for i in obj:
        if rs.IsCurveClosed(i):
            if bool == False:
                pt = rs.CurveAreaCentroid(i)
                pt = pt[0]
                rs.OffsetCurve(i,pt,offset)
            if bool == True:
                pt = [1000000,1000000,1000000]
                rs.OffsetCurve(i,pt,offset)
)</script>
    </macro_item>
    <macro_item guid="89640668-abe2-45c1-9303-09a96c1466e8" bitmap_id="adf3520d-c901-4048-a55a-24d4466b0615">
      <text>
        <locale_1033>Macro 17</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Delete or hide selected objects not in the current view</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Delete or hide selected objects not in the current view</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Delete selected objects outside view cone


import rhinoscriptsyntax as rs

obj = rs.GetObjects('Select objects to test', preselect=True)
bool = rs.GetBoolean('Delete or Hide',('Option','Delete','Hide'),(False))


if obj:
    rs.EnableRedraw(False)
    
    for i in obj:
        
        isVisible = rs.IsVisibleInView(i)
        if isVisible == False:
            if bool[0] == True:
                rs.HideObject(i)
            if bool[0] == False:
                rs.DeleteObject(i)

rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="00485d86-6061-4967-b8a5-b52920e03baa" bitmap_id="61624676-c9c5-49bf-ad20-9aa2092d1576">
      <text>
        <locale_1033>Macro 18</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Relocate World coordinated drawing to rhino origin</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Relocate World coordinated drawing to rhino origin</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Truncate World Coordinate

import rhinoscriptsyntax as rs


#Get setout point
point = rs.GetPoint("Pick Point for World Coordinate value")

if point:
    rs.EnableRedraw(False)
    northing = round(point.Y,5)
    easting = round(point.X,5)

    #Add origin layer and lock it
    rs.AddLayer("_ORIGIN_",(255,0,0),visible=True,locked=True)
    originPoint = rs.AddPoint(point)

    #Move all objects to origin
    allObj = rs.AllObjects()
    vector = rs.VectorCreate((0,0,0),point)
    rs.MoveObjects(allObj,vector)

    #Draw origin marker`
    circle = rs.AddCircle(originPoint,1)
    quads = rs.EllipseQuadPoints(circle)
    line1 = rs.AddLine(quads[0],quads[1])
    line2 = rs.AddLine(quads[2],quads[3])

    #Draw text marker and designate a name
    text = rs.AddText((" E "+ str(easting) + " N " + str(northing)), originPoint, 0.5)
    rs.ObjectName(text, "_ORIGIN_TEXT_")
    rs.ObjectName(originPoint, "_ORIGIN_POINT_")

    #Move geometry to locked origin layer
    rs.ObjectLayer([circle, line1, line2, originPoint, text], "_ORIGIN_")
    
    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="b7943e02-c0c3-4bd4-af85-e859db81c052" bitmap_id="85a60542-9518-495a-80eb-1e3ee6470955">
      <text>
        <locale_1033>Macro 19</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Restore world coordinated drawing to world coordinates</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Restore world coordinated drawing to world coordinates</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Restore Origin

import rhinoscriptsyntax as rs

rs.EnableRedraw(False)

#retreive northing and easting from text object
obj = rs.ObjectsByName("_ORIGIN_TEXT_")
if obj:
    text = rs.TextObjectText(obj)
    textList = text.split()
    easting = float(textList[1])
    northing = float(textList[3])
    
    #create reference coordinates to make vector
    orPoint = (easting,northing,0)
    point = rs.PointCoordinates(rs.ObjectsByName("_ORIGIN_POINT_"))
    vector = rs.VectorCreate(orPoint,point)
    
    #move all objects back to original origin point
    allObj = rs.AllObjects()
    rs.MoveObjects(allObj,vector)
    
    #delete coordinate geometry
    isCurrent = rs.IsLayerCurrent("_ORIGIN_")
    if isCurrent == False:
        rs.PurgeLayer("_ORIGIN_")
    if isCurrent == True:
        defaultCheck = rs.IsLayer("Default")
        if defaultCheck == True:
            rs.CurrentLayer("Default")
            rs.PurgeLayer("_ORIGIN_")
        if defaultCheck == False:
            rs.AddLayer("Default")
            rs.CurrentLayer("Default")
            rs.PurgeLayer("_ORIGIN_")
    
    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="978e1959-d9a6-4142-8d86-6b21b079eaa6" bitmap_id="6e502bab-241b-4e5b-ab6e-45895a855e3d">
      <text>
        <locale_1033>Macro 20</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Get Coordinates</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Get Coordinates</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Get Coordinates

import rhinoscriptsyntax as rs

#Get point from user and round to nearest 3 decimal points
point = rs.GetPoint("Pick point to find Coordinate information")
pointX = round(point.X, 3)
pointY = round(point.Y, 3)
pointZ = round(point.Z, 3)

#store string in variable
coord = ("E " + str(pointX) + " N " + str(pointY) + " Z " + str(pointZ))

#Create textdot
rs.AddTextDot("E " + str(pointX) + " N " + str(pointY) + " Z " + str(pointZ),point)

#copy to clipboard
rs.ClipboardText(coord)
)</script>
    </macro_item>
    <macro_item guid="05291655-fced-47a7-a765-dc4637a8e6f2" bitmap_id="e665d72d-4470-43f1-9a74-a7f1a96e66ba">
      <text>
        <locale_1033>Macro 21</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Stair Generator</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Stair Generator</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
# Imports
import System
import Rhino.UI
import Eto.Drawing as drawing
import Eto.Forms as forms
import rhinoscriptsyntax as rs

################################################################################

# SampleEtoRoomNumber dialog class
class StairGenDialog(forms.Dialog[bool]):

    # Dialog box Class initializer
    def __init__(self):
        # Initialize dialog box
        self.Title = 'LandArchTools: Stair Generator'
        self.Padding = drawing.Padding(10)
        self.Resizable = False
        self.Closing += self.OnFormClosed
################################################################################
        
        # Create controls for the dialog
        #Stair gen label
        self.stairGenLabel = forms.Label(Text = 'STAIR GENERATOR')
        
        #Gen Handrail label
        self.genStairLabel = forms.Label(Text = 'Generate Stair?:')
        #Gen Handrail control
        self.genStairBool = forms.CheckBox()
        self.genStairBool.Checked = False
        self.genStairBool.CheckedChanged += self.stairGen
        
        #Number of Steps Label
        self.numStepsLabel = forms.Label(Text = 'Number of steps:')
        #Number of Steps control
        self.numStepsC = forms.NumericStepper()
        self.numStepsC.DecimalPlaces = 0
        self.numStepsC.Increment = 1
        self.numStepsC.MaxValue = 100
        self.numStepsC.MinValue = 2
        self.numStepsC.Value = 3
        self.numStepsC.ValueChanged += self.stairGen
        self.numStepsC.ValueChanged += self.handrailGen

        
        #Tread label
        self.treadLabel = forms.Label(Text = 'Tread (mm):')
        #Tread length control
        self.treadC = forms.NumericStepper()
        self.treadC.DecimalPlaces = 0
        self.treadC.Increment = 1
        self.treadC.MaxValue = 1000
        self.treadC.MinValue = 1
        self.treadC.Value = 300
        self.treadC.ValueChanged += self.stairGen
        self.treadC.ValueChanged += self.handrailGen
        
        #Riser Label
        self.riserLabel = forms.Label(Text = 'Riser (mm):')
        #Tread length control
        self.riserC = forms.NumericStepper()
        self.riserC.DecimalPlaces = 0
        self.riserC.Increment = 1
        self.riserC.MaxValue = 1000
        self.riserC.MinValue = 1
        self.riserC.Value = 150
        self.riserC.ValueChanged += self.stairGen
        self.riserC.ValueChanged += self.handrailGen
        
        #Flip label
        self.flipLabel = forms.Label(Text = 'Flip direction of stairs:')
        #Flip control
        self.flipC = forms.CheckBox()
        self.flipC.CheckedChanged += self.stairGen
        self.flipC.CheckedChanged += self.handrailGen
        
        ###########################################
        #Handrail Gen Label
        self.handrailGenLabel = forms.Label(Text = 'HANDRAIL GENERATOR')
        #self.handrailGenLabel.VerticalAlignment.Center
        
        #Gen Handrail label
        self.genHandrailLabel = forms.Label(Text = 'Generate Handrail?:')
        #Gen Handrail control
        self.genHandrailBool = forms.CheckBox()
        self.genHandrailBool.Checked = False
        self.genHandrailBool.CheckedChanged += self.handrailGen
        
        #Handrail Type Label
        self.handrailTypeLabel = forms.Label(Text = 'Handrail type:')
        #Handrail Type Dropdown
        self.handrailTypeC = forms.DropDown()
        self.handrailTypeC.DataStore = ['180 No Return', '180 Full Return', 'Ground Triangular Return', 'Ground Return', 'Wall Return']
        self.handrailTypeC.SelectedIndex = 0
        self.handrailTypeC.SelectedIndexChanged += self.handrailGen
        
        #Handrail Height Label
        self.handrailHeightLabel = forms.Label(Text = 'Handrail height (mm):')
        #Handrail Height control
        self.handrailHeightC = forms.NumericStepper()
        self.handrailHeightC.DecimalPlaces = 0
        self.handrailHeightC.Increment = 1
        self.handrailHeightC.MaxValue = 5000
        self.handrailHeightC.MinValue = 100
        self.handrailHeightC.Value = 900
        self.handrailHeightC.ValueChanged += self.handrailGen
        
        #Handrail offset label
        self.handrailOffsetLabel = forms.Label(Text = 'Handrail offset from edges (mm):')
        #Handrail offset control
        self.handrailOffsetC = forms.NumericStepper()
        self.handrailOffsetC.DecimalPlaces = 0
        self.handrailOffsetC.Increment = 1
        self.handrailOffsetC.MaxValue = 5000
        self.handrailOffsetC.MinValue = 50
        self.handrailOffsetC.Value = 150
        self.handrailOffsetC.ValueChanged += self.handrailGen
        
        #Handrail extension Label
        self.handrailExtensionLabel = forms.Label(Text = 'Handrail extension (mm):')
        #Handrail extension Control
        self.handrailExtensionC = forms.NumericStepper()
        self.handrailExtensionC.DecimalPlaces = 0
        self.handrailExtensionC.Increment = 1
        self.handrailExtensionC.MaxValue = 5000
        self.handrailExtensionC.MinValue = 300
        self.handrailExtensionC.Value = 300
        self.handrailExtensionC.ValueChanged += self.handrailGen
        
        #Handrail Diameter Label
        self.handrailDiameterLabel = forms.Label(Text = 'Handrail diameter (mm):')
        #Handrail Diameter control
        self.handrailDiameterC = forms.NumericStepper()
        self.handrailDiameterC.DecimalPlaces = 0
        self.handrailDiameterC.Increment = 1
        self.handrailDiameterC.MaxValue = 50
        self.handrailDiameterC.MinValue = 30
        self.handrailDiameterC.Value = 30
        self.handrailDiameterC.ValueChanged += self.handrailGen
        
        # Create the default button
        self.DefaultButton = forms.Button(Text = 'OK')
        self.DefaultButton.Click += self.OnOKButtonClick

        # Create the abort button
        self.AbortButton = forms.Button(Text = 'Cancel')
        self.AbortButton.Click += self.OnCloseButtonClick

################################################################################

        # Create a table layout and add all the controls
        layout = forms.DynamicLayout()
        layout.Spacing = drawing.Size(5, 5)

        layout.AddRow(None)
        layout.AddRow(self.stairGenLabel)
        layout.AddRow(None)
        layout.AddRow(None)
        layout.AddRow(self.genStairLabel, self.genStairBool)
        layout.AddRow(self.numStepsLabel, self.numStepsC)
        layout.AddRow(self.treadLabel, self.treadC)
        layout.AddRow(self.riserLabel, self.riserC)
        layout.AddRow(self.flipLabel, self.flipC)
        layout.AddRow(None)
        layout.AddRow(None)
        layout.AddRow(None)
        layout.AddRow(None)
        layout.AddRow(self.handrailGenLabel)
        layout.AddRow(None)
        layout.AddRow(None)
        layout.AddRow(self.genHandrailLabel, self.genHandrailBool)
        layout.AddRow(self.handrailTypeLabel, self.handrailTypeC)
        layout.AddRow(self.handrailHeightLabel, self.handrailHeightC)
        layout.AddRow(self.handrailOffsetLabel, self.handrailOffsetC)
        layout.AddRow(self.handrailExtensionLabel, self.handrailExtensionC)
        layout.AddRow(self.handrailDiameterLabel, self.handrailDiameterC)
        layout.AddRow(self.DefaultButton, self.AbortButton)
        
        # Set the dialog content
        self.Content = layout

################################################################################

    #Stair Generator Method
    def stairGen(self, sender, e):

        # Variables and defaults
        tread = int(self.treadC.Value) * scale
        riser = int(self.riserC.Value) * scale
        numSteps = int(self.numStepsC.Value)
        flip = self.flipC.Checked
        stairLength = tread * numSteps
        genStair = self.genStairBool.Checked
        curveList = []
        junkList = []

        #get user line for top width of stair
        
        rs.EnableRedraw(False)
        
        if genStair == False:
            iteration = rs.ObjectsByName("GdC9V&amp;^a^rGZZNgiWFH&amp;aTRQLLscu*9AZCmhk8t2!a")
            if iteration:
                rs.DeleteObject(iteration)
                rs.EnableRedraw(True)
                
        if genStair == True:
            #Delete any existing iteration
            iteration = rs.ObjectsByName("GdC9V&amp;^a^rGZZNgiWFH&amp;aTRQLLscu*9AZCmhk8t2!a")
            if iteration:
                rs.DeleteObject(iteration)
            
            topLine = rs.AddLine(line[0],line[1])
            topPoint = line[0]
            stepPoint = topPoint
            
            #get perp line - length of stair
            t = rs.CurveClosestPoint(topLine, topPoint)
            planeNormal = rs.CurveNormal(topLine)
            tangent = rs.CurveTangent(topLine, t)
            curveNormal = rs.VectorCrossProduct(planeNormal, tangent)
            
            # Get vector
            vectorRun = rs.VectorCreate(topPoint, topPoint + curveNormal * tread)
            
            # Bool flip direction of stair (add bool option in GUI)
            if flip == True:
                vector = rs.VectorReverse(vectorRun)
            else:
                vector = vectorRun
                
            # loop through number of steps to gen step curve
            for i in range(numSteps):
                pt01 = rs.AddPoint(stepPoint)
                pt02 = rs.CopyObject(pt01, vector)
                pt03 = rs.CopyObject(pt02, [0,0,riser*-1])
                curve = rs.AddPolyline([pt01,pt02,pt03])
                curveList.append(curve)
                stepPoint = rs.CurveEndPoint(curve)
                rs.DeleteObjects([pt01,pt02,pt03])
            
            # Extrude stair curve to full width
            joinedCurve = rs.JoinCurves(curveList)
            bottomPoint = rs.CopyObject(line[0], [0,0,(riser*numSteps)*-1])
            stairBottom = rs.CurveEndPoint(joinedCurve)
            curve = rs.AddPolyline([line[0],bottomPoint,stairBottom])
            handRailCurve = rs.AddCurve([bottomPoint,stairBottom]) #createhandrail curve and return it
            curveList.append(curve)
            joinedCurves = rs.JoinCurves(curveList)
            stair = rs.ExtrudeCurveStraight(joinedCurves, line[0], line[1])
            rs.CapPlanarHoles(stair)
            #this identifies the generated stair geometry
            rs.ObjectName(stair, "GdC9V&amp;^a^rGZZNgiWFH&amp;aTRQLLscu*9AZCmhk8t2!a") 
            
            # clean up leftover geometry
            junkList.extend([bottomPoint,joinedCurve,joinedCurves, topLine, handRailCurve])
            junkList = junkList + curveList
            rs.DeleteObjects(junkList)
        
            rs.EnableRedraw(True)

    # Handrail Generator Method
    # hType, curve, handrailOffset, tread, riser, numSteps, scale, vectorRun, hHeight, hEndLength, pipeDiameter,
    def handrailGen(self, sender, e):
        
        flip = self.flipC.Checked
        hType = self.handrailTypeC.SelectedIndex
        handrailOffset = int(self.handrailOffsetC.Value) * scale
        tread = int(self.treadC.Value) * scale
        riser = int(self.riserC.Value) * scale
        numSteps = int(self.numStepsC.Value)
        hEndLength = int(self.handrailExtensionC.Value) * scale
        pipeDiameter = int(self.handrailDiameterC.Value) * scale
        hHeight = int(self.handrailHeightC.Value) * scale
        topLine = rs.AddLine(line[0],line[1])
        rs.ObjectName(topLine, "BC6#DT5LCQX*#8r97Tquf5gNF")
        topPoint = line[0]
        genHandrail = self.genHandrailBool.Checked

        rs.EnableRedraw(False)
        if genHandrail == False:
            iteration = rs.ObjectsByName("qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
            if iteration:
                rs.DeleteObjects(iteration)
                rs.EnableRedraw(True)
                
        if genHandrail == True:
            #Delete any existing iteration
            iteration = rs.ObjectsByName("qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
            if iteration:
                rs.DeleteObjects(iteration)
            
            #get perp line - length of stair
            t = rs.CurveClosestPoint(topLine, topPoint)
            planeNormal = rs.CurveNormal(topLine)
            tangent = rs.CurveTangent(topLine, t)
            
            if flip == False:
                curveNormal = rs.VectorCrossProduct(planeNormal, tangent)
            else:
                curveNormal = rs.VectorReverse(rs.VectorCrossProduct(planeNormal, tangent))
            
            # Get guide curve
            scaledV = rs.VectorReverse(rs.VectorScale(curveNormal, tread*numSteps))
            ptGuide1 = rs.AddPoint(line[0])
            ptGuide2 = rs.CopyObject(ptGuide1, scaledV)
            rs.MoveObjects([ptGuide1, ptGuide2], [0,0,(riser*numSteps)*-1])
            curve = rs.AddCurve([ptGuide1, ptGuide2])
            
            #Get vector for step run
            vectorRun = rs.VectorCreate(topPoint, topPoint + curveNormal * tread)
            
            # Setup curves for handrail
            curve1 = curve
            curve2 = rs.MoveObject(rs.CopyObject(curve1, rs.VectorCreate(line[1], 
            rs.CurveStartPoint(curve1))), [0,0,(riser * numSteps)*-1])
            midPoint = rs.CurveMidPoint(userCurve)
            
            # Main slanted handrail curve
            pt1 = rs.MoveObject(rs.MoveObject(rs.CurveStartPoint(curve1), vectorRun), [0,0,hHeight + (riser*numSteps)])
            pt2 = rs.MoveObject(rs.MoveObject(rs.CurveEndPoint(curve1), vectorRun), [0,0,hHeight])
            mainCurve = rs.AddCurve([pt1, pt2])
            
            # Top leveled handrail curve at 300mm standard DDA
            pt3 = rs.CopyObject(pt1, rs.VectorReverse(rs.VectorScale(rs.VectorUnitize(vectorRun), hEndLength)))
            topCurve = rs.AddCurve([pt1, pt3])
            
            # Bottom leveled handrail curve at 300mm standard DDA
            pt4 = rs.CopyObject(pt2, rs.VectorScale(rs.VectorUnitize(vectorRun), hEndLength))
            bottomCurve = rs.AddCurve([pt2, pt4])
            
            # Start list of construction geometry for later cleanup
            hGeoList = [curve1, curve2, pt1, pt2, mainCurve, pt3, topCurve, pt4, bottomCurve, ptGuide1, ptGuide2, curve, topLine]
            
            # IF STATEMENTS FOR HANDRAIL TYPE
            
            # 1 180 degree, no return
            if hType == 0:
                
                # Lower Handrail return
                hpt1 = rs.CopyObject(pt4, [0,0,(pipeDiameter * 2)* -1])
                hpt2 = rs.MoveObject(rs.CopyObject(pt4, [0,0,pipeDiameter * -1]), rs.VectorScale(rs.VectorUnitize(vectorRun), pipeDiameter))
                lowerH = rs.AddArc3Pt(pt4, hpt1, hpt2)
                
                # Upper Handrail return
                hpt3 = rs.CopyObject(pt3, [0,0,(pipeDiameter * 2)* -1])
                hpt4 = rs.MoveObject(rs.CopyObject(pt3, [0,0,pipeDiameter * -1]), rs.VectorReverse(rs.VectorScale(rs.VectorUnitize(vectorRun), pipeDiameter)))
                upperH = rs.AddArc3Pt(pt3, hpt3, hpt4)
                
                # Draw leg upper
                lpt1 = rs.CurveMidPoint(topCurve)
                lpt2 = rs.CopyObject(lpt1, [0,0,hHeight*-1])
                lCurveUpper = rs.AddCurve([lpt1, lpt2])
                
                # Draw leg lower
                lpt3 = rs.CopyObject(pt2, [0,0,hHeight*-1])
                lCurveLower = rs.AddCurve([pt2,lpt3])
                
                # Make vectors to move handrails into place
                moveShort = rs.VectorScale(userVector, handrailOffset)
                moveLong = rs.VectorScale(userVector, rs.CurveLength(userCurve) - (handrailOffset*2))
                
                # Join, offset skeleton
                hCurve = rs.JoinCurves([mainCurve, topCurve, bottomCurve, lowerH, upperH])
                hCurve1 = rs.CopyObject(hCurve, moveShort)
                lCurveUpper1 = rs.CopyObject(lCurveUpper, moveShort)
                lCurveLower1 = rs.CopyObject(lCurveLower, moveShort)
                
                # Pipe skeleton
                pipe1 = rs.AddPipe(hCurve1,0, pipeDiameter/2,blend_type=0, cap = 1)
                pipe2 = rs.AddPipe(lCurveUpper1,0, pipeDiameter/2,blend_type=0, cap = 1)
                pipe3 = rs.AddPipe(lCurveLower1,0, pipeDiameter/2,blend_type=0, cap = 1)
                
                #form list of generated geo
                handrailGeo1 = [pipe1, pipe2, pipe3]

                # Name geo for deletion
                for i in handrailGeo1:
                    rs.ObjectName(i, "qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
                #copy
                handrailGeo2 = rs.CopyObjects(handrailGeo1, moveLong)
                
                # Cleanup construction linework
                hGeoList.extend([hpt1, hpt2, lowerH, hpt3, hpt4, upperH, lpt2, lpt3, lCurveLower, hCurve, hCurve1,
                lCurveUpper1, lCurveLower1, lCurveUpper])
                rs.DeleteObjects(hGeoList)
                
                rs.EnableRedraw(True)
        
            # 2 180 degree, full return
            if hType == 1:
                
                rs.EnableRedraw(False)
                
                # Lower handrail return
                hpt1 = rs.CopyObject(pt4, [0,0,(hEndLength/3)*-2])
                hpt2 = rs.CopyObject(pt2, [0,0,(hEndLength/3)*-2])
                hCurve11 = rs.AddPolyline([pt4, hpt1, hpt2])
                lowerH = rs.JoinCurves([bottomCurve, hCurve11])
                
                # Upper handrail return
                hpt3 = rs.CopyObject(pt3, [0,0,(hEndLength/3)*-2])
                hpt4 = rs.CopyObject(rs.CurveMidPoint(topCurve), [0,0,(hEndLength/3)*-2])
                hCurve2 = rs.AddPolyline([pt3, hpt3, hpt4])
                upperH = rs.JoinCurves([topCurve, hCurve2])
                
                # Draw leg upper
                lpt1 = rs.CurveMidPoint(topCurve)
                lpt2 = rs.CopyObject(lpt1, [0,0,hHeight*-1])
                lCurveUpper = rs.AddCurve([lpt1, lpt2])
                
                # Draw leg lower
                lpt3 = rs.CopyObject(pt2, [0,0,hHeight*-1])
                lCurveLower = rs.AddCurve([pt2,lpt3])
                
                # Make vectors to move handrails into place
                moveShort = rs.VectorScale(userVector, handrailOffset)
                moveLong = rs.VectorScale(userVector, rs.CurveLength(userCurve) - (handrailOffset*2))
                
                # Pipe skeleton move
                hCurve1 = rs.JoinCurves([lowerH, upperH, mainCurve])
                rs.MoveObjects([hCurve1, lCurveUpper, lCurveLower], moveShort)
                
                #Pipe
                pipe1 = rs.AddPipe(hCurve1,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe2 = rs.AddPipe(lCurveUpper,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe3 = rs.AddPipe(lCurveLower,0, pipeDiameter/2, blend_type=0, cap = 1)
                
                handrailGeo1 = [pipe1, pipe2, pipe3]

                # Name geo for deletion
                for i in handrailGeo1:
                    rs.ObjectName(i, "qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
                
                # Move and copy into position
                handrailGeo2 = rs.CopyObjects(handrailGeo1, moveLong)
                
                # Cleanup
                hGeoList.extend([hpt1, hpt2, hCurve11, lowerH, hpt3, hpt4, hCurve2, upperH, lpt2, lCurveUpper, lpt3,
                lCurveLower, hCurve1])
                rs.DeleteObjects(hGeoList)
                
                rs.EnableRedraw(True)
                
            # 3 Ground triangle return
            if hType == 2:
                
                rs.EnableRedraw(False)
                
                # Draw leg upper
                lpt1 = rs.CurveMidPoint(topCurve)
                lpt2 = rs.CopyObject(lpt1, [0,0,hHeight*-1])
                lCurveUpper = rs.AddCurve([lpt1, lpt2])
                
                # Draw leg lower
                lpt3 = rs.CopyObject(pt2, [0,0,hHeight*-1])
                lCurveLower = rs.AddCurve([pt2,lpt3])
                
                # Lower Return
                lowerH = rs.AddCurve([pt4, lpt3])
                
                # Upper Return
                upperH = rs.AddCurve([pt3, lpt2])
                
                # Make vectors to move handrails into place
                moveShort = rs.VectorScale(userVector, handrailOffset)
                moveLong = rs.VectorScale(userVector, rs.CurveLength(userCurve) - (handrailOffset*2))
                
                # Join Curves and move
                hCurve = rs.JoinCurves([mainCurve, topCurve, bottomCurve, lowerH, upperH])
                rs.MoveObjects([hCurve, lCurveUpper, lCurveLower], moveShort)
                
                # pipe
                pipe1 = rs.AddPipe(hCurve,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe2 = rs.AddPipe(lCurveUpper,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe3 = rs.AddPipe(lCurveLower,0, pipeDiameter/2, blend_type=0, cap = 1)
                
                handrailGeo1 = [pipe1, pipe2, pipe3]
                
                # Name geo for deletion
                for i in handrailGeo1:
                    rs.ObjectName(i, "qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
                
                # move and copy into place
                handrailGeo2 = rs.CopyObjects(handrailGeo1, moveLong)
                
                # Cleanup
                hGeoList.extend([lpt2, lCurveUpper, lpt3, lCurveLower, lowerH, upperH, hCurve, topLine])
                rs.DeleteObjects(hGeoList)
                
                rs.EnableRedraw(True)
                
            # 4 Ground return
            
            if hType == 3:
                
                rs.EnableRedraw(False)
                
                # Draw leg upper
                lpt1 = rs.CurveMidPoint(topCurve)
                lpt2 = rs.CopyObject(lpt1, [0,0,hHeight*-1])
                lCurveUpper = rs.AddCurve([lpt1, lpt2])
                
                # Draw leg lower
                lpt3 = rs.CopyObject(pt2, [0,0,hHeight*-1])
                lCurveLower = rs.AddCurve([pt2,lpt3])
                
                # Lower Return
                hpt1 = rs.CopyObject(pt4, [0,0,hHeight*-1])
                hCurve1 = rs.AddCurve([pt4, hpt1])
                
                # Upper Return
                hpt2 = rs.CopyObject(pt3, [0,0,hHeight*-1])
                hCurve2 = rs.AddCurve([pt3, hpt2])
                
                # Join curves
                hCurve = rs.JoinCurves([mainCurve, topCurve, bottomCurve, hCurve1, hCurve2])
                
                # Get Vectors
                moveShort = rs.VectorScale(userVector, handrailOffset)
                moveLong = rs.VectorScale(userVector, rs.CurveLength(userCurve) - (handrailOffset*2))
                
                #move
                rs.MoveObjects([hCurve, lCurveUpper, lCurveLower], moveShort)
                
                # Pipe
                pipe1 = rs.AddPipe(hCurve,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe2 = rs.AddPipe(lCurveUpper,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe3 = rs.AddPipe(lCurveLower,0, pipeDiameter/2, blend_type=0, cap = 1)
                
                handrailGeo1 = [pipe1, pipe2, pipe3]
                
                # Name geo for deletion
                for i in handrailGeo1:
                    rs.ObjectName(i, "qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
                    
                # move and copy into place
                handrailGeo2 = rs.CopyObjects(handrailGeo1, moveLong)
                
                # Clean up
                hGeoList.extend([lpt2, lCurveUpper, lpt3, lCurveLower, hpt1, hCurve1, hpt2, hCurve2, hCurve, topLine])
                rs.DeleteObjects(hGeoList)
                
                rs.EnableRedraw(True)
        
            # 5 Wall return
            if hType == 4:
                
                rs.EnableRedraw(False)
                
                # Draw leg upper
                lpt1 = rs.CurveMidPoint(topCurve)
                lpt2 = rs.CopyObject(lpt1, [0,0,hHeight*-1])
                lCurveUpper = rs.AddCurve([lpt1, lpt2])
                
                # Draw leg lower
                lpt3 = rs.CopyObject(pt2, [0,0,hHeight*-1])
                lCurveLower = rs.AddCurve([pt2,lpt3])
                
                #get vectors
                vector1 =  rs.VectorScale(rs.VectorUnitize(rs.VectorReverse(userVector)), handrailOffset)
                vector2 = rs.VectorScale(userVector, rs.CurveLength(userCurve))
                
                # Lower Return
                hpt1 = rs.CopyObject(pt4, vector1)
                hCurve1 = rs.AddCurve([pt4, hpt1])
                
                # Upper Return
                hpt2 = rs.CopyObject(pt3, vector1)
                hCurve2 = rs.AddCurve([pt3, hpt2])
                
                # Join main curves
                hCurveMain1 = rs.JoinCurves([mainCurve, topCurve, bottomCurve])
                
                # Get Vectors
                moveShort = rs.VectorScale(userVector, handrailOffset)
                moveLong = rs.VectorScale(userVector, rs.CurveLength(userCurve) - handrailOffset)
                
                # Copy hanrail 2
                hCurveMain2 = rs.CopyObject(hCurveMain1, moveLong)
                hCurve3 = rs.CopyObject(hCurve1, vector2)
                hCurve4 = rs.CopyObject(hCurve2, vector2)
                lCurveUpper2 = rs.CopyObject(lCurveUpper, moveLong)
                lCurveLower2 = rs.CopyObject(lCurveLower, moveLong)
                
                # Join curves
                hCurveJoined1 = rs.JoinCurves([hCurve1, hCurve2, hCurveMain1])
                hCurveJoined2 = rs.JoinCurves([hCurveMain2, hCurve3, hCurve4,])
                
                # Pipe
                pipe1 = rs.AddPipe(hCurveJoined1,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe2 = rs.AddPipe(lCurveLower,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe3 = rs.AddPipe(lCurveUpper,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe4 = rs.AddPipe(hCurveJoined2,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe5 = rs.AddPipe(lCurveUpper2,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe6 = rs.AddPipe(lCurveLower2,0, pipeDiameter/2, blend_type=0, cap = 1)
                
                handrailGeo1 = [pipe1, pipe2, pipe3, pipe3, pipe4, pipe5, pipe6]
                
                # Name geo for deletion
                for i in handrailGeo1:
                    rs.ObjectName(i, "qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
                
                # Move handrail 1 into place
                rs.MoveObjects([pipe1, pipe2, pipe3], moveShort)
                
                # Cleanup
                hGeoList.extend([lpt2, lCurveUpper, lpt3, lCurveLower, hpt1, hCurve1, hpt2, hCurve2, hCurveMain1, hCurveMain2, hCurve3,
                hCurve4, lCurveUpper2, lCurveLower2, hCurveJoined1, hCurveJoined2])
                rs.DeleteObjects(hGeoList)
                
                rs.EnableRedraw(True)

    # Close button click handler
    def OnCloseButtonClick(self, sender, e):
        generatedStair = rs.ObjectsByName("GdC9V&amp;^a^rGZZNgiWFH&amp;aTRQLLscu*9AZCmhk8t2!a")
        generatedHandrail = rs.ObjectsByName("qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
        rs.DeleteObjects(rs.ObjectsByName("xAbJgNV6^bz6azN&amp;6E$Q^WeX$Dd^vygCz5z7Hmynb5"))
        rs.DeleteObjects(rs.ObjectsByName("BC6#DT5LCQX*#8r97Tquf5gNF"))
        if generatedStair:
            rs.DeleteObject(generatedStair)
        if generatedHandrail:
            rs.DeleteObjects(generatedHandrail)
        self.Close(False)

    # close x button handler
    def OnFormClosed(self, sender, e):
        generatedStair = rs.ObjectsByName("GdC9V&amp;^a^rGZZNgiWFH&amp;aTRQLLscu*9AZCmhk8t2!a")
        generatedHandrail = rs.ObjectsByName("qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
        rs.DeleteObjects(rs.ObjectsByName("xAbJgNV6^bz6azN&amp;6E$Q^WeX$Dd^vygCz5z7Hmynb5"))
        rs.DeleteObjects(rs.ObjectsByName("BC6#DT5LCQX*#8r97Tquf5gNF"))
        if generatedStair:
            rs.DeleteObject(generatedStair)
        if generatedHandrail:
            rs.DeleteObjects(generatedHandrail)
        self.Close(False)

    # OK button click handler
    def OnOKButtonClick(self, sender, e):
        #remove object name to avoid deletion
        generatedStair = rs.ObjectsByName("GdC9V&amp;^a^rGZZNgiWFH&amp;aTRQLLscu*9AZCmhk8t2!a")
        generatedHandrail = rs.ObjectsByName("qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
        rs.DeleteObjects(rs.ObjectsByName("xAbJgNV6^bz6azN&amp;6E$Q^WeX$Dd^vygCz5z7Hmynb5"))
        rs.DeleteObjects(rs.ObjectsByName("BC6#DT5LCQX*#8r97Tquf5gNF"))
        if generatedStair:
            rs.ObjectName(generatedStair, name="www.landarchtools.com")
        if generatedHandrail:
            rs.ObjectName(generatedHandrail, name="www.landarchtools.com")

        self.Close(True)


################################################################################

#Get scale factor and abort if not in mm cm or m
system = rs.UnitSystem()
if system == 2 or system == 3 or system == 4:
    scaleFactorDict = {2:1, 3:0.1, 4:0.001}
    scaleFactor = scaleFactorDict[system]
    scale = scaleFactor
else:
    rs.MessageBox("change document to use mm, cm or m")
    exit()

#Get stair width
line = rs.GetLine(mode=1,message1="Pick two points to define top step width")
line[1].Z = line[0].Z
userCurve = rs.AddLine([line[0].X, line[0].Y, line[0].Z], [line[1].X, line[1].Y, line[0].Z])
userVector = rs.VectorUnitize(rs.VectorCreate((line[1].X, line[1].Y, line[0].Z), (line[0].X, line[0].Y, line[0].Z)))
rs.ObjectName(userCurve, "xAbJgNV6^bz6azN&amp;6E$Q^WeX$Dd^vygCz5z7Hmynb5")

# The script that will be using the dialog.
def RequestStairGen(): # This will call the eto form and assign it as a daughter window of rhino
    dialog = StairGenDialog(); # sets the ETO form to dialog variable
    rc = dialog.ShowModal(Rhino.UI.RhinoEtoApp.MainWindow) # Launches UI as modal daughter of rhino window


################################################################################

RequestStairGen()
)</script>
    </macro_item>
    <macro_item guid="6beb1246-fc82-4dfc-bb54-1188098f1029" bitmap_id="0c6dcc76-9701-40e5-a9cb-b791cf15160c">
      <text>
        <locale_1033>Macro 22</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Grade Curve</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Grade Curve</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#GRADE CURVE 

import rhinoscriptsyntax as rs

def scale():
    system = rs.UnitSystem()
    if system == 2 or system == 3 or system == 4:
        scaleFactorDict = {2:1, 3:100, 4:1000}
        scaleFactor = scaleFactorDict[system]
        return scaleFactor

    if system != 2 or system != 3 or system != 4:
        return None


def main():
    #If system is not metric, bail.
    if scale() == None:
        rs.MessageBox("This tool can only be used in mm, cm or m model units")
        return None
    
    #Set Variables
    crv = rs.GetObject(message="Get object to grade", filter=4, preselect=True, select=False, custom_filter=None, subobjects=False)
    if not crv: return
    grade = rs.GetReal(message="Enter grade number", number=20, minimum=0.001, maximum=None)
    if not grade: return
    
    rs.EnableRedraw(False)
    
    #FIND LENGTH OF CURVE AT EACH GRIP POINT
    rs.EnableObjectGrips(crv)
    ctrlPts = rs.ObjectGripLocations(crv)
    crvLengths = []
    startParam = rs.CurveClosestPoint(crv, ctrlPts[0])
    
    for i in ctrlPts:
        paramNum = rs.CurveClosestPoint(crv, i)
        CL = (rs.CurveLength(crv, sub_domain=[startParam ,paramNum]))
        crvLengths.append(CL)
    
    #FIND GRADED Z HEIGHT OF GRIP POINT
    gripHeights = []
    for i in crvLengths:
        rise = i / grade
        gripHeights.append(rise)
    
    #EDIT GRIP POINTS WITH NEW Z VALUE
    newGrips = []
    gripIndex = 0
    for i in ctrlPts:
        newPt = (i.X,i.Y,(i.Z+gripHeights[gripIndex]))
        newGrips.append(newPt)
        gripIndex = gripIndex + 1
    
    #MODIFY CURVE TO ENTERED GRADE
    rs.CopyObject(crv)
    grips = rs.ObjectGripLocations(crv, newGrips)
    rs.EnableObjectGrips(crv, enable=False)
    
    rs.EnableRedraw(True)

#Run Script
main()

)</script>
    </macro_item>
    <macro_item guid="c4df9c08-dfb5-4ff9-a629-7d6192f2ec4f" bitmap_id="6783bd35-8013-48ef-b051-efcca66e123d">
      <text>
        <locale_1033>Macro 23</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Scatter Blocks</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Scatter Blocks</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2022&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#SCATTER BLOCKS

import rhinoscriptsyntax as rs
import random
import math
import Rhino
import scriptcontext as sc

#r1 = vector 01 of triangle from origin (this will be randomised between 0,1)
#r2 = vector 02 of triangle from origin (this will be randomised between 0,1)
#a = origin corner of triangle (this should be picked as largest radius)
#b, c = other corners of triangle

def main():

    ################################################################################
    #                             GET OBJECTS AND VARIABLE                         #
    ################################################################################

    obj = rs.GetObject(message="Select surface to scatter on", filter=8|16|32, preselect=False, select=False, custom_filter=None, subobjects=False)
    if not obj:
        return
    blocks = rs.GetObjects(message="Select blocks to scatter", filter=4096, group=True, preselect=False, select=False, objects=None, minimum_count=1, maximum_count=0, custom_filter=None)
    if not blocks:
        return
    scatterNum = rs.GetInteger(message="Enter scatter amount", number=100, minimum=1, maximum=10000)
    if not scatterNum:
        return
    userScale = rs.GetReal("enter scale multiplyer (0 for no scaling)", number=0, minimum=None, maximum=None)

    userRotation = rs.GetBoolean("random rotation of blocks?", ("Rotation", "No", "Yes"), (True))
    if not userRotation:
        return

    isMesh = rs.IsMesh(obj)
    ptBucket = 0
    pointList = []
    blockList = []
    worldZVector = (rs.WorldXYPlane()).ZAxis

    rs.EnableRedraw(False)

    def MeshBrep(brep_id,params):
        brep=rs.coercebrep(brep_id)
        if brep:
            mesh=Rhino.Geometry.Mesh()
            mesh_parts=Rhino.Geometry.Mesh.CreateFromBrep(brep,params)
            for mesh_part in mesh_parts: mesh.Append(mesh_part)
            mesh.Compact()
            return mesh
    
    def TestMeshBrep():
        mesh_params=Rhino.Geometry.MeshingParameters.Coarse
        mesh_brep=MeshBrep(obj,mesh_params)
        if mesh_brep:
            mesh = sc.doc.Objects.AddMesh(mesh_brep)
        return mesh
    
    def chunks(lst, n): #list split generator
        for i in xrange(0, len(lst), n):
            yield lst[i:i + n]
    
    if isMesh == False:
        mesh = TestMeshBrep()
    else:
        mesh = obj
    
    #Get and format vertex points in mesh, format from point3d object to float list
    meshVerts = rs.MeshFaces(mesh, face_type=False)
    totalArea = rs.MeshArea(mesh)
    meshFaceCount = rs.MeshFaceCount(mesh)
    
    PT01 = meshVerts[0::3]
    PT01S = []
    for i in PT01:
        i = (i.X, i.Y, i.Z)
        PT01S.append(i)
    
    PT02 = meshVerts[1::3]
    PT02S = []
    for i in PT02:
        i = (i.X, i.Y, i.Z)
        PT02S.append(i)
    
    PT03 = meshVerts[2::3]
    PT03S = []
    for i in PT03:
        i = (i.X, i.Y, i.Z)
        PT03S.append(i)
    
    triangleList = zip(PT01S, PT02S, PT03S) #format list together in order to loop through
    
    ################################################################################
    #                             POINT SCATTER LOOP                               #
    ################################################################################
    
    #loop through the three vertexes forming individual triangles
    for i in triangleList:
        a = i[0] #triangle vert 1
        b = i[1] #triangle vert 2
        c = i[2] #triangle vert 3
    
    #Find area of triangle
        dist01 = rs.Distance(a,b)
        dist02 = rs.Distance(a,c)
        dist03 = rs.Distance(b,c)
        s = (dist01 + dist02 + dist03) / 2 #Herons formula to find area of triangle by sides
        tArea = math.sqrt(s*(s-dist01)*(s-dist02)*(s-dist03))
    
    #assign portion of points base on area of triangle, if assignment of points is lower then one, add that to the next assignment
        numPtsPerUnit = totalArea[1] / scatterNum
        ptAllocation = tArea / numPtsPerUnit
        ptBucket = ptBucket + ptAllocation
    
        if ptBucket &lt; 1:
            continue
        else:
            pointShare = int (math.floor(ptBucket))
            ptBucket = 0
    
    #Vectors from origin to either corner of triangle
        ac = rs.VectorCreate(c,a)
        ab = rs.VectorCreate(b,a)
        originVector = rs.VectorCreate(a,(0,0,0))
    
    #Generate random numbers between 0,1. Random scatter onto triangle
        for i in range(pointShare):
            r1 = random.random()
            r2 = random.random()
            if r1 + r2 &lt; 1:
                p = r1 * ac + r2 * ab
            else:
                p = (1 - r1) * ac + (1 - r2) * ab
                
            points = rs.AddPoint(p)
            pointList.append(points)
            rs.MoveObjects(points, originVector)
    
    ################################################################################
    #                 MOVE BLOCKS TO POINTS WITH ROTATION / SCALE                  #
    ################################################################################
    
    #shuffle point list then split list by the number of blocks to scatter. Copy blocks to split lists
    random.shuffle(pointList)
    ptDivision = int(len(pointList) / len(blocks))
    genList = chunks(pointList, ptDivision)
    blockIndex = 0
    
    for pts in genList: #looping through split point list and blocks and copying blocks to scatter
        blockPt = rs.BlockInstanceInsertPoint(blocks[blockIndex])
        for pt in pts:
            vector = rs.VectorCreate(pt, blockPt)
            newBlock = rs.CopyObject(blocks[blockIndex], vector)
            blockList.append(newBlock) #create list of blocks for later modification
        if blockIndex &lt; (len(blocks) - 1):
            blockIndex += 1
    
    #apply random scaling and rotation to blocks
    if userRotation[0] == True:
        for block in blockList:
            centerPt = rs.BlockInstanceInsertPoint(block)
            angle = random.randint(0,360)
            rs.RotateObject(block, centerPt, angle, worldZVector)
    
    for block in blockList:
        centerPt= rs.BlockInstanceInsertPoint(block)
        scale = random.uniform((userScale/4), userScale)
        rs.ScaleObject(block, centerPt, (scale, scale, scale))
        
    #If a mesh was created, delete it, general cleanup
    if isMesh == False:
        rs.DeleteObject(mesh)
    rs.DeleteObjects(pointList)

main()

rs.EnableRedraw(True)


)</script>
    </macro_item>
    <macro_item guid="262cf1b5-9f4d-4363-8b21-c33e11c83f7b" bitmap_id="aa0767ee-0339-4044-a975-18e7177d0ab9">
      <text>
        <locale_1033>Macro 24</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Tree Soil Volume Requirements</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Tree Soil Volume Requirements</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

import rhinoscriptsyntax as rs
import math
import random

'''

Copyright &lt;2022&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Calculate Soil requirements

def main():
    litre = rs.GetReal("Enter the root ball litres, max 2000 Litres", 400)
    soilDepth = rs.GetReal('Enter the soil depth available in m', 0.8)
    matureHeight = rs.GetReal('Enter the mature tree height in m', 5)
    dbh = rs.GetReal('Enter the DBH at maturity in m, if unknown hit Enter', 0)
    userPt = rs.GetPoint('Pick a point to place rootball')

    rs.EnableRedraw(False)

    # Dictionery for litre size to pot Rootball Diameter [0] / Rootball Height [1] / Calliper [2] / Height [3] / Spread [4]
    # Figures obtained from https://winterhill.com.au/tree-sizes/
    PotDict = { 
        25: [0.300, 0.250, 0.020, 1.000, 0.500],
        45: [0.420, 0.350, 0.025, 2.000, 1.000], 
        75: [0.465, 0.500, 0.035, 2.500, 2.000],
        100: [0.520, 0.560, 0.050, 3.500, 2.000],
        200: [0.700, 0.625, 0.070, 4.500, 3.000],
        400: [0.980, 0.715, 0.090, 6.000, 4.000],
        600: [1.200, 0.600, 0.100, 6.000, 5.000],
        800: [1.300, 0.600, 0.120, 7.000, 5.000],
        1000: [1.500, 0.600, 0.150, 8.000, 5.000],
        2000: [2.000, 0.800, 0.200, 9.000, 5.000],
        }

    def closest(lst, K):
        
        return lst[min(range(len(lst)), key = lambda i: abs(lst[i]-K))]

    def scale():
        system = rs.UnitSystem()
        if system == 2 or system == 3 or system == 4:
            scaleFactorDict = {2:1000, 3:100, 4:1}
            scaleFactor = scaleFactorDict[system]
            return scaleFactor

        if system != 2 or system != 3 or system != 4:
            return None

    s = scale()

    if s == None:
        rs.MessageBox("This tool is can only be used in mm, cm or m model units")
        return None

    # Calc for standard soil requirements as per Australian Standards

    if dbh == 0:
        dbh = ((matureHeight / 100) * 4) * 1000 #Gives a DBH in mm
    reqSoil = (matureHeight * dbh) / 100 # Gives a required soil volume in M3
    reqSoilRadius = math.sqrt(reqSoil / ((math.pi)*soilDepth))
    
    # Add soil puck to doc
    reqSoilRadiusCyl = rs.AddCylinder(userPt, (soilDepth*s), (reqSoilRadius*s), cap=True)
    rs.ObjectColor(reqSoilRadiusCyl, (150,75,0))

    # Calc for size of rootball as per standard pot sizes
    litreMatch = closest(list(PotDict.keys()), litre)
    dia = (PotDict[litreMatch])[0]
    height = (PotDict[litreMatch])[1]

    # Add Rootball to doc
    rootballCyl = rs.AddCylinder(userPt, (height*s), ((dia/2)*s))
    rs.ObjectColor(rootballCyl, (0,128,0))
    vec = (0,0, ((soilDepth*s) - (height*s)))
    rs.MoveObject(rootballCyl, vec)

    # Add Tree model based on Dict
    calliper = (PotDict[litreMatch])[2]
    treeHeight = (PotDict[litreMatch])[3]
    spread = (PotDict[litreMatch])[4]
    vec02 = (0,0, (((soilDepth*s) - (height*s))) + (height*s))
    
    treeTrunk = rs.AddCylinder(userPt, (treeHeight*s), (calliper*s))
    rs.ObjectColor(treeTrunk, (101,67,33))
    rs.MoveObject(treeTrunk, vec02)
    canopy = rs.AddSphere(userPt, ((spread/2)*s))
    rs.ObjectColor(canopy, (33,101,67))
    vec03 = (0,0, (((soilDepth*s) - (height*s))) + (height*s) + (treeHeight*s) - ((spread/2)*s))
    rs.MoveObject(canopy, vec03)

    # Various Text Annotation
    txt1 = rs.AddText('Rootball ' + 'Height = ' + str(height*s) + ', Diameter = ' + str(dia*s), userPt, 
                      height=(.1*s), font="Arial", font_style=0, justification=2)
    
    txt2 = rs.AddText('Soil Volume Requirement = ' + str(reqSoil) + ' m3', (userPt.X, (userPt.Y - (.2*s)), userPt.Z), 
                      height=(.1*s), font="Arial", font_style=0, justification=2)
    
    block = rs.AddBlock((reqSoilRadiusCyl, rootballCyl, treeTrunk, canopy, txt1, txt2), userPt, 
                ("Rootball and Soil " + (str(random.random()))), delete_input=True)
    rs.BlockDescription(block, 'Rootball ' + 'Height = ' + str(height*s) + ', Diameter = ' + str(dia*s)
                        + ', Soil Volume Requirement = ' + str(reqSoil) + ' m3')

    guid = rs.InsertBlock(block, userPt)
    rs.ObjectName(guid, 'Rootball ' + 'Height = ' + str(height*s) + ', Diameter = ' + str(dia*s)
                        + ', Soil Volume Requirement = ' + str(reqSoil) + ' m3')
    
    rs.EnableRedraw(True)
main()

)</script>
    </macro_item>
    <macro_item guid="9403536b-930f-44c0-9a77-6c4f6122bc9e" bitmap_id="8ada728b-3369-4944-abb1-ffbd8ad8bc45">
      <text>
        <locale_1033>Macro 25</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Project Curves to Tin</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Project Curves to Tin</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2022&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE 
AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

# Project Curves to TIN

from rhinoscript.object import FlashObject
import rhinoscriptsyntax as rs


def main():
    crvs = rs.GetObjects(message="Select curves to project", filter=4, group=True, preselect=False,
                         select=False, objects=None, minimum_count=1, maximum_count=0,
                         custom_filter=None)
    if not crvs:
        return
    obj = rs.GetObject("Select the TIN to project onto", 8 | 16 | 32)
    if not obj:
        return
    isMesh = rs.IsMesh(obj)
    zUpList = []
    zDownList = []

    rs.EnableRedraw(False)

    # Convert Mesh to Nurbs for ShootRay compatibility
    if isMesh == True:
        srf = rs.MeshToNurb(obj)
    if isMesh == False:
        srf = obj

    # Shoot ray from each grip point and move grips to reflection point
    for crv in crvs:
        rs.EnableObjectGrips(crv)
        grips = rs.ObjectGripLocations(crv)
        for grip in grips:

            zUp = rs.ShootRay(srf, grip, (0, 0, 1), 1)
            # if zUp != None:
            if zUp == None:
                zUpList.append(False)
            else:
                zUpList.append(zUp[1])

            zDown = rs.ShootRay(srf, grip, (0, 0, -1), 1)
            # if zDown != None:
            if zDown == None:
                zDownList.append(False)
            else:
                zDownList.append(zDown[1])

        rs.CopyObject(crv)  # Coppy Existing curve

        # Find the right list to iterate over and insert existing points for any falses
        if all(x is False for x in zUpList):
            falseindex = [i for i, val in enumerate(zDownList) if not val]
            for i in falseindex:
                # Replace False with existing grip location and closest Z value
                closestPt = rs.BrepClosestPoint(srf, grips[i])
                zDownList[i] = (grips[i].X, grips[i].Y, closestPt[0].Z)
            rs.ObjectGripLocations(crv, zDownList)
        else:
            falseindex = [i for i, val in enumerate(zUpList) if not val]
            for i in falseindex:
                # Replace False with existing grip location and closest Z value
                closestPt = rs.BrepClosestPoint(srf, grips[i])
                zUpList[i] = (grips[i].X, grips[i].Y, closestPt[0].Z)
            rs.ObjectGripLocations(crv, zUpList)

        del zDownList[:]
        del zUpList[:]
        rs.EnableObjectGrips(crv, False)

    if isMesh == True:
        rs.DeleteObject(srf)

    rs.EnableRedraw(True)


main()


)</script>
    </macro_item>
  </macros>
  <bitmaps>
    <small_bitmap item_width="16" item_height="16">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap_item guid="b54432f0-91ec-43b6-8b11-4a7654e19716" index="16" />
      <bitmap_item guid="d59a330a-0413-4632-9c5c-1d8f613a7bd0" index="17" />
      <bitmap_item guid="8fa94ce8-b572-453c-8fec-ae23f13cb9ad" index="18" />
      <bitmap_item guid="adf3520d-c901-4048-a55a-24d4466b0615" index="19" />
      <bitmap_item guid="61624676-c9c5-49bf-ad20-9aa2092d1576" index="20" />
      <bitmap_item guid="85a60542-9518-495a-80eb-1e3ee6470955" index="21" />
      <bitmap_item guid="6e502bab-241b-4e5b-ab6e-45895a855e3d" index="22" />
      <bitmap_item guid="e665d72d-4470-43f1-9a74-a7f1a96e66ba" index="23" />
      <bitmap_item guid="0c6dcc76-9701-40e5-a9cb-b791cf15160c" index="24" />
      <bitmap_item guid="6783bd35-8013-48ef-b051-efcca66e123d" index="25" />
      <bitmap_item guid="aa0767ee-0339-4044-a975-18e7177d0ab9" index="26" />
      <bitmap_item guid="8ada728b-3369-4944-abb1-ffbd8ad8bc45" index="27" />
      <bitmap>iVBORw0KGgoAAAANSUhEUgAAABAAAAHACAYAAACruuj6AAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAOvwAADr8BOAVTJAAAAhxJREFUeF7t0zFoE1EYwPGHqBRXBcFZ3FQcRMHNwV13F5UuuhW6CI3W
XusN1aGNUSvqoNIKDkIthFZrI2ixFjXpxZS4OZQMRcFoC+Hyed9d3vPaVNBB6PD/wUcu373vu3fv
vTMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsFk0Te/B0HjZhun9VDfeioZea07vtYa1E5PpiAblooJQ
jCcbhd4LTd9NHdsqSyTFfdPNbQMSdlyV5taBtmLN6X29jh40vaaJPllvLHl5qXyuyujEvNR2X3PF
el2Yei9f7r5yOZ1JXNw03gE7bdtgvFSR0adzsrxrUJZ3DkrXgzcSVKuyGFQk3OHHDbQmXpOo07Dt
ahvY6L5RkO7sjPizgct9P3E/NQsvaxrGK9tE8dwTGZoruzgz9lbORtHzesHlSqcfuwa6O6ZuMj9t
ItzSL34mL6cmP8ZhG9j//qV8PMaO1y1e08A2qe+5Lt8O35avx+7IZf+5dOUKcYyffOTGacQN0q9g
oxEt3I+jI7KyPxfPoPNlUc7PlORC9Bscv/d7nL5CehFtrO4dknr09NV9w9L5cFamgkW3iEv9eTcu
XsT0Nm4UxUO3JD9fTrZxoSK1i8/ivNtGZQ/Sn+LdkRGZ/FCWWs+Ey7mDpJKjfOVFumh9NLdHR7l1
xNuOskqa/M3HpLNdV5yma6KL88+fMwAAAAAAAAAAAAAAAAAAAAAAwH9hzC/jCkC+0j+BxgAAAABJ
RU5ErkJggg==</bitmap>
    </small_bitmap>
    <normal_bitmap item_width="24" item_height="24">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap_item guid="b54432f0-91ec-43b6-8b11-4a7654e19716" index="16" />
      <bitmap_item guid="d59a330a-0413-4632-9c5c-1d8f613a7bd0" index="17" />
      <bitmap_item guid="8fa94ce8-b572-453c-8fec-ae23f13cb9ad" index="18" />
      <bitmap_item guid="adf3520d-c901-4048-a55a-24d4466b0615" index="19" />
      <bitmap_item guid="61624676-c9c5-49bf-ad20-9aa2092d1576" index="20" />
      <bitmap_item guid="85a60542-9518-495a-80eb-1e3ee6470955" index="21" />
      <bitmap_item guid="6e502bab-241b-4e5b-ab6e-45895a855e3d" index="22" />
      <bitmap_item guid="e665d72d-4470-43f1-9a74-a7f1a96e66ba" index="23" />
      <bitmap_item guid="0c6dcc76-9701-40e5-a9cb-b791cf15160c" index="24" />
      <bitmap_item guid="6783bd35-8013-48ef-b051-efcca66e123d" index="25" />
      <bitmap_item guid="aa0767ee-0339-4044-a975-18e7177d0ab9" index="26" />
      <bitmap_item guid="8ada728b-3369-4944-abb1-ffbd8ad8bc45" index="27" />
      <bitmap>iVBORw0KGgoAAAANSUhEUgAAABgAAAKgCAYAAACBcb3JAAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAOvwAADr8BOAVTJAAABHtJREFUeF7t1HtMlXUcx3GOQCBIYHp0Sl5wKYoKYkkRLnVOTBM2L3FV
wSjWzEuL1BQ1/6hp3jOnzi1DlEwErZzZvJJumZcuy6aupv3htC0tp+INgU/fHwfRtTBa/lHb+7W9
t8fz/J7f9zzPkccPAAAAAAAAAAAAwH9bgDXGGlr3rwesf6ugkLLXBqcoOyHhpr+f32r7rLvv1L/T
MdDff3lqj14XDrxUKJXuU9WuI9pWME8DO3U/a+dnWK3rVv5DEdakpE5df1qX9rKq5xdLS0qlZZYN
0cHjurp1rxZn5inW2/6YrU2z3CP8Wx4rvX3LRyoWDc/Qr/PWSMvLpYUl0oINkhv09nrpXRu09YB0
6KROry3VtEGptcEBAZ/atYPrdrmPFsEez554b3uV5BbU1izeZN+6THpno2/AneZbxTuloz/q+s6v
tCQjvzY6vJX8/Tzr6/dpVIu4kIgtK7r0U0a7yKrcuPgbFRPnSku3SIs/unsXJXuk/d+qZOqC2+m9
E2692jPuxq4haXrI47+hfp9GhcaEhG/+Mn6YziVl1q70PnFrYFjUtamPD79xZtYK36Alm/XFK4tq
shOevjny0S6V5Wk5t7W2TGfypsmuL/Jt0zgbEFa6O26IrvTPqut4zKDqObbRsMhul98fk33zzWdT
qkZERl5elZhSeX7h2hqV75Y+O6gTk2Y3aUBIz6CILXtjk/V7/0ydS3xeF5PSdSkpQ0dikq93CQ6t
zO/Q58rPI+1bz1wmrd6kmsKl0rqtOjFlbtMG9AoKK9tvAy7VD3Cdt6qeGatMb5SOpU6QXpyjmpw3
VD12mqpzZ0gfbNOJyU0c0DskrHx/nN1B0t0Brqv2uNK8nXXguXHSC4WqHmebZxeoOm+WVPSxDZjT
tAH2v6i8ok8TBoyfbnfwum/Ahu062cRHFBoX2nL7ob7D7QduwgB3Fzn2iBYX6XTedDdgo2+bxoWF
BwTuWP5YQt2Pe9k2dc+/sQG1bvO82bqWM11rEoe6Aat829zfkw95PMVZ3ja39sQOsSGZumDDKv80
QBPs0VgVQ7M0pmPURY/H855dG+3b4q/lWPe+60d0Dmy+r6BDjH7ol6raAeOV1TZKh1Nypfx5OjUq
X2Oj+9a0tde4rU3yXVJngJXnO7wr3DpsXbHcn3u85bi36sTY5hGniqITNdrbSTuS07TyqWT1aNHy
qJ1Lt5q7haavVWxdsk5azawGvaxfLPccXZOte3UM9PPMD2rmf7V7WOuzduVM++xh36kGU6w71/9m
dbYapFjfWAss9353r153m17rXu5RxPgOG7g1bu0n1tfWIuuglWo1aGvdmdjNcj/Yces763NrpVVo
ZVvut5pd/9lOy6353lphdbWcdlak77BxbaxR1lvWJst9w931ueMPLXdutOXWPhDBVpDvEAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAA4P/Iz+8Pe1Mwtz6RUpgAAAAASUVORK5CYII=</bitmap>
    </normal_bitmap>
    <large_bitmap item_width="32" item_height="32">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap_item guid="b54432f0-91ec-43b6-8b11-4a7654e19716" index="16" />
      <bitmap_item guid="d59a330a-0413-4632-9c5c-1d8f613a7bd0" index="17" />
      <bitmap_item guid="8fa94ce8-b572-453c-8fec-ae23f13cb9ad" index="18" />
      <bitmap_item guid="adf3520d-c901-4048-a55a-24d4466b0615" index="19" />
      <bitmap_item guid="61624676-c9c5-49bf-ad20-9aa2092d1576" index="20" />
      <bitmap_item guid="85a60542-9518-495a-80eb-1e3ee6470955" index="21" />
      <bitmap_item guid="6e502bab-241b-4e5b-ab6e-45895a855e3d" index="22" />
      <bitmap_item guid="e665d72d-4470-43f1-9a74-a7f1a96e66ba" index="23" />
      <bitmap_item guid="0c6dcc76-9701-40e5-a9cb-b791cf15160c" index="24" />
      <bitmap_item guid="6783bd35-8013-48ef-b051-efcca66e123d" index="25" />
      <bitmap_item guid="aa0767ee-0339-4044-a975-18e7177d0ab9" index="26" />
      <bitmap_item guid="8ada728b-3369-4944-abb1-ffbd8ad8bc45" index="27" />
      <bitmap>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</bitmap>
    </large_bitmap>
  </bitmaps>
  <scripts />
</RhinoUI>