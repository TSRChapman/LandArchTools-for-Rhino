<?xml version="1.0" encoding="utf-8"?>
<RhinoUI major_ver="3" minor_ver="0" guid="0804c739-59c2-4cd7-86d9-ddaf63e97340" localize="False" default_language_id="1033" dpi_scale="100">
  <extend_rhino_menus>
    <menu guid="d58ceae7-fdb0-4104-80da-274b94ad44a9">
      <text>
        <locale_1033>Extend Rhino Menus</locale_1033>
      </text>
    </menu>
  </extend_rhino_menus>
  <menus />
  <tool_bar_groups>
    <tool_bar_group guid="4830f6fe-5b84-4155-9c85-a8ae8942b65e" dock_bar_guid32="00000000-0000-0000-0000-000000000000" dock_bar_guid64="92d659a2-6f79-4f2b-8ba6-2670971a2e86" active_tool_bar_group="c0ddb15f-03f5-4dff-86f7-7745ab4674f7" single_file="False" hide_single_tab="True" point_floating="1797,358">
      <text>
        <locale_1033>LandArchTools</locale_1033>
      </text>
      <tool_bar_group_item guid="c0ddb15f-03f5-4dff-86f7-7745ab4674f7" major_version="1" minor_version="1">
        <text>
          <locale_1033>LandArchTools</locale_1033>
        </text>
        <tool_bar_id>d8dc19cb-56d8-4f50-b015-76d6b2e6fb1f</tool_bar_id>
      </tool_bar_group_item>
      <dock_bar_info dpi_scale="100" dock_bar="False" docking="True" horz="False" visible="True" floating="True" mru_float_style="8192" bar_id="59474" mru_width="868" point_pos="-2,-2" float_point="1797,358" rect_mru_dock_pos="0,574,35,960" dock_location_u="59420" dock_location="left" float_size="612,62" />
    </tool_bar_group>
  </tool_bar_groups>
  <tool_bars>
    <tool_bar guid="d8dc19cb-56d8-4f50-b015-76d6b2e6fb1f" bitmap_id="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb">
      <text>
        <locale_1033>LandArchTools</locale_1033>
      </text>
      <tool_bar_item guid="bcc9156a-6e1d-4be5-8f0e-7bfcfc3e4f0c">
        <left_macro_id>5bb60bb6-b5e1-4cf6-b207-2aa05bd6bf0f</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="49c53416-e30d-414d-a4e3-f9daca5032dc">
        <left_macro_id>ba483181-ff75-4d51-9bba-974118b80da5</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2f4946a0-eb09-4882-aecb-284bc226419e">
        <left_macro_id>812b1c36-0e85-4b6c-9982-e2b575bf9c7b</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="e021088f-3f01-4ec2-b7f8-7e141567db90">
        <left_macro_id>4211923b-f22f-4ab1-8745-e05f836d0bf8</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="70198725-314c-45f3-be45-e35fdd8208df">
        <left_macro_id>ef338e36-b652-464e-9f92-9d8c746720f3</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="eef8629f-6a85-4738-8531-046c164ab354">
        <left_macro_id>5a023420-191b-433d-9347-d6221ccc57d3</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="73e33de0-b307-41c7-b2cf-7058df45f707">
        <left_macro_id>2f54edf0-21f1-40d0-9cfb-31f8276274ca</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="7e3ac271-33ec-4c9d-95df-0f279a9766bf">
        <left_macro_id>89640668-abe2-45c1-9303-09a96c1466e8</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9f05992f-75c6-4360-8a00-5412592b1130">
        <left_macro_id>d1ca3149-4600-4d59-891a-116db286a114</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9d56baae-f374-4ee4-8917-a3170cadab27">
        <left_macro_id>161b2a13-4700-4945-9dae-25c70928152b</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="5598f291-9102-4785-ad1f-89305c097143">
        <left_macro_id>4055eaa6-4427-427c-b6a5-e6cdbac914c2</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="59e8d235-d308-4e12-8984-461790c354b8">
        <left_macro_id>650f2340-8c69-4456-84be-cdc45ddf12be</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="31d82a86-c02b-4786-9489-884129774c95">
        <left_macro_id>652506ee-7343-475c-a018-6ed9c0a76b29</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="1c7275d2-d2bb-4582-835c-2dc2ea64040d">
        <left_macro_id>87791b70-7cac-4efc-a5c4-deece16831aa</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9b1ad1b4-64b4-46ff-a3b6-2df1205041f4">
        <left_macro_id>96e93532-81ce-4156-b7f7-b7ff1364c489</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="0c1a0eb2-86c5-4735-a356-9ab261bf6b7c">
        <left_macro_id>d16957a9-f662-446d-9801-c0533fb38255</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2dce03e3-13e1-4b50-a92c-2f59b9947d33">
        <left_macro_id>c047d19d-b398-41b0-9fd8-74fe11b70e04</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="135b9233-ad6d-4ea1-b6b8-967e3eb44a41">
        <left_macro_id>cfb1aa22-1db1-4869-b63d-8a0474245511</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2d5840f3-4ba6-4be7-b14d-725b51e62bb2">
        <left_macro_id>63812035-1fa4-4e2a-8e3c-41fae14a9a2c</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="8f524430-3fa1-4122-b71c-bdb05bc6ac7e">
        <left_macro_id>00485d86-6061-4967-b8a5-b52920e03baa</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2f572106-b4a8-40ad-883d-b7e4c17ba136">
        <left_macro_id>b7943e02-c0c3-4bd4-af85-e859db81c052</left_macro_id>
      </tool_bar_item>
    </tool_bar>
  </tool_bars>
  <macros>
    <macro_item guid="5bb60bb6-b5e1-4cf6-b207-2aa05bd6bf0f" bitmap_id="f9c5b694-dced-4977-a15f-92d9fff043bc">
      <text>
        <locale_1033>Macro 00</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Calculate grade between two points</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Calculate grade between two points</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Calculate grade between two given points
#By Thomas Chapman on 11/01/2021

import rhinoscriptsyntax as rs
import math as m

# Get points from user
pt1 = rs.GetPoint('Pick the first point')
pt2 = rs.GetPoint('Pick the second point')


if pt2:
    hypotenuse = rs.Distance(pt1, pt2)

    rs.EnableRedraw(False)


    # Find the rise of given points in any order
    if pt1.Z &gt; pt2.Z:
        rise = pt1.Z - pt2.Z
    elif pt1.Z &lt; pt2.Z:
        rise = pt2.Z - pt1.Z

    # Find the run of given points
    run = m.sqrt(hypotenuse**2 - rise**2)

    # Detect model units and scale to mm, if mm do nothing
    if rs.UnitSystem == 3:
        rise = rise*100
    if rs.UnitSystem == 4:
        rise = rise*1000

    # Calculate grade based on rise and run
    try:
        grade = run / rise

    except ZeroDivisionError:
        print('No Grade Found')
        exit()

    # Print text dot to screen
    curve = rs.AddCurve([pt1,pt2])
    midpoint = rs.CurveMidPoint(curve)
    rs.DeleteObject(curve)
    rs.AddTextDot('1:' + str(abs(round(grade,2))),midpoint)

    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="ba483181-ff75-4d51-9bba-974118b80da5" bitmap_id="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92">
      <text>
        <locale_1033>Macro 02</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Display the RL of a given point</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Display the RL of a given point</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''


# Show RL of specified point and copy to clipboard
# By Thomas Chapman on 01/10/2021

import rhinoscriptsyntax as rs
import os

point = rs.GetPoint('Select point')

if point:
    pointZ = point.Z

    if rs.UnitSystem() == 3: #if doc is in CM
        pointZ = pointZ *0.01
    if rs.UnitSystem() == 2:#if doc is in MM
         pointZ = pointZ *0.001

    rs.AddTextDot('+RL ' + str(round(pointZ,3)),point)

    #Copy RL to Clipboard

    RL = str(round(pointZ,3))

    rs.ClipboardText(RL)


)</script>
    </macro_item>
    <macro_item guid="4211923b-f22f-4ab1-8745-e05f836d0bf8" bitmap_id="8a465cae-79a9-4baa-b77e-ef3d92b27f3c">
      <text>
        <locale_1033>Macro 03</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

# MOVE OBJECT TO SPECIFIED RL
# BY THOMAS CHAPMAN ON 01/10/2021

import rhinoscriptsyntax as rs
import Rhino.Geometry as geo

obj = rs.GetObjects('Select objects',preselect=True)

if obj:
    current = rs.GetPoint('Select point')
    
    if current: 
        rl = rs.GetString('RL to move to?')
        rl = float(rl)
        
        if rs.UnitSystem() == 3: #if model is in cm scale by 100
            rl = rl*100
        elif rs.UnitSystem() == 2: #if model is in mm scale by 1000
            rl = rl*1000
        
        if rl == 0.000: #move objects to the 0 coord
            target3 = current.Z
            if target3:
                target3 = target3 *-1
                target4 = geo.Point3d(0,0,target3)
                rs.MoveObject(obj, target4)

        elif rl &gt; 0.000:
            target = rl - current.Z #+ or - number to target location
            target2 = geo.Point3d(0,0,target) #translated vector needed to hit target
            rs.MoveObject(obj, target2)
)</script>
    </macro_item>
    <macro_item guid="ef338e36-b652-464e-9f92-9d8c746720f3" bitmap_id="bca0a23f-5397-475b-9a42-1ef72c11f863">
      <text>
        <locale_1033>Macro 01</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#RANDOM ROTATE BLOCK INSTANCES AROUND INSERTION POINT
#BY THOMAS CHAPMAN ON 01/09/2021

import rhinoscriptsyntax as rs
import random as r

vec = rs.VectorCreate([0,0,1],[0,0,0])
obj = rs.GetObjects('pick Blocks to rotate randomly', filter=4096, preselect=True)

if obj:
    rs.EnableRedraw(False)

    for object in obj:
        num = r.randrange(-180,180)
        point = rs.BlockInstanceInsertPoint(object)
        rs.RotateObject(object, point, num, vec)

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="5a023420-191b-433d-9347-d6221ccc57d3" bitmap_id="f3c1fd4a-470f-412b-98a3-4374e134c963">
      <text>
        <locale_1033>Macro 12</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Random Drop Block</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Random Drop Block</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs
import random as r


obj = rs.GetObjects('Pick blocks to drop randomly', filter=4096, preselect=True)
dropnum = rs.GetReal("Enter max drop distance")

if obj:
    rs.EnableRedraw(False)

    for object in obj:
        num = r.uniform((-abs(dropnum)),0)
        print num
        vec = rs.VectorCreate([0,0,num],[0,0,0])
        point = rs.BlockInstanceInsertPoint(object)
        rs.MoveObject(object,vec)

    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="d1ca3149-4600-4d59-891a-116db286a114" bitmap_id="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24">
      <text>
        <locale_1033>Macro 04</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#DROP OBJECTS TO SELECTED SRF    


import rhinoscriptsyntax as rs

obj = rs.GetObjects('Select Objects',rs.filter.curve | rs.filter.instance | rs.filter.mesh | rs.filter.surface | rs.filter.subd | rs.filter.light | rs.filter.polysurface,preselect=True)
srf = rs.GetObject ('Select Surface')

if obj:
    if srf:
        
        rs.EnableRedraw(False)
        
        # Check if srf is a mesh, if so convert to Nurb
        isMesh = rs.IsMesh(srf)
        if isMesh == True: 
            srf  = rs.MeshToNurb(srf)
        
        # For each object send test rays up and down in Z coord
        # Move each object to the ray test that hits a srf
        for i in obj:
            bndBox = rs.BoundingBox(i)
            pt1 = bndBox[0]
            pt2 = bndBox[2]
            crv = rs.AddLine(pt1,pt2)
            
            if crv:
                midcrv = rs.CurveMidPoint(crv)
                rs.DeleteObject(crv)
                
            ray_pt_up = rs.ShootRay(srf,midcrv,(0,0,1),reflections=1)
            ray_pt_down = rs.ShootRay(srf,midcrv,(0,0,-1),reflections=1)
            
            if ray_pt_up:
                vector = rs.VectorCreate(ray_pt_up[1],midcrv)
                rs.MoveObject(i,vector)
                
            if ray_pt_down:
                vector = rs.VectorCreate(ray_pt_down[1],midcrv)
                rs.MoveObject(i,vector)  
        
        # deleate any created srf
        if isMesh == True:
            rs.DeleteObject(srf)
        rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="161b2a13-4700-4945-9dae-25c70928152b" bitmap_id="bd3a0457-e280-44b4-95ec-68bf6d152c4f">
      <text>
        <locale_1033>Macro</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Model Standard Australian DDA Ramps

import rhinoscriptsyntax as rs
import math as m


if rs.UnitSystem() == 4: #if doc is in M
    Mult = 1
if rs.UnitSystem() == 3: #if doc is in CM
    Mult = 100
if rs.UnitSystem() == 2:#if doc is in MM
    Mult = 1000



pt00 = rs.GetPoint('Pick insertion point')

if pt00:


    pt01 = rs.CreatePoint(pt00.X,pt00.Y)
    RampOptions = 'Step Ramp', 'Kerb Ramp', 'Ramp', 'Walkway'
    RampType = rs.PopupMenu(RampOptions)

    rs.EnableRedraw(False)


    if RampType == -1:
        exit()

    if RampType == 0: #Step Ramp
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.9*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)

    if RampType == 1: #Kerb Ramp
    #main ramp portion
        Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.52*Mult),pt01.Y,pt01.Z),(pt01)])
        Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
        rs.CapPlanarHoles(Surface)
        rs.DeleteObject(Curve)

    if RampType == 2: #Ramp
        Grade = '1:19','1:18','1:17','1:16','1:15','1:14'
        Index = rs.PopupMenu(Grade)
        GradeNum = [19,18,17,16,15,14]
        if Index == 5:
            Rise = 9/(GradeNum[Index])
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+9*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)
        elif Index != 5:
            Rise = 15/(GradeNum[Index])
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)

    if RampType == 3: #Walkway
        Grade = '1:33','1:32','1:31','1:30','1:29','1:28','1:27','1:26','1:25','1:24','1:23','1:22','1:21','1:20'
        Index = rs.PopupMenu(Grade)
        GradeNum = [33,32,31,30,29,28,27,26,25,24,23,22,21,20]
        if Index == 0:
            Rise = 25/(GradeNum[Index])
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+25*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)
        if Index == 13:
            Rise = 15/(GradeNum[Index])
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)
        elif Index != 0 or Index != 13:
            Interp = m.floor((( GradeNum[Index] - 20)*(25 - 15)/(33 - 20))+15) #Linear interpolation of landing distance - DDA requirement...Srsly?
            Rise = Interp/(GradeNum[Index])
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+Interp*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)

    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="4055eaa6-4427-427c-b6a5-e6cdbac914c2" bitmap_id="4bec978a-dd98-4658-b848-0f810eefd6bf">
      <text>
        <locale_1033>Macro 05</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Patch Multiple Individual closed polylines
#By Thomas Chapman 04/22/2021

import rhinoscriptsyntax as rs

geo = rs.GetObjects('Select Closed Polylines',preselect=True)

if geo:
    
    uv1 = rs.GetInteger('enter number of UV divisions',number=1,minimum=1)

    rs.EnableRedraw(False)
    for objects in geo:
        rs.AddPatch((objects),(uv1,uv1),tolerance=0.0001)
    rs.EnableRedraw(True)


)</script>
    </macro_item>
    <macro_item guid="652506ee-7343-475c-a018-6ed9c0a76b29" bitmap_id="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676">
      <text>
        <locale_1033>Macro 06</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Isolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Isolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

# Get object and find layer it is on
obj = rs.GetObjects('select an object on the layer to isolate',preselect=True)

if obj:


    rs.EnableRedraw(False)

    # Create list of selected obj layers
    selectedlayers = []
    for i in obj:
        layer = rs.ObjectLayer(i)
        selectedlayers.append(layer)

    # Select all objects on each layer

    for i in selectedlayers:
        rs.ObjectsByLayer(i,True)
    isolate = rs.SelectedObjects()

    allObjects = rs.AllObjects()

    for i in isolate:
        allObjects.remove(i)

    # Hide selected objects

    rs.HideObjects(allObjects)

    rs.UnselectAllObjects()

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="87791b70-7cac-4efc-a5c4-deece16831aa" bitmap_id="7c225bac-4566-4c22-8529-19795734ecf8">
      <text>
        <locale_1033>Macro 07</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Unisolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Unisolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Unisolate All objects
#By Thomas Chapman 21/05/01

import rhinoscriptsyntax as rs

obj = rs.HiddenObjects()

if obj:

    rs.ShowObjects(obj)
)</script>
    </macro_item>
    <macro_item guid="96e93532-81ce-4156-b7f7-b7ff1364c489" bitmap_id="3a30ba51-3cf2-4d5a-ae4e-e7727296e181">
      <text>
        <locale_1033>Macro 08</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Turn Selected Object Layers Off</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Turn Selected Object Layers Off</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

obj = rs.GetObjects("select obj Layers to turn off")

if obj:

    rs.EnableRedraw(False)

    for i in obj:
        layer = rs.ObjectLayer(i)
        rs.LayerVisible(layer, visible=False)

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="d16957a9-f662-446d-9801-c0533fb38255" bitmap_id="5ecdbeb8-4c26-464d-965a-d29084b78338">
      <text>
        <locale_1033>Macro 09</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Plan View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Plan View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _T")

)</script>
    </macro_item>
    <macro_item guid="c047d19d-b398-41b0-9fd8-74fe11b70e04" bitmap_id="3f736f77-7940-4134-9713-dac547abd1c6">
      <text>
        <locale_1033>Macro 10</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Perspective View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Perspective View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _p")

)
</script>
    </macro_item>
    <macro_item guid="cfb1aa22-1db1-4869-b63d-8a0474245511" bitmap_id="c351dd99-b010-4a89-86fe-835dd645a1b8">
      <text>
        <locale_1033>Macro 11</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import glob
import struct
import imghdr
import rhinoscriptsyntax as rs

#Check document units
units = rs.UnitSystem()

if units == 2: #mm
    scale = 1000
if units == 3: #cm
    scale = 100
if units == 4: #m
    scale = 1

def get_image_size(fname):
    '''Determine the image type of fhandle and return its size.
    from draco'''
    with open(fname, 'rb') as fhandle:
        head = fhandle.read(24)
        if len(head) != 24:
            return
        if imghdr.what(fname) == 'png':
            check = struct.unpack('&gt;i', head[4:8])[0]
            if check != 0x0d0a1a0a:
                return
            width, height = struct.unpack('&gt;ii', head[16:24])
        elif imghdr.what(fname) == 'gif':
            width, height = struct.unpack('&lt;HH', head[6:10])
        elif imghdr.what(fname) == 'jpeg':
            try:
                fhandle.seek(0) # Read 0xff next
                size = 2
                ftype = 0
                while not 0xc0 &lt;= ftype &lt;= 0xcf:
                    fhandle.seek(size, 1)
                    byte = fhandle.read(1)
                    while ord(byte) == 0xff:
                        byte = fhandle.read(1)
                    ftype = ord(byte)
                    size = struct.unpack('&gt;H', fhandle.read(2))[0] - 2
                # We are at a SOFn block
                fhandle.seek(1, 1)  # Skip `precision' byte.
                height, width = struct.unpack('&gt;HH', fhandle.read(4))
            except Exception: #IGNORE:W0703
                return
        else:
            return
        return width, height



#Find and open jgw file, extract scalefactor and x and y coordinates

jgw = rs.OpenFileName(title= 'Select .JGW file',filter="JGW Files (*.JGW)|*.JGW||" )

with open(jgw,'rt') as f:
    numslist = f.read().splitlines()

scaleFactor01 = numslist[0]

worldx = float(numslist[4])*int(scale)
worldy = float(numslist[5])*int(scale)

#Find and open jpg file, extract pixel size

jpg = rs.OpenFileName(title= 'Select .JPG image File',filter="JPG Files (*.JPG)|*.JPG||")

size = get_image_size(jpg)

scaleFactor02 = (float(size[0])*int(scale))
scaleFactor03 = (float(size[1])*int(scale))

# Calculate scale factor

scaleFactorWidth = (float(scaleFactor01))*(float(scaleFactor02))
scaleFactorHeight = (float(scaleFactor01))*(float(scaleFactor03))

origin = (float(worldx), (float(worldy) - float(scaleFactorHeight)), 0)

picturePlane = rs.PlaneFromFrame(origin,(1,0,0),(0,1,0))

rs.AddPictureFrame(picturePlane,jpg,width=(float(scaleFactorWidth)), height=(float(scaleFactorHeight)))

)</script>
    </macro_item>
    <macro_item guid="63812035-1fa4-4e2a-8e3c-41fae14a9a2c" bitmap_id="5bb47664-de86-4b8e-88ce-835cfa2b3981">
      <text>
        <locale_1033>Macro 13</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Create Standard Layers</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Create Standard Layers</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Create Standard Layers

import rhinoscriptsyntax as rs
import random as r

#Add Layers to document

rs.EnableRedraw(False)

layerList = [
"L_BLDS", 
"L_BNDY_WRKS", 
"L_EDGE",
"L_HARD_ROCK",
"L_HARD_WALL",
"L_HARD_STEP",
"L_HARD_RAMP",
"L_HARD_FNCE",
"L_HARD_PAV1",
"L_HARD_PAV2",
"L_HARD_PAV3",
"L_HARD_PAV4",
"L_LGHT",
"L_ENTO",
"L_PLAY_EQUI",
"L_PLNT",
"L_STRU",
"L_TEXT",
"L_TREE_PROP",
"L_TREE_RETN",
"L_WALL",
"_L_WORKING",
"L_SOFT_GRDN",
"L_SOFT_MLCH",
"L_SOFT_LAWN",
"L_SOFT_PLANT",
"L_FURN",
"_L_OFF"


]



layerList.sort()

parentLayer = rs.AddLayer(name="LANDSCAPE", color=None, visible=True, locked=False, parent=None)

for layer in layerList:
    rs.AddLayer(layer,(r.randrange(255),r.randrange(255),r.randrange(255)),visible=True, locked=False, parent= parentLayer)

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="812b1c36-0e85-4b6c-9982-e2b575bf9c7b" bitmap_id="b54432f0-91ec-43b6-8b11-4a7654e19716">
      <text>
        <locale_1033>Macro 14</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Calculate Height difference between two points</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Calculate Height difference between two points</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

pt01 = rs.GetPoint('Select first point to measure from')
pt02 = rs.GetPoint('Select second point to measure to')

if pt02:

    pt01Z = pt01.Z
    pt02Z = pt02.Z

    height = abs(pt01Z-pt02Z)
    height = round(height, 3)

    rs.ClipboardText(height)

    rs.MessageBox(height, buttons=0, title="Height difference - Value copied to clipboard")
)</script>
    </macro_item>
    <macro_item guid="2f54edf0-21f1-40d0-9cfb-31f8276274ca" bitmap_id="d59a330a-0413-4632-9c5c-1d8f613a7bd0">
      <text>
        <locale_1033>Macro 15</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Rotate picture frames to face current camera view</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Rotate picture frames to face current camera view</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''
#Rotate picture frames to face camera

import rhinoscriptsyntax as rs

frames = rs.GetObjects("Select Picture Frames",filter=8,preselect=True)


#rotate surfaces around z axis towards camera point
if frames:

    cam = rs.ViewCamera()
    camz = (cam.X,cam.Y,0)
    world = rs.WorldXYPlane()
    angle = 1

    rs.EnableRedraw(False)

    for i in frames:
        angle = 1
        while angle &gt;= 1:
            
            #get mid point of surface and move to z 0
            pointmid = rs.SurfaceAreaCentroid(i)
            pointmidz = (pointmid[0].X,pointmid[0].Y,0)
            #Get center UV of surface
            domainU = rs.SurfaceDomain(i, 0)
            domainV = rs.SurfaceDomain(i, 1)
            u = domainU[1]/2.0
            v = domainV[1]/2.0
            #Get normal vector of surface and cam vector
            vec1 = rs.SurfaceNormal(i,(u,v))
            vec1 = vec1.X,vec1.Y,0
            vec2 = rs.VectorCreate(camz,pointmidz)
            #find angle difference between the two vectors
            angle = rs.VectorAngle(vec1,vec2)
            angle = round(angle)
            #Rotate Object
            rs.RotateObject(i,pointmidz,angle)
        continue

    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="650f2340-8c69-4456-84be-cdc45ddf12be" bitmap_id="8fa94ce8-b572-453c-8fec-ae23f13cb9ad">
      <text>
        <locale_1033>Macro 16</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Multi-Offset Closed Curves</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Multi-Offset Closed Curves</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''
#Multi Offset

import rhinoscriptsyntax as rs

obj = rs.GetObjects('Select Closed Curves for Offset',preselect=True)
bool = rs.GetBoolean('Offset Direction',('Direction','Inward','Outward'),(False))


if bool:
    bool = bool[0]
    offset = rs.GetReal('Distance to Offset')
    
    for i in obj:
        if rs.IsCurveClosed(i):
            if bool == False:
                pt = rs.CurveAreaCentroid(i)
                pt = pt[0]
                rs.OffsetCurve(i,pt,offset)
            if bool == True:
                pt = [1000000,1000000,1000000]
                rs.OffsetCurve(i,pt,offset)
)</script>
    </macro_item>
    <macro_item guid="89640668-abe2-45c1-9303-09a96c1466e8" bitmap_id="adf3520d-c901-4048-a55a-24d4466b0615">
      <text>
        <locale_1033>Macro 17</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Delete or hide selected objects not in the current view</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Delete or hide selected objects not in the current view</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Delete selected objects outside view cone


import rhinoscriptsyntax as rs

obj = rs.GetObjects('Select objects to test', preselect=True)
bool = rs.GetBoolean('Delete or Hide',('Option','Delete','Hide'),(False))


if obj:
    rs.EnableRedraw(False)
    
    for i in obj:
        
        isVisible = rs.IsVisibleInView(i)
        if isVisible == False:
            if bool[0] == True:
                rs.HideObject(i)
            if bool[0] == False:
                rs.DeleteObject(i)

rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="00485d86-6061-4967-b8a5-b52920e03baa" bitmap_id="61624676-c9c5-49bf-ad20-9aa2092d1576">
      <text>
        <locale_1033>Macro 18</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Relocate World coordinated drawing to rhino origin</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Relocate World coordinated drawing to rhino origin</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Truncate World Coordinate

import rhinoscriptsyntax as rs


#Get setout point
point = rs.GetPoint("Pick Point for World Coordinate value")

if point:
    rs.EnableRedraw(False)
    northing = round(point.Y,5)
    easting = round(point.X,5)

    #Add origin layer and lock it
    rs.AddLayer("_ORIGIN_",(255,0,0),visible=True,locked=True)
    originPoint = rs.AddPoint(point)

    #Move all objects to origin
    allObj = rs.AllObjects()
    vector = rs.VectorCreate((0,0,0),point)
    rs.MoveObjects(allObj,vector)

    #Draw origin marker
    circle = rs.AddCircle(originPoint,1)
    quads = rs.EllipseQuadPoints(circle)
    line1 = rs.AddLine(quads[0],quads[1])
    line2 = rs.AddLine(quads[2],quads[3])

    #Draw text marker and designate a name
    text = rs.AddText((" E "+ str(easting) + " N " + str(northing)), originPoint, 0.5)
    rs.ObjectName(text, "_ORIGIN_TEXT_")
    rs.ObjectName(originPoint, "_ORIGIN_POINT_")

    #Move geometry to locked origin layer
    rs.ObjectLayer([circle, line1, line2, originPoint, text], "_ORIGIN_")
    
    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="b7943e02-c0c3-4bd4-af85-e859db81c052" bitmap_id="85a60542-9518-495a-80eb-1e3ee6470955">
      <text>
        <locale_1033>Macro 19</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Restore world coordinated drawing to world coordinates</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Restore world coordinated drawing to world coordinates</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Restore world coordinate

import rhinoscriptsyntax as rs

rs.EnableRedraw(False)

#retreive northing and easting from text object
obj = rs.ObjectsByName("_ORIGIN_TEXT_")
if obj:
    text = rs.TextObjectText(obj)
    textList = text.split()
    easting = float(textList[1])
    northing = float(textList[3])
    
    #create reference coordinates to make vector
    orPoint = (easting,northing,0)
    point = rs.PointCoordinates(rs.ObjectsByName("_ORIGIN_POINT_"))
    vector = rs.VectorCreate(orPoint,point)
    
    #move all objects back to original origin point
    allObj = rs.AllObjects()
    rs.MoveObjects(allObj,vector)
    
    #delete coordinate geometry
    isCurrent = rs.IsLayerCurrent("_ORIGIN_")
    if isCurrent == False:
        rs.PurgeLayer("_ORIGIN_")
    if isCurrent == True:
        defaultCheck = rs.IsLayer("Default")
        if defaultCheck == True:
            rs.CurrentLayer("Default")
            rs.PurgeLayer("_ORIGIN_")
        if defaultCheck == False:
            rs.AddLayer("Default")
            rs.CurrentLayer("Default")
            rs.PurgeLayer("_ORIGIN_")
    
    rs.EnableRedraw(True)
)</script>
    </macro_item>
  </macros>
  <bitmaps>
    <small_bitmap item_width="16" item_height="16">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap_item guid="b54432f0-91ec-43b6-8b11-4a7654e19716" index="16" />
      <bitmap_item guid="d59a330a-0413-4632-9c5c-1d8f613a7bd0" index="17" />
      <bitmap_item guid="8fa94ce8-b572-453c-8fec-ae23f13cb9ad" index="18" />
      <bitmap_item guid="adf3520d-c901-4048-a55a-24d4466b0615" index="19" />
      <bitmap_item guid="61624676-c9c5-49bf-ad20-9aa2092d1576" index="20" />
      <bitmap_item guid="85a60542-9518-495a-80eb-1e3ee6470955" index="21" />
      <bitmap>iVBORw0KGgoAAAANSUhEUgAAABAAAAFgCAYAAACypvkUAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsAAAA7AAWrWiQkAAAITSURBVHhe7dNBSBRRGMDxR1RI14Kgc3Sr6BAF
3Tp0r3uXCi91E7wEauZoe7AOum1lVAcLEzwEJgxa5gYlmVS7zray3TrIHqQgS3GZ/ZpvZt9rdA3s
1uH/g4+d/eZ937x5740BAAAAAAAAAAAAAAAAAAAAAAAAAAAAgP9F3XQfDY2XrZnuz+vGW9XQa83p
vcawZmI6W6JBuaggFOPJVqH3QtNzR8c2yhJJcc90fVefhC03pL6zr6lYc3pfr6MHTW9ook/WG0ue
L+UvFRmZmJfq/puuWK/zUx/k64PXLqcziYvrxjtip20bjBfLMvJsTpb39cvy3n5pG34rQaUii0FZ
wj2ZuIHWxGsSdRq0XW0DG+2389KenZHMbOByP848Ss3Cy5qa8Uo2Ubg0JgNzJRcXnr6Ti1F0vFlw
ueL5UddAd8esm65fNhHu6JVMpy/nJj/FYRvY/5kuPx5jx+sWb2hgm6wcuCXfj9+Tb6fuy7XMC2nL
5eMYP/vEjdOIG6RfwUYtWrifJ4dk9XAunkHrq4JcninKleg3OP3wzzh9hfQi2lg7OCAr0dPXDg1K
6+NZmQoW3SIu9fpuXLyI6W3cKgrH7oo/X0q2caEs1avP47zbRmUP0t/i/YkhmfxYkmrHhMu5g6SS
o3z9Zbpoc9R3R0e5ccSbjrJKmmznY9LZbipO0zXRxfnnzxkAAAAAAAAAAGBbjPkNjIVBIFxxNOAA
AAAASUVORK5CYII=</bitmap>
    </small_bitmap>
    <normal_bitmap item_width="24" item_height="24">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap_item guid="b54432f0-91ec-43b6-8b11-4a7654e19716" index="16" />
      <bitmap_item guid="d59a330a-0413-4632-9c5c-1d8f613a7bd0" index="17" />
      <bitmap_item guid="8fa94ce8-b572-453c-8fec-ae23f13cb9ad" index="18" />
      <bitmap_item guid="adf3520d-c901-4048-a55a-24d4466b0615" index="19" />
      <bitmap_item guid="61624676-c9c5-49bf-ad20-9aa2092d1576" index="20" />
      <bitmap_item guid="85a60542-9518-495a-80eb-1e3ee6470955" index="21" />
      <bitmap>iVBORw0KGgoAAAANSUhEUgAAABgAAAIQCAYAAACbu668AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsAAAA7AAWrWiQkAAARqSURBVHhe7dR7TJV1HMfxczwg94D0xBRCcCKI
AsISYrC0OSBJ2BLkpnKRZM2prQhMAeOPmqSoiCwdLUPQSG5WzGyiwmCLvHRZNHA1/SNXbUkxLir3
T9/febithZ2Wf/jH57W9t4fzPM/ve57n4Tw6IiIiIiIiIiIiIiIiInq8WUjxUpTpr0csfJ6Vbd3r
a2OQFhw+aNDpjstnPtqu/8fd0mAoiV3md7d1Wx5QcwXDF6/hXHYh1izyuSP7d0vzTUf+R07SjrBF
Xj+dTHgFo/srgUM1wBFJhqCtA/0Nl1GcnAl/48IbcmyCpG7hv9JLiQudn2w5GJ2E3wtPACX1wIEz
QFEVoAa9cwo4KoMaWoH2Ltwqr0HO87Hj1hYWn8m5a02rPIS9tV5/KdC4ELXp2eNjxdXyreuAd09r
AybbL1VeAK7/iPsXvsKxpKxxb8d5MOj0pybWmZV9gK1TbeniVUhd4DmcHhDyoGX7PuBwLVD88fRV
nLkENH+L2pyikUS/4KHc5YEPLkYkYK7eUDWxzqzsfG0dz34ZuA53w5LHy1yfGYqc53nv1dDoB7f3
lmqDDp1F+2sHx9JD1gxudFs80JiQMYLyOtzOzIGcX6EtMzsZ4FDTFBCBvvAUUx1+UaMFbl4D61yX
9n4Qnz741gtxw+td3XvfD40Z6D5QPob6JuDzNnTuyDdrgO1yK6fay/6R+DM8Gb+EbkR3WCJ6wpJw
zTfy/hJru4Esz5V9P7+0bQR7jgDHqzGWdxg42YDOXfvMG7DCyqGuWQb0TAxQ/SoNP7cZyUZP3IjN
AF4uwFjamxjdnIPR9N3Ah+fQudPMAX62DvXNAXIFYdMDVP1yuxKMHmh9cQuwNQ+jW2TxTdkYzdwL
VHwiAwrMGyD/RfUtK80YkJorV/CGNqCqEV1m3iK7ADvnxvagaHnAZgxQV5Emt6i4Arcyc9WA09oy
s3NwtLA8X7Ik2PRwe2VRdf9nGzCuFs/Mx720XJwIjVID3tOWebiQuXp9ZYrRbeiSf4QMSZbfRCIG
/jYAGXJrpJaoFMS7e3br9fpjcq63tsQ/S5NmvuvXe1jaXMl+2hc/rIrF+OpUpLh44mpMOpBViJsb
srDVO2jMRV7jcmyYdorJailT25zmKF2V+iT1cw+UFPVW3e5v43SzwjsUccZFOB+ZgLJnI7HM3vm6
7EuUbNSBIkiqlHqkLmmONGWF9Juk7qNqpzSTu6VOv99qjqHfx2H+HTlzj3z2hLZryi5p8vw/JA9p
Soz0jVQkqfe7evWqyzRKM6lb4attTlHHqGM/lb6WDkptUqw0xUWanLhUUg+sQ/pO+kIqk/KkTZJ6
VvkTn12Q1DHfS6WSl6QskFy1zdk9JW2Q3paqJfUNmyZS2x9Jal+cpI59JKwlK22TiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIjocaPT/QVY/DF2EOaaVgAAAABJRU5ErkJggg==</bitmap>
    </normal_bitmap>
    <large_bitmap item_width="32" item_height="32">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap_item guid="b54432f0-91ec-43b6-8b11-4a7654e19716" index="16" />
      <bitmap_item guid="d59a330a-0413-4632-9c5c-1d8f613a7bd0" index="17" />
      <bitmap_item guid="8fa94ce8-b572-453c-8fec-ae23f13cb9ad" index="18" />
      <bitmap_item guid="adf3520d-c901-4048-a55a-24d4466b0615" index="19" />
      <bitmap_item guid="61624676-c9c5-49bf-ad20-9aa2092d1576" index="20" />
      <bitmap_item guid="85a60542-9518-495a-80eb-1e3ee6470955" index="21" />
      <bitmap>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
sQAAAABJRU5ErkJggg==</bitmap>
    </large_bitmap>
  </bitmaps>
  <scripts />
</RhinoUI>