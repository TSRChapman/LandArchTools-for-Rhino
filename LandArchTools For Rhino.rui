<?xml version="1.0" encoding="utf-8"?>
<RhinoUI major_ver="3" minor_ver="0" guid="0804c739-59c2-4cd7-86d9-ddaf63e97340" localize="False" default_language_id="1033" dpi_scale="100">
  <extend_rhino_menus>
    <menu guid="d58ceae7-fdb0-4104-80da-274b94ad44a9">
      <text>
        <locale_1033>Extend Rhino Menus</locale_1033>
      </text>
    </menu>
  </extend_rhino_menus>
  <menus />
  <tool_bar_groups>
    <tool_bar_group guid="1067bebe-88d0-4b21-ab8b-9c9b8b4860e0" dock_bar_guid32="00000000-0000-0000-0000-000000000000" dock_bar_guid64="764b7a3c-c626-4771-bff3-c47aa63fd0b1" active_tool_bar_group="d51f71b9-4a55-481d-a2ed-9bbc51b0bc7e" single_file="False" hide_single_tab="False" point_floating="2368,390">
      <text>
        <locale_1033>LandArchTools</locale_1033>
      </text>
      <tool_bar_group_item guid="d51f71b9-4a55-481d-a2ed-9bbc51b0bc7e" major_version="1" minor_version="1">
        <text>
          <locale_1033>LandArchTools</locale_1033>
        </text>
        <tool_bar_id>d8dc19cb-56d8-4f50-b015-76d6b2e6fb1f</tool_bar_id>
      </tool_bar_group_item>
      <dock_bar_info dpi_scale="100" dock_bar="False" docking="True" horz="False" visible="True" floating="True" mru_float_style="8192" bar_id="59476" mru_width="868" point_pos="-2,-2" float_point="2368,390" rect_mru_dock_pos="0,0,0,0" dock_location_u="59419" dock_location="top" float_size="721,62" />
    </tool_bar_group>
  </tool_bar_groups>
  <tool_bars>
    <tool_bar guid="d8dc19cb-56d8-4f50-b015-76d6b2e6fb1f" bitmap_id="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb">
      <text>
        <locale_1033>LandArchTools</locale_1033>
      </text>
      <tool_bar_item guid="bcc9156a-6e1d-4be5-8f0e-7bfcfc3e4f0c">
        <left_macro_id>5bb60bb6-b5e1-4cf6-b207-2aa05bd6bf0f</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="49c53416-e30d-414d-a4e3-f9daca5032dc">
        <left_macro_id>ba483181-ff75-4d51-9bba-974118b80da5</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2f4946a0-eb09-4882-aecb-284bc226419e">
        <left_macro_id>812b1c36-0e85-4b6c-9982-e2b575bf9c7b</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="e021088f-3f01-4ec2-b7f8-7e141567db90">
        <left_macro_id>4211923b-f22f-4ab1-8745-e05f836d0bf8</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="3c553441-e8b2-4259-9aae-3907facf4694">
        <left_macro_id>6beb1246-fc82-4dfc-bb54-1188098f1029</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="70198725-314c-45f3-be45-e35fdd8208df">
        <left_macro_id>ef338e36-b652-464e-9f92-9d8c746720f3</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="eef8629f-6a85-4738-8531-046c164ab354">
        <left_macro_id>5a023420-191b-433d-9347-d6221ccc57d3</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="c1155d88-0d72-4cd3-a0e2-7a23baa8f8d1">
        <left_macro_id>c4df9c08-dfb5-4ff9-a629-7d6192f2ec4f</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="73e33de0-b307-41c7-b2cf-7058df45f707">
        <left_macro_id>2f54edf0-21f1-40d0-9cfb-31f8276274ca</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="7e3ac271-33ec-4c9d-95df-0f279a9766bf">
        <left_macro_id>89640668-abe2-45c1-9303-09a96c1466e8</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9f05992f-75c6-4360-8a00-5412592b1130">
        <left_macro_id>d1ca3149-4600-4d59-891a-116db286a114</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9d56baae-f374-4ee4-8917-a3170cadab27">
        <left_macro_id>161b2a13-4700-4945-9dae-25c70928152b</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="7d72bb3e-1647-4aea-b42b-f69fcedf7f4d">
        <left_macro_id>05291655-fced-47a7-a765-dc4637a8e6f2</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="5598f291-9102-4785-ad1f-89305c097143">
        <left_macro_id>4055eaa6-4427-427c-b6a5-e6cdbac914c2</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="59e8d235-d308-4e12-8984-461790c354b8">
        <left_macro_id>650f2340-8c69-4456-84be-cdc45ddf12be</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="31d82a86-c02b-4786-9489-884129774c95">
        <left_macro_id>652506ee-7343-475c-a018-6ed9c0a76b29</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="1c7275d2-d2bb-4582-835c-2dc2ea64040d">
        <left_macro_id>87791b70-7cac-4efc-a5c4-deece16831aa</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="9b1ad1b4-64b4-46ff-a3b6-2df1205041f4">
        <left_macro_id>96e93532-81ce-4156-b7f7-b7ff1364c489</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="0c1a0eb2-86c5-4735-a356-9ab261bf6b7c">
        <left_macro_id>d16957a9-f662-446d-9801-c0533fb38255</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2dce03e3-13e1-4b50-a92c-2f59b9947d33">
        <left_macro_id>c047d19d-b398-41b0-9fd8-74fe11b70e04</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="135b9233-ad6d-4ea1-b6b8-967e3eb44a41">
        <left_macro_id>cfb1aa22-1db1-4869-b63d-8a0474245511</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="c99e2c9d-6eca-4bb1-b6ed-a1bc76f32a53">
        <left_macro_id>978e1959-d9a6-4142-8d86-6b21b079eaa6</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="8f524430-3fa1-4122-b71c-bdb05bc6ac7e">
        <left_macro_id>00485d86-6061-4967-b8a5-b52920e03baa</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2f572106-b4a8-40ad-883d-b7e4c17ba136">
        <left_macro_id>b7943e02-c0c3-4bd4-af85-e859db81c052</left_macro_id>
      </tool_bar_item>
      <tool_bar_item guid="2d5840f3-4ba6-4be7-b14d-725b51e62bb2">
        <left_macro_id>63812035-1fa4-4e2a-8e3c-41fae14a9a2c</left_macro_id>
      </tool_bar_item>
    </tool_bar>
  </tool_bars>
  <macros>
    <macro_item guid="5bb60bb6-b5e1-4cf6-b207-2aa05bd6bf0f" bitmap_id="f9c5b694-dced-4977-a15f-92d9fff043bc">
      <text>
        <locale_1033>Macro 00</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Calculate grade between two points</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Calculate grade between two points</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Calculate grade between two given points
#By Thomas Chapman on 11/01/2021

import rhinoscriptsyntax as rs
import math as m

#Determin Unit system and scale m input to unit system scale and close if not mm, cm, m
def scale():
    system = rs.UnitSystem()
    if system == 2 or system == 3 or system == 4:
        scaleFactorDict = {2:1000, 3:100, 4:1}
        scaleFactor = scaleFactorDict[system]
        return scaleFactor

    if system != 2 or system != 3 or system != 4:
        return None

def main():
    if scale() == None:
        rs.MessageBox("This tool is can only be used in mm, cm or m model units")
        return None
    
    # Get points from user
    pt1 = rs.GetPoint('Pick the first point')
    pt2 = rs.GetPoint('Pick the second point')
    
    if pt2:
        rs.EnableRedraw(False)
        hypotenuse = rs.Distance(pt1, pt2)
    
        # Find the rise of given points in any order
        if pt1.Z == pt2.Z:
            return None
        if pt1.Z &gt; pt2.Z:
            rise = pt1.Z - pt2.Z
        elif pt1.Z &lt; pt2.Z:
            rise = pt2.Z - pt1.Z
    
        # Find the run of given points
        run = m.sqrt(hypotenuse**2 - rise**2)
    
        # Detect model units and scale to mm, if mm do nothing
        rise = rise*scale()
        run = run*scale()
    
        # Calculate grade based on rise and run
        try:
            grade = run / rise
    
        except ZeroDivisionError:
            print('No Grade Found')
            exit()
    
        # Print text dot to screen
        curve = rs.AddCurve([pt1,pt2])
        midpoint = rs.CurveMidPoint(curve)
        rs.DeleteObject(curve)
        rs.AddTextDot('1:' + str(abs(round(grade,2))),midpoint)
        rs.EnableRedraw(True)

main()
)</script>
    </macro_item>
    <macro_item guid="ba483181-ff75-4d51-9bba-974118b80da5" bitmap_id="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92">
      <text>
        <locale_1033>Macro 02</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Display the RL of a given point</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Display the RL of a given point</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''


# Show RL of specified point and copy to clipboard
# By Thomas Chapman on 01/10/2021

import rhinoscriptsyntax as rs
import os

def scale():
    system = rs.UnitSystem()
    if system == 2 or system == 3 or system == 4:
        scaleFactorDict = {2:0.001, 3:0.01, 4:1}
        scaleFactor = scaleFactorDict[system]
        return scaleFactor

    if system != 2 or system != 3 or system != 4:
        return None

def main():
    if scale() == None:
        rs.MessageBox("This tool is can only be used in mm, cm or m model units")
        return None
        
    point = rs.GetPoint('Select point')
    
    if point:
        pointZ = point.Z
    pointZ = pointZ*scale()
    rs.AddTextDot('+RL ' + str(round(pointZ,3)),point)
    
    #Copy RL to Clipboard
    RL = str(round(pointZ,3))
    rs.ClipboardText(RL)

main()
)</script>
    </macro_item>
    <macro_item guid="4211923b-f22f-4ab1-8745-e05f836d0bf8" bitmap_id="8a465cae-79a9-4baa-b77e-ef3d92b27f3c">
      <text>
        <locale_1033>Macro 03</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Elevate a given object to a specified RL</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

# MOVE OBJECT TO SPECIFIED RL
# BY THOMAS CHAPMAN ON 01/10/2021

import rhinoscriptsyntax as rs
import Rhino.Geometry as geo


#Determin Unit system and scale m input to unit system scale and close if not mm, cm, m
def scale():
    system = rs.UnitSystem()
    if system == 2 or system == 3 or system == 4:
        scaleFactorDict = {2:1000, 3:100, 4:1}
        scaleFactor = scaleFactorDict[system]
        return scaleFactor

    if system != 2 or system != 3 or system != 4:
        return None



def main():

    if scale() == None:
        rs.MessageBox("This tool is can only be used in mm, cm or m model units")
        return None

    obj = rs.GetObjects('Select objects',preselect=True)
    if obj:
        current = rs.GetPoint('Select point')
        
        if current: 
            rl = rs.GetString('RL to move to?')
            rl = float(rl)
            rl = rl*scale()
            
            if rl == 0.000: #move objects to the 0 coord
                target3 = current.Z
                if target3:
                    target3 = target3 *-1
                    target4 = geo.Point3d(0,0,target3)
                    rs.MoveObject(obj, target4)
    
            elif rl &gt; 0.000:
                target = rl - current.Z #+ or - number to target location
                target2 = geo.Point3d(0,0,target) #translated vector needed to hit target
                rs.MoveObject(obj, target2)

main ()
)</script>
    </macro_item>
    <macro_item guid="ef338e36-b652-464e-9f92-9d8c746720f3" bitmap_id="bca0a23f-5397-475b-9a42-1ef72c11f863">
      <text>
        <locale_1033>Macro 01</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Rotate blocks along their isertion point, Z oriented</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#RANDOM ROTATE BLOCK INSTANCES AROUND INSERTION POINT
#BY THOMAS CHAPMAN ON 01/09/2021

import rhinoscriptsyntax as rs
import random as r

vec = rs.VectorCreate([0,0,1],[0,0,0])
obj = rs.GetObjects('pick Blocks to rotate randomly', filter=4096, preselect=True)

if obj:
    rs.EnableRedraw(False)

    for object in obj:
        num = r.randrange(-180,180)
        point = rs.BlockInstanceInsertPoint(object)
        rs.RotateObject(object, point, num, vec)

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="5a023420-191b-433d-9347-d6221ccc57d3" bitmap_id="f3c1fd4a-470f-412b-98a3-4374e134c963">
      <text>
        <locale_1033>Macro 12</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Random Drop Block</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Random Drop Block</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs
import random as r


obj = rs.GetObjects('Pick blocks to drop randomly', filter=4096, preselect=True)
dropnum = rs.GetReal("Enter max drop distance")

if obj:
    rs.EnableRedraw(False)

    for object in obj:
        num = r.uniform((-abs(dropnum)),0)
        print num
        vec = rs.VectorCreate([0,0,num],[0,0,0])
        point = rs.BlockInstanceInsertPoint(object)
        rs.MoveObject(object,vec)

    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="d1ca3149-4600-4d59-891a-116db286a114" bitmap_id="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24">
      <text>
        <locale_1033>Macro 04</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Drop objects to surface/mesh in Z</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#DROP OBJECTS TO SELECTED SRF    


import rhinoscriptsyntax as rs

obj = rs.GetObjects('Select Objects',rs.filter.curve | rs.filter.instance | rs.filter.mesh | rs.filter.surface | rs.filter.subd | rs.filter.light | rs.filter.polysurface,preselect=True)
srf = rs.GetObject ('Select Surface')

if obj:
    if srf:
        
        rs.EnableRedraw(False)
        
        # Check if srf is a mesh, if so convert to Nurb
        isMesh = rs.IsMesh(srf)
        if isMesh == True: 
            srf  = rs.MeshToNurb(srf)
        
        # For each object send test rays up and down in Z coord
        # Move each object to the ray test that hits a srf
        for i in obj:
            bndBox = rs.BoundingBox(i)
            pt1 = bndBox[0]
            pt2 = bndBox[2]
            crv = rs.AddLine(pt1,pt2)
            
            if crv:
                midcrv = rs.CurveMidPoint(crv)
                rs.DeleteObject(crv)
                
            ray_pt_up = rs.ShootRay(srf,midcrv,(0,0,1),reflections=1)
            ray_pt_down = rs.ShootRay(srf,midcrv,(0,0,-1),reflections=1)
            
            if ray_pt_up:
                vector = rs.VectorCreate(ray_pt_up[1],midcrv)
                rs.MoveObject(i,vector)
                
            if ray_pt_down:
                vector = rs.VectorCreate(ray_pt_down[1],midcrv)
                rs.MoveObject(i,vector)  
        
        # deleate any created srf
        if isMesh == True:
            rs.DeleteObject(srf)
        rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="161b2a13-4700-4945-9dae-25c70928152b" bitmap_id="bd3a0457-e280-44b4-95ec-68bf6d152c4f">
      <text>
        <locale_1033>Macro</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Draw Aus DDA standard ramps</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Model Standard Australian DDA Ramps

import rhinoscriptsyntax as rs
import math as m

#Determin Unit system and scale m input to unit system scale and close if not mm, cm, m
def scale():
    system = rs.UnitSystem()
    if system == 2 or system == 3 or system == 4:
        scaleFactorDict = {2:1000, 3:100, 4:1}
        scaleFactor = scaleFactorDict[system]
        return scaleFactor

    if system != 2 or system != 3 or system != 4:
        return None

def main():
    if scale() == None:
        rs.MessageBox("This tool is can only be used in mm, cm or m model units")
        return None

    Mult = scale()
    pt00 = rs.GetPoint('Pick insertion point')
    
    if pt00:
    
    
        pt01 = rs.CreatePoint(pt00.X,pt00.Y)
        RampOptions = 'Step Ramp', 'Kerb Ramp', 'Ramp', 'Walkway'
        RampType = rs.PopupMenu(RampOptions)
    
        rs.EnableRedraw(False)
    
    
        if RampType == -1:
            exit()
    
        if RampType == 0: #Step Ramp
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.9*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)
    
        if RampType == 1: #Kerb Ramp
        #main ramp portion
            Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(0.190*Mult)),((pt01.X+1.52*Mult),pt01.Y,pt01.Z),(pt01)])
            Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
            rs.CapPlanarHoles(Surface)
            rs.DeleteObject(Curve)
    
        if RampType == 2: #Ramp
            Grade = '1:19','1:18','1:17','1:16','1:15','1:14'
            Index = rs.PopupMenu(Grade)
            GradeNum = [19,18,17,16,15,14]
            if Index == 5:
                Rise = 9/(GradeNum[Index])
                Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+9*Mult),pt01.Y,pt01.Z),(pt01)])
                Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
                rs.CapPlanarHoles(Surface)
                rs.DeleteObject(Curve)
            elif Index != 5:
                Rise = 15/(GradeNum[Index])
                Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
                Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
                rs.CapPlanarHoles(Surface)
                rs.DeleteObject(Curve)
    
        if RampType == 3: #Walkway
            Grade = '1:33','1:32','1:31','1:30','1:29','1:28','1:27','1:26','1:25','1:24','1:23','1:22','1:21','1:20'
            Index = rs.PopupMenu(Grade)
            GradeNum = [33,32,31,30,29,28,27,26,25,24,23,22,21,20]
            if Index == 0:
                Rise = 25/(GradeNum[Index])
                Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+25*Mult),pt01.Y,pt01.Z),(pt01)])
                Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
                rs.CapPlanarHoles(Surface)
                rs.DeleteObject(Curve)
            if Index == 13:
                Rise = 15/(GradeNum[Index])
                Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+15*Mult),pt01.Y,pt01.Z),(pt01)])
                Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
                rs.CapPlanarHoles(Surface)
                rs.DeleteObject(Curve)
            elif Index != 0 or Index != 13:
                Interp = m.floor((( GradeNum[Index] - 20)*(25 - 15)/(33 - 20))+15) #Linear interpolation of landing distance - DDA requirement...Srsly?
                Rise = Interp/(GradeNum[Index])
                Curve = rs.AddPolyline([(pt01),(pt01.X,pt01.Y,(Rise*Mult)),((pt01.X+Interp*Mult),pt01.Y,pt01.Z),(pt01)])
                Surface = rs.ExtrudeCurveStraight(Curve,(pt01),(pt01.X,(pt01.Y+1*Mult),pt01.Z))
                rs.CapPlanarHoles(Surface)
                rs.DeleteObject(Curve)
    
        rs.EnableRedraw(True)

main()
)</script>
    </macro_item>
    <macro_item guid="4055eaa6-4427-427c-b6a5-e6cdbac914c2" bitmap_id="4bec978a-dd98-4658-b848-0f810eefd6bf">
      <text>
        <locale_1033>Macro 05</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Patch Individual closed polylines</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Patch Multiple Individual closed polylines
#By Thomas Chapman 04/22/2021

import rhinoscriptsyntax as rs

geo = rs.GetObjects('Select Closed Polylines',preselect=True)

if geo:
    
    uv1 = rs.GetInteger('enter number of UV divisions',number=1,minimum=1)

    rs.EnableRedraw(False)
    for objects in geo:
        rs.AddPatch((objects),(uv1,uv1),tolerance=0.0001)
    rs.EnableRedraw(True)


)</script>
    </macro_item>
    <macro_item guid="652506ee-7343-475c-a018-6ed9c0a76b29" bitmap_id="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676">
      <text>
        <locale_1033>Macro 06</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Isolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Isolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

# Get object and find layer it is on
obj = rs.GetObjects('select an object on the layer to isolate',preselect=True)

if obj:


    rs.EnableRedraw(False)

    # Create list of selected obj layers
    selectedlayers = []
    for i in obj:
        layer = rs.ObjectLayer(i)
        selectedlayers.append(layer)

    # Select all objects on each layer

    for i in selectedlayers:
        rs.ObjectsByLayer(i,True)
    isolate = rs.SelectedObjects()

    allObjects = rs.AllObjects()

    for i in isolate:
        allObjects.remove(i)

    # Hide selected objects

    rs.HideObjects(allObjects)

    rs.UnselectAllObjects()

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="87791b70-7cac-4efc-a5c4-deece16831aa" bitmap_id="7c225bac-4566-4c22-8529-19795734ecf8">
      <text>
        <locale_1033>Macro 07</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Unisolate Layer</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Unisolate Layer</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Unisolate All objects
#By Thomas Chapman 21/05/01

import rhinoscriptsyntax as rs

obj = rs.HiddenObjects()

if obj:

    rs.ShowObjects(obj)
)</script>
    </macro_item>
    <macro_item guid="96e93532-81ce-4156-b7f7-b7ff1364c489" bitmap_id="3a30ba51-3cf2-4d5a-ae4e-e7727296e181">
      <text>
        <locale_1033>Macro 08</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Turn Selected Object Layers Off</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Turn Selected Object Layers Off</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

obj = rs.GetObjects("select obj Layers to turn off")

if obj:

    rs.EnableRedraw(False)

    for i in obj:
        layer = rs.ObjectLayer(i)
        rs.LayerVisible(layer, visible=False)

    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="d16957a9-f662-446d-9801-c0533fb38255" bitmap_id="5ecdbeb8-4c26-464d-965a-d29084b78338">
      <text>
        <locale_1033>Macro 09</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Plan View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Plan View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _T")

)</script>
    </macro_item>
    <macro_item guid="c047d19d-b398-41b0-9fd8-74fe11b70e04" bitmap_id="3f736f77-7940-4134-9713-dac547abd1c6">
      <text>
        <locale_1033>Macro 10</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Perspective View</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Perspective View</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

rs.Command("_setview _w _p")

)
</script>
    </macro_item>
    <macro_item guid="cfb1aa22-1db1-4869-b63d-8a0474245511" bitmap_id="c351dd99-b010-4a89-86fe-835dd645a1b8">
      <text>
        <locale_1033>Macro 11</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Import locate and scale NearMaps jpg</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
import struct
import imghdr
import rhinoscriptsyntax as rs

'''
Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Check document units

#Determin Unit system and scale m input to unit system scale and close if not mm, cm, m
def scale():
    system = rs.UnitSystem()
    if system == 2 or system == 3 or system == 4:
        scaleFactorDict = {2:1000, 3:100, 4:1}
        scaleFactor = scaleFactorDict[system]
        return scaleFactor

    if system != 2 or system != 3 or system != 4:
        return None

def get_image_size(fname):
    '''Determine the image type of fhandle and return its size.
    from draco'''
    with open(fname, 'rb') as fhandle:
        head = fhandle.read(24)
        if len(head) != 24:
            return
        if imghdr.what(fname) == 'png':
            check = struct.unpack('&gt;i', head[4:8])[0]
            if check != 0x0d0a1a0a:
                return
            width, height = struct.unpack('&gt;ii', head[16:24])
        elif imghdr.what(fname) == 'gif':
            width, height = struct.unpack('&lt;HH', head[6:10])
        elif imghdr.what(fname) == 'jpeg':
            try:
                fhandle.seek(0) # Read 0xff next
                size = 2
                ftype = 0
                while not 0xc0 &lt;= ftype &lt;= 0xcf:
                    fhandle.seek(size, 1)
                    byte = fhandle.read(1)
                    while ord(byte) == 0xff:
                        byte = fhandle.read(1)
                    ftype = ord(byte)
                    size = struct.unpack('&gt;H', fhandle.read(2))[0] - 2
                # We are at a SOFn block
                fhandle.seek(1, 1)  # Skip `precision' byte.
                height, width = struct.unpack('&gt;HH', fhandle.read(4))
            except Exception: #IGNORE:W0703
                return
        else:
            return
        return width, height

def main():
    if scale() == None:
        rs.MessageBox("This tool is can only be used in mm, cm or m model units")
        return None
    
    factor = scale()
    
    #Find and open jgw file, extract scalefactor and x and y coordinates
    
    jgw = rs.OpenFileName(title= 'Select .JGW file',filter="JGW Files (*.JGW)|*.JGW||" )
    
    with open(jgw,'rt') as f:
        numslist = f.read().splitlines()
    
    scaleFactor01 = numslist[0]
    
    worldx = float(numslist[4])*int(factor)
    worldy = float(numslist[5])*int(factor)
    
    #Find and open jpg file, extract pixel size
    
    jpg = rs.OpenFileName(title= 'Select .JPG image File',filter="JPG Files (*.JPG)|*.JPG||")
    
    size = get_image_size(jpg)
    
    scaleFactor02 = (float(size[0])*int(factor))
    scaleFactor03 = (float(size[1])*int(factor))
    
    # Calculate scale factor
    
    scaleFactorWidth = (float(scaleFactor01))*(float(scaleFactor02))
    scaleFactorHeight = (float(scaleFactor01))*(float(scaleFactor03))
    
    origin = (float(worldx), (float(worldy) - float(scaleFactorHeight)), 0)
    
    picturePlane = rs.PlaneFromFrame(origin,(1,0,0),(0,1,0))
    
    rs.AddPictureFrame(picturePlane,jpg,width=(float(scaleFactorWidth)), height=(float(scaleFactorHeight)))

main()
)</script>
    </macro_item>
    <macro_item guid="63812035-1fa4-4e2a-8e3c-41fae14a9a2c" bitmap_id="5bb47664-de86-4b8e-88ce-835cfa2b3981">
      <text>
        <locale_1033>Macro 13</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Create Standard Layers</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Create Standard Layers</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Create Standard Layers

import rhinoscriptsyntax as rs
import random as r

#Add Layers to document

rs.EnableRedraw(False)

layerList = [
"L_BLDS", 
"L_BNDY_WRKS", 
"L_EDGE",
"L_HARD_ROCK",
"L_HARD_WALL",
"L_HARD_STEP",
"L_HARD_RAMP",
"L_HARD_FNCE",
"L_HARD_PAV1",
"L_HARD_PAV2",
"L_HARD_PAV3",
"L_HARD_PAV4",
"L_LGHT",
"L_ENTO",
"L_PLAY_EQUI",
"L_PLNT",
"L_STRU",
"L_TEXT",
"L_TREE_PROP",
"L_TREE_RETN",
"L_WALL",
"_L_WORKING",
"L_SOFT_GRDN",
"L_SOFT_MLCH",
"L_SOFT_LAWN",
"L_SOFT_PLANT",
"L_FURN",
"_L_OFF"


]



layerList.sort()

parentLayer = rs.AddLayer(name="LANDSCAPE", color=None, visible=True, locked=False, parent=None)

for layer in layerList:
    rs.AddLayer(layer,(r.randrange(255),r.randrange(255),r.randrange(255)),visible=True, locked=False, parent= parentLayer)

rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="812b1c36-0e85-4b6c-9982-e2b575bf9c7b" bitmap_id="b54432f0-91ec-43b6-8b11-4a7654e19716">
      <text>
        <locale_1033>Macro 14</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Calculate Height difference between two points</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Calculate Height difference between two points</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

import rhinoscriptsyntax as rs

pt01 = rs.GetPoint('Select first point to measure from')
pt02 = rs.GetPoint('Select second point to measure to')

if pt02:

    pt01Z = pt01.Z
    pt02Z = pt02.Z

    height = abs(pt01Z-pt02Z)
    height = round(height, 3)

    rs.ClipboardText(height)

    rs.MessageBox(height, buttons=0, title="Height difference - Value copied to clipboard")
)</script>
    </macro_item>
    <macro_item guid="2f54edf0-21f1-40d0-9cfb-31f8276274ca" bitmap_id="d59a330a-0413-4632-9c5c-1d8f613a7bd0">
      <text>
        <locale_1033>Macro 15</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Rotate picture frames to face current camera view</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Rotate picture frames to face current camera view</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''
#Rotate picture frames to face camera

import rhinoscriptsyntax as rs

frames = rs.GetObjects("Select Picture Frames",filter=8,preselect=True)


#rotate surfaces around z axis towards camera point
if frames:

    cam = rs.ViewCamera()
    camz = (cam.X,cam.Y,0)
    world = rs.WorldXYPlane()
    angle = 1

    rs.EnableRedraw(False)

    for i in frames:
        angle = 1
        while angle &gt;= 1:
            
            #get mid point of surface and move to z 0
            pointmid = rs.SurfaceAreaCentroid(i)
            pointmidz = (pointmid[0].X,pointmid[0].Y,0)
            #Get center UV of surface
            domainU = rs.SurfaceDomain(i, 0)
            domainV = rs.SurfaceDomain(i, 1)
            u = domainU[1]/2.0
            v = domainV[1]/2.0
            #Get normal vector of surface and cam vector
            vec1 = rs.SurfaceNormal(i,(u,v))
            vec1 = vec1.X,vec1.Y,0
            vec2 = rs.VectorCreate(camz,pointmidz)
            #find angle difference between the two vectors
            angle = rs.VectorAngle(vec1,vec2)
            angle = round(angle)
            #Rotate Object
            rs.RotateObject(i,pointmidz,angle)
        continue

    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="650f2340-8c69-4456-84be-cdc45ddf12be" bitmap_id="8fa94ce8-b572-453c-8fec-ae23f13cb9ad">
      <text>
        <locale_1033>Macro 16</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Multi-Offset Closed Curves</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Multi-Offset Closed Curves</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''
#Multi Offset

import rhinoscriptsyntax as rs

obj = rs.GetObjects('Select Closed Curves for Offset',preselect=True)
bool = rs.GetBoolean('Offset Direction',('Direction','Inward','Outward'),(False))


if bool:
    bool = bool[0]
    offset = rs.GetReal('Distance to Offset')
    
    for i in obj:
        if rs.IsCurveClosed(i):
            if bool == False:
                pt = rs.CurveAreaCentroid(i)
                pt = pt[0]
                rs.OffsetCurve(i,pt,offset)
            if bool == True:
                pt = [1000000,1000000,1000000]
                rs.OffsetCurve(i,pt,offset)
)</script>
    </macro_item>
    <macro_item guid="89640668-abe2-45c1-9303-09a96c1466e8" bitmap_id="adf3520d-c901-4048-a55a-24d4466b0615">
      <text>
        <locale_1033>Macro 17</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Delete or hide selected objects not in the current view</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Delete or hide selected objects not in the current view</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Delete selected objects outside view cone


import rhinoscriptsyntax as rs

obj = rs.GetObjects('Select objects to test', preselect=True)
bool = rs.GetBoolean('Delete or Hide',('Option','Delete','Hide'),(False))


if obj:
    rs.EnableRedraw(False)
    
    for i in obj:
        
        isVisible = rs.IsVisibleInView(i)
        if isVisible == False:
            if bool[0] == True:
                rs.HideObject(i)
            if bool[0] == False:
                rs.DeleteObject(i)

rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="00485d86-6061-4967-b8a5-b52920e03baa" bitmap_id="61624676-c9c5-49bf-ad20-9aa2092d1576">
      <text>
        <locale_1033>Macro 18</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Relocate World coordinated drawing to rhino origin</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Relocate World coordinated drawing to rhino origin</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Truncate World Coordinate

import rhinoscriptsyntax as rs


#Get setout point
point = rs.GetPoint("Pick Point for World Coordinate value")

if point:
    rs.EnableRedraw(False)
    northing = round(point.Y,5)
    easting = round(point.X,5)

    #Add origin layer and lock it
    rs.AddLayer("_ORIGIN_",(255,0,0),visible=True,locked=True)
    originPoint = rs.AddPoint(point)

    #Move all objects to origin
    allObj = rs.AllObjects()
    vector = rs.VectorCreate((0,0,0),point)
    rs.MoveObjects(allObj,vector)

    #Draw origin marker`
    circle = rs.AddCircle(originPoint,1)
    quads = rs.EllipseQuadPoints(circle)
    line1 = rs.AddLine(quads[0],quads[1])
    line2 = rs.AddLine(quads[2],quads[3])

    #Draw text marker and designate a name
    text = rs.AddText((" E "+ str(easting) + " N " + str(northing)), originPoint, 0.5)
    rs.ObjectName(text, "_ORIGIN_TEXT_")
    rs.ObjectName(originPoint, "_ORIGIN_POINT_")

    #Move geometry to locked origin layer
    rs.ObjectLayer([circle, line1, line2, originPoint, text], "_ORIGIN_")
    
    rs.EnableRedraw(True)
)</script>
    </macro_item>
    <macro_item guid="b7943e02-c0c3-4bd4-af85-e859db81c052" bitmap_id="85a60542-9518-495a-80eb-1e3ee6470955">
      <text>
        <locale_1033>Macro 19</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Restore world coordinated drawing to world coordinates</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Restore world coordinated drawing to world coordinates</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Restore Origin

import rhinoscriptsyntax as rs

rs.EnableRedraw(False)

#retreive northing and easting from text object
obj = rs.ObjectsByName("_ORIGIN_TEXT_")
if obj:
    text = rs.TextObjectText(obj)
    textList = text.split()
    easting = float(textList[1])
    northing = float(textList[3])
    
    #create reference coordinates to make vector
    orPoint = (easting,northing,0)
    point = rs.PointCoordinates(rs.ObjectsByName("_ORIGIN_POINT_"))
    vector = rs.VectorCreate(orPoint,point)
    
    #move all objects back to original origin point
    allObj = rs.AllObjects()
    rs.MoveObjects(allObj,vector)
    
    #delete coordinate geometry
    isCurrent = rs.IsLayerCurrent("_ORIGIN_")
    if isCurrent == False:
        rs.PurgeLayer("_ORIGIN_")
    if isCurrent == True:
        defaultCheck = rs.IsLayer("Default")
        if defaultCheck == True:
            rs.CurrentLayer("Default")
            rs.PurgeLayer("_ORIGIN_")
        if defaultCheck == False:
            rs.AddLayer("Default")
            rs.CurrentLayer("Default")
            rs.PurgeLayer("_ORIGIN_")
    
    rs.EnableRedraw(True)

)</script>
    </macro_item>
    <macro_item guid="978e1959-d9a6-4142-8d86-6b21b079eaa6" bitmap_id="6e502bab-241b-4e5b-ab6e-45895a855e3d">
      <text>
        <locale_1033>Macro 20</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Get Coordinates</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Get Coordinates</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#Get Coordinates

import rhinoscriptsyntax as rs

#Get point from user and round to nearest 3 decimal points
point = rs.GetPoint("Pick point to find Coordinate information")
pointX = round(point.X, 3)
pointY = round(point.Y, 3)
pointZ = round(point.Z, 3)

#store string in variable
coord = ("E " + str(pointX) + " N " + str(pointY) + " Z " + str(pointZ))

#Create textdot
rs.AddTextDot("E " + str(pointX) + " N " + str(pointY) + " Z " + str(pointZ),point)

#copy to clipboard
rs.ClipboardText(coord)
)</script>
    </macro_item>
    <macro_item guid="05291655-fced-47a7-a765-dc4637a8e6f2" bitmap_id="e665d72d-4470-43f1-9a74-a7f1a96e66ba">
      <text>
        <locale_1033>Macro 21</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Stair Generator</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Stair Generator</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (
# Imports
import System
import Rhino.UI
import Eto.Drawing as drawing
import Eto.Forms as forms
import rhinoscriptsyntax as rs

################################################################################

# SampleEtoRoomNumber dialog class
class StairGenDialog(forms.Dialog[bool]):

    # Dialog box Class initializer
    def __init__(self):
        # Initialize dialog box
        self.Title = 'LandArchTools: Stair Generator'
        self.Padding = drawing.Padding(10)
        self.Resizable = False
        self.Closing += self.OnFormClosed
################################################################################
        
        # Create controls for the dialog
        #Stair gen label
        self.stairGenLabel = forms.Label(Text = 'STAIR GENERATOR')
        
        #Gen Handrail label
        self.genStairLabel = forms.Label(Text = 'Generate Stair?:')
        #Gen Handrail control
        self.genStairBool = forms.CheckBox()
        self.genStairBool.Checked = False
        self.genStairBool.CheckedChanged += self.stairGen
        
        #Number of Steps Label
        self.numStepsLabel = forms.Label(Text = 'Number of steps:')
        #Number of Steps control
        self.numStepsC = forms.NumericStepper()
        self.numStepsC.DecimalPlaces = 0
        self.numStepsC.Increment = 1
        self.numStepsC.MaxValue = 100
        self.numStepsC.MinValue = 2
        self.numStepsC.Value = 3
        self.numStepsC.ValueChanged += self.stairGen
        self.numStepsC.ValueChanged += self.handrailGen

        
        #Tread label
        self.treadLabel = forms.Label(Text = 'Tread (mm):')
        #Tread length control
        self.treadC = forms.NumericStepper()
        self.treadC.DecimalPlaces = 0
        self.treadC.Increment = 1
        self.treadC.MaxValue = 1000
        self.treadC.MinValue = 1
        self.treadC.Value = 300
        self.treadC.ValueChanged += self.stairGen
        self.treadC.ValueChanged += self.handrailGen
        
        #Riser Label
        self.riserLabel = forms.Label(Text = 'Riser (mm):')
        #Tread length control
        self.riserC = forms.NumericStepper()
        self.riserC.DecimalPlaces = 0
        self.riserC.Increment = 1
        self.riserC.MaxValue = 1000
        self.riserC.MinValue = 1
        self.riserC.Value = 150
        self.riserC.ValueChanged += self.stairGen
        self.riserC.ValueChanged += self.handrailGen
        
        #Flip label
        self.flipLabel = forms.Label(Text = 'Flip direction of stairs:')
        #Flip control
        self.flipC = forms.CheckBox()
        self.flipC.CheckedChanged += self.stairGen
        self.flipC.CheckedChanged += self.handrailGen
        
        ###########################################
        #Handrail Gen Label
        self.handrailGenLabel = forms.Label(Text = 'HANDRAIL GENERATOR')
        #self.handrailGenLabel.VerticalAlignment.Center
        
        #Gen Handrail label
        self.genHandrailLabel = forms.Label(Text = 'Generate Handrail?:')
        #Gen Handrail control
        self.genHandrailBool = forms.CheckBox()
        self.genHandrailBool.Checked = False
        self.genHandrailBool.CheckedChanged += self.handrailGen
        
        #Handrail Type Label
        self.handrailTypeLabel = forms.Label(Text = 'Handrail type:')
        #Handrail Type Dropdown
        self.handrailTypeC = forms.DropDown()
        self.handrailTypeC.DataStore = ['180 No Return', '180 Full Return', 'Ground Triangular Return', 'Ground Return', 'Wall Return']
        self.handrailTypeC.SelectedIndex = 0
        self.handrailTypeC.SelectedIndexChanged += self.handrailGen
        
        #Handrail Height Label
        self.handrailHeightLabel = forms.Label(Text = 'Handrail height (mm):')
        #Handrail Height control
        self.handrailHeightC = forms.NumericStepper()
        self.handrailHeightC.DecimalPlaces = 0
        self.handrailHeightC.Increment = 1
        self.handrailHeightC.MaxValue = 5000
        self.handrailHeightC.MinValue = 100
        self.handrailHeightC.Value = 900
        self.handrailHeightC.ValueChanged += self.handrailGen
        
        #Handrail offset label
        self.handrailOffsetLabel = forms.Label(Text = 'Handrail offset from edges (mm):')
        #Handrail offset control
        self.handrailOffsetC = forms.NumericStepper()
        self.handrailOffsetC.DecimalPlaces = 0
        self.handrailOffsetC.Increment = 1
        self.handrailOffsetC.MaxValue = 5000
        self.handrailOffsetC.MinValue = 50
        self.handrailOffsetC.Value = 150
        self.handrailOffsetC.ValueChanged += self.handrailGen
        
        #Handrail extension Label
        self.handrailExtensionLabel = forms.Label(Text = 'Handrail extension (mm):')
        #Handrail extension Control
        self.handrailExtensionC = forms.NumericStepper()
        self.handrailExtensionC.DecimalPlaces = 0
        self.handrailExtensionC.Increment = 1
        self.handrailExtensionC.MaxValue = 5000
        self.handrailExtensionC.MinValue = 300
        self.handrailExtensionC.Value = 300
        self.handrailExtensionC.ValueChanged += self.handrailGen
        
        #Handrail Diameter Label
        self.handrailDiameterLabel = forms.Label(Text = 'Handrail diameter (mm):')
        #Handrail Diameter control
        self.handrailDiameterC = forms.NumericStepper()
        self.handrailDiameterC.DecimalPlaces = 0
        self.handrailDiameterC.Increment = 1
        self.handrailDiameterC.MaxValue = 50
        self.handrailDiameterC.MinValue = 30
        self.handrailDiameterC.Value = 30
        self.handrailDiameterC.ValueChanged += self.handrailGen
        
        # Create the default button
        self.DefaultButton = forms.Button(Text = 'OK')
        self.DefaultButton.Click += self.OnOKButtonClick

        # Create the abort button
        self.AbortButton = forms.Button(Text = 'Cancel')
        self.AbortButton.Click += self.OnCloseButtonClick

################################################################################

        # Create a table layout and add all the controls
        layout = forms.DynamicLayout()
        layout.Spacing = drawing.Size(5, 5)

        layout.AddRow(None)
        layout.AddRow(self.stairGenLabel)
        layout.AddRow(None)
        layout.AddRow(None)
        layout.AddRow(self.genStairLabel, self.genStairBool)
        layout.AddRow(self.numStepsLabel, self.numStepsC)
        layout.AddRow(self.treadLabel, self.treadC)
        layout.AddRow(self.riserLabel, self.riserC)
        layout.AddRow(self.flipLabel, self.flipC)
        layout.AddRow(None)
        layout.AddRow(None)
        layout.AddRow(None)
        layout.AddRow(None)
        layout.AddRow(self.handrailGenLabel)
        layout.AddRow(None)
        layout.AddRow(None)
        layout.AddRow(self.genHandrailLabel, self.genHandrailBool)
        layout.AddRow(self.handrailTypeLabel, self.handrailTypeC)
        layout.AddRow(self.handrailHeightLabel, self.handrailHeightC)
        layout.AddRow(self.handrailOffsetLabel, self.handrailOffsetC)
        layout.AddRow(self.handrailExtensionLabel, self.handrailExtensionC)
        layout.AddRow(self.handrailDiameterLabel, self.handrailDiameterC)
        layout.AddRow(self.DefaultButton, self.AbortButton)
        
        # Set the dialog content
        self.Content = layout

################################################################################

    #Stair Generator Method
    def stairGen(self, sender, e):

        # Variables and defaults
        tread = int(self.treadC.Value) * scale
        riser = int(self.riserC.Value) * scale
        numSteps = int(self.numStepsC.Value)
        flip = self.flipC.Checked
        stairLength = tread * numSteps
        genStair = self.genStairBool.Checked
        curveList = []
        junkList = []

        #get user line for top width of stair
        
        rs.EnableRedraw(False)
        
        if genStair == False:
            iteration = rs.ObjectsByName("GdC9V&amp;^a^rGZZNgiWFH&amp;aTRQLLscu*9AZCmhk8t2!a")
            if iteration:
                rs.DeleteObject(iteration)
                rs.EnableRedraw(True)
                
        if genStair == True:
            #Delete any existing iteration
            iteration = rs.ObjectsByName("GdC9V&amp;^a^rGZZNgiWFH&amp;aTRQLLscu*9AZCmhk8t2!a")
            if iteration:
                rs.DeleteObject(iteration)
            
            topLine = rs.AddLine(line[0],line[1])
            topPoint = line[0]
            stepPoint = topPoint
            
            #get perp line - length of stair
            t = rs.CurveClosestPoint(topLine, topPoint)
            planeNormal = rs.CurveNormal(topLine)
            tangent = rs.CurveTangent(topLine, t)
            curveNormal = rs.VectorCrossProduct(planeNormal, tangent)
            
            # Get vector
            vectorRun = rs.VectorCreate(topPoint, topPoint + curveNormal * tread)
            
            # Bool flip direction of stair (add bool option in GUI)
            if flip == True:
                vector = rs.VectorReverse(vectorRun)
            else:
                vector = vectorRun
                
            # loop through number of steps to gen step curve
            for i in range(numSteps):
                pt01 = rs.AddPoint(stepPoint)
                pt02 = rs.CopyObject(pt01, vector)
                pt03 = rs.CopyObject(pt02, [0,0,riser*-1])
                curve = rs.AddPolyline([pt01,pt02,pt03])
                curveList.append(curve)
                stepPoint = rs.CurveEndPoint(curve)
                rs.DeleteObjects([pt01,pt02,pt03])
            
            # Extrude stair curve to full width
            joinedCurve = rs.JoinCurves(curveList)
            bottomPoint = rs.CopyObject(line[0], [0,0,(riser*numSteps)*-1])
            stairBottom = rs.CurveEndPoint(joinedCurve)
            curve = rs.AddPolyline([line[0],bottomPoint,stairBottom])
            handRailCurve = rs.AddCurve([bottomPoint,stairBottom]) #createhandrail curve and return it
            curveList.append(curve)
            joinedCurves = rs.JoinCurves(curveList)
            stair = rs.ExtrudeCurveStraight(joinedCurves, line[0], line[1])
            rs.CapPlanarHoles(stair)
            #this identifies the generated stair geometry
            rs.ObjectName(stair, "GdC9V&amp;^a^rGZZNgiWFH&amp;aTRQLLscu*9AZCmhk8t2!a") 
            
            # clean up leftover geometry
            junkList.extend([bottomPoint,joinedCurve,joinedCurves, topLine, handRailCurve])
            junkList = junkList + curveList
            rs.DeleteObjects(junkList)
        
            rs.EnableRedraw(True)

    # Handrail Generator Method
    # hType, curve, handrailOffset, tread, riser, numSteps, scale, vectorRun, hHeight, hEndLength, pipeDiameter,
    def handrailGen(self, sender, e):
        
        flip = self.flipC.Checked
        hType = self.handrailTypeC.SelectedIndex
        handrailOffset = int(self.handrailOffsetC.Value) * scale
        tread = int(self.treadC.Value) * scale
        riser = int(self.riserC.Value) * scale
        numSteps = int(self.numStepsC.Value)
        hEndLength = int(self.handrailExtensionC.Value) * scale
        pipeDiameter = int(self.handrailDiameterC.Value) * scale
        hHeight = int(self.handrailHeightC.Value) * scale
        topLine = rs.AddLine(line[0],line[1])
        rs.ObjectName(topLine, "BC6#DT5LCQX*#8r97Tquf5gNF")
        topPoint = line[0]
        genHandrail = self.genHandrailBool.Checked

        rs.EnableRedraw(False)
        if genHandrail == False:
            iteration = rs.ObjectsByName("qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
            if iteration:
                rs.DeleteObjects(iteration)
                rs.EnableRedraw(True)
                
        if genHandrail == True:
            #Delete any existing iteration
            iteration = rs.ObjectsByName("qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
            if iteration:
                rs.DeleteObjects(iteration)
            
            #get perp line - length of stair
            t = rs.CurveClosestPoint(topLine, topPoint)
            planeNormal = rs.CurveNormal(topLine)
            tangent = rs.CurveTangent(topLine, t)
            
            if flip == False:
                curveNormal = rs.VectorCrossProduct(planeNormal, tangent)
            else:
                curveNormal = rs.VectorReverse(rs.VectorCrossProduct(planeNormal, tangent))
            
            # Get guide curve
            scaledV = rs.VectorReverse(rs.VectorScale(curveNormal, tread*numSteps))
            ptGuide1 = rs.AddPoint(line[0])
            ptGuide2 = rs.CopyObject(ptGuide1, scaledV)
            rs.MoveObjects([ptGuide1, ptGuide2], [0,0,(riser*numSteps)*-1])
            curve = rs.AddCurve([ptGuide1, ptGuide2])
            
            #Get vector for step run
            vectorRun = rs.VectorCreate(topPoint, topPoint + curveNormal * tread)
            
            # Setup curves for handrail
            curve1 = curve
            curve2 = rs.MoveObject(rs.CopyObject(curve1, rs.VectorCreate(line[1], 
            rs.CurveStartPoint(curve1))), [0,0,(riser * numSteps)*-1])
            midPoint = rs.CurveMidPoint(userCurve)
            
            # Main slanted handrail curve
            pt1 = rs.MoveObject(rs.MoveObject(rs.CurveStartPoint(curve1), vectorRun), [0,0,hHeight + (riser*numSteps)])
            pt2 = rs.MoveObject(rs.MoveObject(rs.CurveEndPoint(curve1), vectorRun), [0,0,hHeight])
            mainCurve = rs.AddCurve([pt1, pt2])
            
            # Top leveled handrail curve at 300mm standard DDA
            pt3 = rs.CopyObject(pt1, rs.VectorReverse(rs.VectorScale(rs.VectorUnitize(vectorRun), hEndLength)))
            topCurve = rs.AddCurve([pt1, pt3])
            
            # Bottom leveled handrail curve at 300mm standard DDA
            pt4 = rs.CopyObject(pt2, rs.VectorScale(rs.VectorUnitize(vectorRun), hEndLength))
            bottomCurve = rs.AddCurve([pt2, pt4])
            
            # Start list of construction geometry for later cleanup
            hGeoList = [curve1, curve2, pt1, pt2, mainCurve, pt3, topCurve, pt4, bottomCurve, ptGuide1, ptGuide2, curve, topLine]
            
            # IF STATEMENTS FOR HANDRAIL TYPE
            
            # 1 180 degree, no return
            if hType == 0:
                
                # Lower Handrail return
                hpt1 = rs.CopyObject(pt4, [0,0,(pipeDiameter * 2)* -1])
                hpt2 = rs.MoveObject(rs.CopyObject(pt4, [0,0,pipeDiameter * -1]), rs.VectorScale(rs.VectorUnitize(vectorRun), pipeDiameter))
                lowerH = rs.AddArc3Pt(pt4, hpt1, hpt2)
                
                # Upper Handrail return
                hpt3 = rs.CopyObject(pt3, [0,0,(pipeDiameter * 2)* -1])
                hpt4 = rs.MoveObject(rs.CopyObject(pt3, [0,0,pipeDiameter * -1]), rs.VectorReverse(rs.VectorScale(rs.VectorUnitize(vectorRun), pipeDiameter)))
                upperH = rs.AddArc3Pt(pt3, hpt3, hpt4)
                
                # Draw leg upper
                lpt1 = rs.CurveMidPoint(topCurve)
                lpt2 = rs.CopyObject(lpt1, [0,0,hHeight*-1])
                lCurveUpper = rs.AddCurve([lpt1, lpt2])
                
                # Draw leg lower
                lpt3 = rs.CopyObject(pt2, [0,0,hHeight*-1])
                lCurveLower = rs.AddCurve([pt2,lpt3])
                
                # Make vectors to move handrails into place
                moveShort = rs.VectorScale(userVector, handrailOffset)
                moveLong = rs.VectorScale(userVector, rs.CurveLength(userCurve) - (handrailOffset*2))
                
                # Join, offset skeleton
                hCurve = rs.JoinCurves([mainCurve, topCurve, bottomCurve, lowerH, upperH])
                hCurve1 = rs.CopyObject(hCurve, moveShort)
                lCurveUpper1 = rs.CopyObject(lCurveUpper, moveShort)
                lCurveLower1 = rs.CopyObject(lCurveLower, moveShort)
                
                # Pipe skeleton
                pipe1 = rs.AddPipe(hCurve1,0, pipeDiameter/2,blend_type=0, cap = 1)
                pipe2 = rs.AddPipe(lCurveUpper1,0, pipeDiameter/2,blend_type=0, cap = 1)
                pipe3 = rs.AddPipe(lCurveLower1,0, pipeDiameter/2,blend_type=0, cap = 1)
                
                #form list of generated geo
                handrailGeo1 = [pipe1, pipe2, pipe3]

                # Name geo for deletion
                for i in handrailGeo1:
                    rs.ObjectName(i, "qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
                #copy
                handrailGeo2 = rs.CopyObjects(handrailGeo1, moveLong)
                
                # Cleanup construction linework
                hGeoList.extend([hpt1, hpt2, lowerH, hpt3, hpt4, upperH, lpt2, lpt3, lCurveLower, hCurve, hCurve1,
                lCurveUpper1, lCurveLower1, lCurveUpper])
                rs.DeleteObjects(hGeoList)
                
                rs.EnableRedraw(True)
        
            # 2 180 degree, full return
            if hType == 1:
                
                rs.EnableRedraw(False)
                
                # Lower handrail return
                hpt1 = rs.CopyObject(pt4, [0,0,(hEndLength/3)*-2])
                hpt2 = rs.CopyObject(pt2, [0,0,(hEndLength/3)*-2])
                hCurve11 = rs.AddPolyline([pt4, hpt1, hpt2])
                lowerH = rs.JoinCurves([bottomCurve, hCurve11])
                
                # Upper handrail return
                hpt3 = rs.CopyObject(pt3, [0,0,(hEndLength/3)*-2])
                hpt4 = rs.CopyObject(rs.CurveMidPoint(topCurve), [0,0,(hEndLength/3)*-2])
                hCurve2 = rs.AddPolyline([pt3, hpt3, hpt4])
                upperH = rs.JoinCurves([topCurve, hCurve2])
                
                # Draw leg upper
                lpt1 = rs.CurveMidPoint(topCurve)
                lpt2 = rs.CopyObject(lpt1, [0,0,hHeight*-1])
                lCurveUpper = rs.AddCurve([lpt1, lpt2])
                
                # Draw leg lower
                lpt3 = rs.CopyObject(pt2, [0,0,hHeight*-1])
                lCurveLower = rs.AddCurve([pt2,lpt3])
                
                # Make vectors to move handrails into place
                moveShort = rs.VectorScale(userVector, handrailOffset)
                moveLong = rs.VectorScale(userVector, rs.CurveLength(userCurve) - (handrailOffset*2))
                
                # Pipe skeleton move
                hCurve1 = rs.JoinCurves([lowerH, upperH, mainCurve])
                rs.MoveObjects([hCurve1, lCurveUpper, lCurveLower], moveShort)
                
                #Pipe
                pipe1 = rs.AddPipe(hCurve1,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe2 = rs.AddPipe(lCurveUpper,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe3 = rs.AddPipe(lCurveLower,0, pipeDiameter/2, blend_type=0, cap = 1)
                
                handrailGeo1 = [pipe1, pipe2, pipe3]

                # Name geo for deletion
                for i in handrailGeo1:
                    rs.ObjectName(i, "qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
                
                # Move and copy into position
                handrailGeo2 = rs.CopyObjects(handrailGeo1, moveLong)
                
                # Cleanup
                hGeoList.extend([hpt1, hpt2, hCurve11, lowerH, hpt3, hpt4, hCurve2, upperH, lpt2, lCurveUpper, lpt3,
                lCurveLower, hCurve1])
                rs.DeleteObjects(hGeoList)
                
                rs.EnableRedraw(True)
                
            # 3 Ground triangle return
            if hType == 2:
                
                rs.EnableRedraw(False)
                
                # Draw leg upper
                lpt1 = rs.CurveMidPoint(topCurve)
                lpt2 = rs.CopyObject(lpt1, [0,0,hHeight*-1])
                lCurveUpper = rs.AddCurve([lpt1, lpt2])
                
                # Draw leg lower
                lpt3 = rs.CopyObject(pt2, [0,0,hHeight*-1])
                lCurveLower = rs.AddCurve([pt2,lpt3])
                
                # Lower Return
                lowerH = rs.AddCurve([pt4, lpt3])
                
                # Upper Return
                upperH = rs.AddCurve([pt3, lpt2])
                
                # Make vectors to move handrails into place
                moveShort = rs.VectorScale(userVector, handrailOffset)
                moveLong = rs.VectorScale(userVector, rs.CurveLength(userCurve) - (handrailOffset*2))
                
                # Join Curves and move
                hCurve = rs.JoinCurves([mainCurve, topCurve, bottomCurve, lowerH, upperH])
                rs.MoveObjects([hCurve, lCurveUpper, lCurveLower], moveShort)
                
                # pipe
                pipe1 = rs.AddPipe(hCurve,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe2 = rs.AddPipe(lCurveUpper,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe3 = rs.AddPipe(lCurveLower,0, pipeDiameter/2, blend_type=0, cap = 1)
                
                handrailGeo1 = [pipe1, pipe2, pipe3]
                
                # Name geo for deletion
                for i in handrailGeo1:
                    rs.ObjectName(i, "qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
                
                # move and copy into place
                handrailGeo2 = rs.CopyObjects(handrailGeo1, moveLong)
                
                # Cleanup
                hGeoList.extend([lpt2, lCurveUpper, lpt3, lCurveLower, lowerH, upperH, hCurve, topLine])
                rs.DeleteObjects(hGeoList)
                
                rs.EnableRedraw(True)
                
            # 4 Ground return
            
            if hType == 3:
                
                rs.EnableRedraw(False)
                
                # Draw leg upper
                lpt1 = rs.CurveMidPoint(topCurve)
                lpt2 = rs.CopyObject(lpt1, [0,0,hHeight*-1])
                lCurveUpper = rs.AddCurve([lpt1, lpt2])
                
                # Draw leg lower
                lpt3 = rs.CopyObject(pt2, [0,0,hHeight*-1])
                lCurveLower = rs.AddCurve([pt2,lpt3])
                
                # Lower Return
                hpt1 = rs.CopyObject(pt4, [0,0,hHeight*-1])
                hCurve1 = rs.AddCurve([pt4, hpt1])
                
                # Upper Return
                hpt2 = rs.CopyObject(pt3, [0,0,hHeight*-1])
                hCurve2 = rs.AddCurve([pt3, hpt2])
                
                # Join curves
                hCurve = rs.JoinCurves([mainCurve, topCurve, bottomCurve, hCurve1, hCurve2])
                
                # Get Vectors
                moveShort = rs.VectorScale(userVector, handrailOffset)
                moveLong = rs.VectorScale(userVector, rs.CurveLength(userCurve) - (handrailOffset*2))
                
                #move
                rs.MoveObjects([hCurve, lCurveUpper, lCurveLower], moveShort)
                
                # Pipe
                pipe1 = rs.AddPipe(hCurve,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe2 = rs.AddPipe(lCurveUpper,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe3 = rs.AddPipe(lCurveLower,0, pipeDiameter/2, blend_type=0, cap = 1)
                
                handrailGeo1 = [pipe1, pipe2, pipe3]
                
                # Name geo for deletion
                for i in handrailGeo1:
                    rs.ObjectName(i, "qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
                    
                # move and copy into place
                handrailGeo2 = rs.CopyObjects(handrailGeo1, moveLong)
                
                # Clean up
                hGeoList.extend([lpt2, lCurveUpper, lpt3, lCurveLower, hpt1, hCurve1, hpt2, hCurve2, hCurve, topLine])
                rs.DeleteObjects(hGeoList)
                
                rs.EnableRedraw(True)
        
            # 5 Wall return
            if hType == 4:
                
                rs.EnableRedraw(False)
                
                # Draw leg upper
                lpt1 = rs.CurveMidPoint(topCurve)
                lpt2 = rs.CopyObject(lpt1, [0,0,hHeight*-1])
                lCurveUpper = rs.AddCurve([lpt1, lpt2])
                
                # Draw leg lower
                lpt3 = rs.CopyObject(pt2, [0,0,hHeight*-1])
                lCurveLower = rs.AddCurve([pt2,lpt3])
                
                #get vectors
                vector1 =  rs.VectorScale(rs.VectorUnitize(rs.VectorReverse(userVector)), handrailOffset)
                vector2 = rs.VectorScale(userVector, rs.CurveLength(userCurve))
                
                # Lower Return
                hpt1 = rs.CopyObject(pt4, vector1)
                hCurve1 = rs.AddCurve([pt4, hpt1])
                
                # Upper Return
                hpt2 = rs.CopyObject(pt3, vector1)
                hCurve2 = rs.AddCurve([pt3, hpt2])
                
                # Join main curves
                hCurveMain1 = rs.JoinCurves([mainCurve, topCurve, bottomCurve])
                
                # Get Vectors
                moveShort = rs.VectorScale(userVector, handrailOffset)
                moveLong = rs.VectorScale(userVector, rs.CurveLength(userCurve) - handrailOffset)
                
                # Copy hanrail 2
                hCurveMain2 = rs.CopyObject(hCurveMain1, moveLong)
                hCurve3 = rs.CopyObject(hCurve1, vector2)
                hCurve4 = rs.CopyObject(hCurve2, vector2)
                lCurveUpper2 = rs.CopyObject(lCurveUpper, moveLong)
                lCurveLower2 = rs.CopyObject(lCurveLower, moveLong)
                
                # Join curves
                hCurveJoined1 = rs.JoinCurves([hCurve1, hCurve2, hCurveMain1])
                hCurveJoined2 = rs.JoinCurves([hCurveMain2, hCurve3, hCurve4,])
                
                # Pipe
                pipe1 = rs.AddPipe(hCurveJoined1,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe2 = rs.AddPipe(lCurveLower,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe3 = rs.AddPipe(lCurveUpper,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe4 = rs.AddPipe(hCurveJoined2,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe5 = rs.AddPipe(lCurveUpper2,0, pipeDiameter/2, blend_type=0, cap = 1)
                pipe6 = rs.AddPipe(lCurveLower2,0, pipeDiameter/2, blend_type=0, cap = 1)
                
                handrailGeo1 = [pipe1, pipe2, pipe3, pipe3, pipe4, pipe5, pipe6]
                
                # Name geo for deletion
                for i in handrailGeo1:
                    rs.ObjectName(i, "qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
                
                # Move handrail 1 into place
                rs.MoveObjects([pipe1, pipe2, pipe3], moveShort)
                
                # Cleanup
                hGeoList.extend([lpt2, lCurveUpper, lpt3, lCurveLower, hpt1, hCurve1, hpt2, hCurve2, hCurveMain1, hCurveMain2, hCurve3,
                hCurve4, lCurveUpper2, lCurveLower2, hCurveJoined1, hCurveJoined2])
                rs.DeleteObjects(hGeoList)
                
                rs.EnableRedraw(True)

    # Close button click handler
    def OnCloseButtonClick(self, sender, e):
        generatedStair = rs.ObjectsByName("GdC9V&amp;^a^rGZZNgiWFH&amp;aTRQLLscu*9AZCmhk8t2!a")
        generatedHandrail = rs.ObjectsByName("qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
        rs.DeleteObjects(rs.ObjectsByName("xAbJgNV6^bz6azN&amp;6E$Q^WeX$Dd^vygCz5z7Hmynb5"))
        rs.DeleteObjects(rs.ObjectsByName("BC6#DT5LCQX*#8r97Tquf5gNF"))
        if generatedStair:
            rs.DeleteObject(generatedStair)
        if generatedHandrail:
            rs.DeleteObjects(generatedHandrail)
        self.Close(False)

    # close x button handler
    def OnFormClosed(self, sender, e):
        generatedStair = rs.ObjectsByName("GdC9V&amp;^a^rGZZNgiWFH&amp;aTRQLLscu*9AZCmhk8t2!a")
        generatedHandrail = rs.ObjectsByName("qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
        rs.DeleteObjects(rs.ObjectsByName("xAbJgNV6^bz6azN&amp;6E$Q^WeX$Dd^vygCz5z7Hmynb5"))
        rs.DeleteObjects(rs.ObjectsByName("BC6#DT5LCQX*#8r97Tquf5gNF"))
        if generatedStair:
            rs.DeleteObject(generatedStair)
        if generatedHandrail:
            rs.DeleteObjects(generatedHandrail)
        self.Close(False)

    # OK button click handler
    def OnOKButtonClick(self, sender, e):
        #remove object name to avoid deletion
        generatedStair = rs.ObjectsByName("GdC9V&amp;^a^rGZZNgiWFH&amp;aTRQLLscu*9AZCmhk8t2!a")
        generatedHandrail = rs.ObjectsByName("qe7g&amp;G5LzXEvbudtPT8xCxQbisusFVqCPqMsiHK2jc")
        rs.DeleteObjects(rs.ObjectsByName("xAbJgNV6^bz6azN&amp;6E$Q^WeX$Dd^vygCz5z7Hmynb5"))
        rs.DeleteObjects(rs.ObjectsByName("BC6#DT5LCQX*#8r97Tquf5gNF"))
        if generatedStair:
            rs.ObjectName(generatedStair, name="www.landarchtools.com")
        if generatedHandrail:
            rs.ObjectName(generatedHandrail, name="www.landarchtools.com")

        self.Close(True)


################################################################################

#Get scale factor and abort if not in mm cm or m
system = rs.UnitSystem()
if system == 2 or system == 3 or system == 4:
    scaleFactorDict = {2:1, 3:0.1, 4:0.001}
    scaleFactor = scaleFactorDict[system]
    scale = scaleFactor
else:
    rs.MessageBox("change document to use mm, cm or m")
    exit()

#Get stair width
line = rs.GetLine(mode=1,message1="Pick two points to define top step width")
line[1].Z = line[0].Z
userCurve = rs.AddLine([line[0].X, line[0].Y, line[0].Z], [line[1].X, line[1].Y, line[0].Z])
userVector = rs.VectorUnitize(rs.VectorCreate((line[1].X, line[1].Y, line[0].Z), (line[0].X, line[0].Y, line[0].Z)))
rs.ObjectName(userCurve, "xAbJgNV6^bz6azN&amp;6E$Q^WeX$Dd^vygCz5z7Hmynb5")

# The script that will be using the dialog.
def RequestStairGen(): # This will call the eto form and assign it as a daughter window of rhino
    dialog = StairGenDialog(); # sets the ETO form to dialog variable
    rc = dialog.ShowModal(Rhino.UI.RhinoEtoApp.MainWindow) # Launches UI as modal daughter of rhino window


################################################################################

RequestStairGen()
)</script>
    </macro_item>
    <macro_item guid="6beb1246-fc82-4dfc-bb54-1188098f1029" bitmap_id="0c6dcc76-9701-40e5-a9cb-b791cf15160c">
      <text>
        <locale_1033>Macro 22</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Grade Curve</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Grade Curve</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2021&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#GRADE CURVE 

import rhinoscriptsyntax as rs

def scale():
    system = rs.UnitSystem()
    if system == 2 or system == 3 or system == 4:
        scaleFactorDict = {2:1, 3:100, 4:1000}
        scaleFactor = scaleFactorDict[system]
        return scaleFactor

    if system != 2 or system != 3 or system != 4:
        return None


def main():
    #If system is not metric, bail.
    if scale() == None:
        rs.MessageBox("This tool can only be used in mm, cm or m model units")
        return None
    
    #Set Variables
    crv = rs.GetObject(message="Get object to grade", filter=4, preselect=True, select=False, custom_filter=None, subobjects=False)
    if not crv: return
    grade = rs.GetReal(message="Enter grade number", number=20, minimum=0.001, maximum=None)
    if not grade: return
    
    rs.EnableRedraw(False)
    
    #FIND LENGTH OF CURVE AT EACH GRIP POINT
    rs.EnableObjectGrips(crv)
    ctrlPts = rs.ObjectGripLocations(crv)
    crvLengths = []
    startParam = rs.CurveClosestPoint(crv, ctrlPts[0])
    
    for i in ctrlPts:
        paramNum = rs.CurveClosestPoint(crv, i)
        CL = (rs.CurveLength(crv, sub_domain=[startParam ,paramNum]))
        crvLengths.append(CL)
    
    #FIND GRADED Z HEIGHT OF GRIP POINT
    gripHeights = []
    for i in crvLengths:
        rise = i / grade
        gripHeights.append(rise)
    
    #EDIT GRIP POINTS WITH NEW Z VALUE
    newGrips = []
    gripIndex = 0
    for i in ctrlPts:
        newPt = (i.X,i.Y,(i.Z+gripHeights[gripIndex]))
        newGrips.append(newPt)
        gripIndex = gripIndex + 1
    
    #MODIFY CURVE TO ENTERED GRADE
    rs.CopyObject(crv)
    grips = rs.ObjectGripLocations(crv, newGrips)
    rs.EnableObjectGrips(crv, enable=False)
    
    rs.EnableRedraw(True)

#Run Script
main()

)</script>
    </macro_item>
    <macro_item guid="c4df9c08-dfb5-4ff9-a629-7d6192f2ec4f" bitmap_id="6783bd35-8013-48ef-b051-efcca66e123d">
      <text>
        <locale_1033>Macro 23</locale_1033>
      </text>
      <tooltip>
        <locale_1033>Scatter Blocks</locale_1033>
      </tooltip>
      <button_text>
        <locale_1033>Scatter Blocks</locale_1033>
      </button_text>
      <script>! _-RunPythonScript (

'''

Copyright &lt;2022&gt; &lt;Thomas Chapman&gt;

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'''

#SCATTER BLOCKS

import rhinoscriptsyntax as rs
import random
import math
import Rhino
import scriptcontext as sc

#r1 = vector 01 of triangle from origin (this will be randomised between 0,1)
#r2 = vector 02 of triangle from origin (this will be randomised between 0,1)
#a = origin corner of triangle (this should be picked as largest radius)
#b, c = other corners of triangle

def main():

    ################################################################################
    #                             GET OBJECTS AND VARIABLE                         #
    ################################################################################

    obj = rs.GetObject(message="Select surface to scatter on", filter=8|16|32, preselect=False, select=False, custom_filter=None, subobjects=False)
    if not obj:
        return
    blocks = rs.GetObjects(message="Select blocks to scatter", filter=4096, group=True, preselect=False, select=False, objects=None, minimum_count=1, maximum_count=0, custom_filter=None)
    if not blocks:
        return
    scatterNum = rs.GetInteger(message="Enter scatter amount", number=100, minimum=1, maximum=10000)
    if not scatterNum:
        return
    userScale = rs.GetReal("enter scale multiplyer (0 for no scaling)", number=0, minimum=None, maximum=None)

    userRotation = rs.GetBoolean("random rotation of blocks?", ("Rotation", "No", "Yes"), (True))
    if not userRotation:
        return

    isMesh = rs.IsMesh(obj)
    ptBucket = 0
    pointList = []
    blockList = []
    worldZVector = (rs.WorldXYPlane()).ZAxis

    rs.EnableRedraw(False)

    def MeshBrep(brep_id,params):
        brep=rs.coercebrep(brep_id)
        if brep:
            mesh=Rhino.Geometry.Mesh()
            mesh_parts=Rhino.Geometry.Mesh.CreateFromBrep(brep,params)
            for mesh_part in mesh_parts: mesh.Append(mesh_part)
            mesh.Compact()
            return mesh
    
    def TestMeshBrep():
        mesh_params=Rhino.Geometry.MeshingParameters.Coarse
        mesh_brep=MeshBrep(obj,mesh_params)
        if mesh_brep:
            mesh = sc.doc.Objects.AddMesh(mesh_brep)
        return mesh
    
    def chunks(lst, n): #list split generator
        for i in xrange(0, len(lst), n):
            yield lst[i:i + n]
    
    if isMesh == False:
        mesh = TestMeshBrep()
    else:
        mesh = obj
    
    #Get and format vertex points in mesh, format from point3d object to float list
    meshVerts = rs.MeshFaces(mesh, face_type=False)
    totalArea = rs.MeshArea(mesh)
    meshFaceCount = rs.MeshFaceCount(mesh)
    
    PT01 = meshVerts[0::3]
    PT01S = []
    for i in PT01:
        i = (i.X, i.Y, i.Z)
        PT01S.append(i)
    
    PT02 = meshVerts[1::3]
    PT02S = []
    for i in PT02:
        i = (i.X, i.Y, i.Z)
        PT02S.append(i)
    
    PT03 = meshVerts[2::3]
    PT03S = []
    for i in PT03:
        i = (i.X, i.Y, i.Z)
        PT03S.append(i)
    
    triangleList = zip(PT01S, PT02S, PT03S) #format list together in order to loop through
    
    ################################################################################
    #                             POINT SCATTER LOOP                               #
    ################################################################################
    
    #loop through the three vertexes forming individual triangles
    for i in triangleList:
        a = i[0] #triangle vert 1
        b = i[1] #triangle vert 2
        c = i[2] #triangle vert 3
    
    #Find area of triangle
        dist01 = rs.Distance(a,b)
        dist02 = rs.Distance(a,c)
        dist03 = rs.Distance(b,c)
        s = (dist01 + dist02 + dist03) / 2 #Herons formula to find area of triangle by sides
        tArea = math.sqrt(s*(s-dist01)*(s-dist02)*(s-dist03))
    
    #assign portion of points base on area of triangle, if assignment of points is lower then one, add that to the next assignment
        numPtsPerUnit = totalArea[1] / scatterNum
        ptAllocation = tArea / numPtsPerUnit
        ptBucket = ptBucket + ptAllocation
    
        if ptBucket &lt; 1:
            continue
        else:
            pointShare = int (math.floor(ptBucket))
            ptBucket = 0
    
    #Vectors from origin to either corner of triangle
        ac = rs.VectorCreate(c,a)
        ab = rs.VectorCreate(b,a)
        originVector = rs.VectorCreate(a,(0,0,0))
    
    #Generate random numbers between 0,1. Random scatter onto triangle
        for i in range(pointShare):
            r1 = random.random()
            r2 = random.random()
            if r1 + r2 &lt; 1:
                p = r1 * ac + r2 * ab
            else:
                p = (1 - r1) * ac + (1 - r2) * ab
                
            points = rs.AddPoint(p)
            pointList.append(points)
            rs.MoveObjects(points, originVector)
    
    ################################################################################
    #                 MOVE BLOCKS TO POINTS WITH ROTATION / SCALE                  #
    ################################################################################
    
    #shuffle point list then split list by the number of blocks to scatter. Copy blocks to split lists
    random.shuffle(pointList)
    ptDivision = int(len(pointList) / len(blocks))
    genList = chunks(pointList, ptDivision)
    blockIndex = 0
    
    for pts in genList: #looping through split point list and blocks and copying blocks to scatter
        blockPt = rs.BlockInstanceInsertPoint(blocks[blockIndex])
        for pt in pts:
            vector = rs.VectorCreate(pt, blockPt)
            newBlock = rs.CopyObject(blocks[blockIndex], vector)
            blockList.append(newBlock) #create list of blocks for later modification
        if blockIndex &lt; (len(blocks) - 1):
            blockIndex += 1
    
    #apply random scaling and rotation to blocks
    if userRotation[0] == True:
        for block in blockList:
            centerPt = rs.BlockInstanceInsertPoint(block)
            angle = random.randint(0,360)
            rs.RotateObject(block, centerPt, angle, worldZVector)
    
    for block in blockList:
        centerPt= rs.BlockInstanceInsertPoint(block)
        scale = random.uniform((userScale/4), userScale)
        rs.ScaleObject(block, centerPt, (scale, scale, scale))
        
    #If a mesh was created, delete it, general cleanup
    if isMesh == False:
        rs.DeleteObject(mesh)
    rs.DeleteObjects(pointList)

main()

rs.EnableRedraw(True)


)</script>
    </macro_item>
  </macros>
  <bitmaps>
    <small_bitmap item_width="16" item_height="16">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap_item guid="b54432f0-91ec-43b6-8b11-4a7654e19716" index="16" />
      <bitmap_item guid="d59a330a-0413-4632-9c5c-1d8f613a7bd0" index="17" />
      <bitmap_item guid="8fa94ce8-b572-453c-8fec-ae23f13cb9ad" index="18" />
      <bitmap_item guid="adf3520d-c901-4048-a55a-24d4466b0615" index="19" />
      <bitmap_item guid="61624676-c9c5-49bf-ad20-9aa2092d1576" index="20" />
      <bitmap_item guid="85a60542-9518-495a-80eb-1e3ee6470955" index="21" />
      <bitmap_item guid="6e502bab-241b-4e5b-ab6e-45895a855e3d" index="22" />
      <bitmap_item guid="e665d72d-4470-43f1-9a74-a7f1a96e66ba" index="23" />
      <bitmap_item guid="0c6dcc76-9701-40e5-a9cb-b791cf15160c" index="24" />
      <bitmap_item guid="6783bd35-8013-48ef-b051-efcca66e123d" index="25" />
      <bitmap>iVBORw0KGgoAAAANSUhEUgAAABAAAAGgCAYAAACjTuegAAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAOvwAADr8BOAVTJAAAAhlJREFUeF7t0zFoE1EYwPGHqBRXBcFZ3FQcRMHNwV13F5UuuhW6CI3W
XusN1aGNUSvqUKUKDkItHK3WRtBiLWrSxJS4OZQMRcGaFsLl8767vOe1qaDg4PD/wUcu373vu3fv
vTMAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L9omt6DofGyDdP7qW68VQ291pzeaw1rJybTEQ3KRQWh
GE82C70Xmr6bOrZVlkiK+6ab2wYk7Lgqza0DbcWa0/t6HT1oel0TfbLeWPICqXyuytjEvNR2X3PF
ep2fei9f7r5yOZ1JXNw03gE7bdtgvFiRsadzsrxrUJZ3DkrX6BspVauyWKpIuMOPG2hNvCZRp2Hb
1Taw0X0jL93ZGfFnSy73/cT91Cy8rGkYr2wThXNPZGiu7OLMo7dyNoqe1wsuVzz92DXQ3TF1k6nb
RLilX/xMIKcmP8ZhG9j//qUgHmPH6xava2CbrOy5Lt8O35avx+7IZf+5dOXycYyffOjGacQN0q9g
oxEt3I+jI7K6PxfPoPNlQc7PFOVC9Fs6fu/XOH2F9CLaWNs7JCvR09f2DUvng1mZKi26RVzqD9y4
eBHT27hZFA7dkmC+nGzjQkVqF5/FebeNyh6k38W7IyMy+aEstZ4Jl3MHSSVH+cqLdNHGaG6PjnLr
iLcdZZU0+ZOPSWe7oThN10QX568/ZwAAAAAAAAAAAAAAAAAAgH/CmJ8SAkDeBQwm3wAAAABJRU5E
rkJggg==</bitmap>
    </small_bitmap>
    <normal_bitmap item_width="24" item_height="24">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap_item guid="b54432f0-91ec-43b6-8b11-4a7654e19716" index="16" />
      <bitmap_item guid="d59a330a-0413-4632-9c5c-1d8f613a7bd0" index="17" />
      <bitmap_item guid="8fa94ce8-b572-453c-8fec-ae23f13cb9ad" index="18" />
      <bitmap_item guid="adf3520d-c901-4048-a55a-24d4466b0615" index="19" />
      <bitmap_item guid="61624676-c9c5-49bf-ad20-9aa2092d1576" index="20" />
      <bitmap_item guid="85a60542-9518-495a-80eb-1e3ee6470955" index="21" />
      <bitmap_item guid="6e502bab-241b-4e5b-ab6e-45895a855e3d" index="22" />
      <bitmap_item guid="e665d72d-4470-43f1-9a74-a7f1a96e66ba" index="23" />
      <bitmap_item guid="0c6dcc76-9701-40e5-a9cb-b791cf15160c" index="24" />
      <bitmap_item guid="6783bd35-8013-48ef-b051-efcca66e123d" index="25" />
      <bitmap>iVBORw0KGgoAAAANSUhEUgAAABgAAAJwCAYAAACTT6HmAAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAOvwAADr8BOAVTJAAABHVJREFUeF7t1HtMVnUcx3EeAUGQwJRISRGXoqigliSDZeXENKF5CQRR
MIo1p7YkNUXNP2qa4iVz6dwyRI1E0MqZzSuTLfPSZdnU1bQ/XNnScireEPj0/fEguhZGyz9qe7+2
93Z4zu/8vpzzwPEBAAAAAAAAAAAA8N/mZ421hjX8dI8ltw8IKp8+JFXjEwZd9/XxWW2f9fSe+ne6
+Pv6rkjr1efcgRcLpbJ9qtl1WNsKFuiJqJ5n7Pwsq0PDyn8ozJqSFNX9h3XpL6l2YYm0tExabtkQ
VR3T5a17VZSZp7jwTkdtbbrlHuHf8lgZndrdX7lkxDj9umCNtKJCWrxJWrRBcoPeXC+9bYO2HpAO
ntCptWWa8WRafaCf3yd27ZCGXe6ibaDHs6d/eCeV5hbU1xWV2m9dLr210TvgVgutkp3Ske91decX
Wj4uvz4mtL18fTzrG/dpVtv4oLAtK7sNVFbHzjW58Y9cq5w8X1q2RSr68PZdbNoj7f9apa8supnR
N+HG9N7x13YNTVdrj++Gxn2aFRwbFLr58/7DdTYps35VxKM3ngqNvvLywBHXTs9Z6R20dLOqpi6p
y05Ivj7qoW7V29JzbmptuU7nzZBdX+zdpnk2IKRsd/xQXUrOauhY7JDaebbR8MgeF98bm3399aef
rRkZGXlxdWJq9S+L19apYrf0aZWOT5nbogFBvQPCtuyNS9HvyZn6KfE5nU/K0IWkcTocm3K1W2Bw
dX7nfpd+HDXppmYvl1aXqq5wmbRuq45Pm9+yAX0CQsr324ALjQNcP1s1j2crMzxaR9MmSS/MU13O
a6rNnqHa3FnS+9t0fGoLB/QNCqnYH293kHR7gOuyPa708K468MwE6flC1U6wzccXqDZvjlT8kQ2Y
17IB9ldUUdmvBQMmzrQ7eNU7YMN2nWjhIwqOD263/eCAEfYFt2CAu4sce0RFxTqVN9MN2Ojdpnkh
oX7+O1Y8nNDw5V60Td3zb25Avds8b66u5MzUmsRhbsC73m3u7rHWHk9JVviDN/bEDbUhmTpnw6r/
NECT7NFYlcOyNLZL9HmPx/OOXRvj3eKv5Vh3vutHdvVvs6+gc6y+G5im+sETlRURrUOpuVL+Ap0c
na+JMQPqIuw1bmuTvJc0GGzleQ9vC7UOWZcs9+/e33LcW3VyXJuwk8UxiRoTHqUdKelaNShFvdq2
O2LnMqw2bqEZYJVYF6wTViurSR/rrOWeo2uqdacu/j6ehQGtfC/3DOlwxq6cbZ/d5z3VZJp16/rf
rK5Wk1TrK2uR5d7v7tXrbjPcupN7FLHewyZujVv7sfWltcSqstKsJhHWrYk9LPeFHbO+sT6zVlmF
1njLfVdzGz/babk131orre6W09GK9B427wFrtPWGVWq533B3Y+74A8udG2O5tfdEoBXgPQQAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAA4P/Cx+cPS1cw6q6WjXMAAAAASUVORK5CYII=</bitmap>
    </normal_bitmap>
    <large_bitmap item_width="32" item_height="32">
      <bitmap_item guid="f9c5b694-dced-4977-a15f-92d9fff043bc" index="0" />
      <bitmap_item guid="dc6a7aa7-f6fd-483a-b86e-40ca3a405b92" index="1" />
      <bitmap_item guid="8a465cae-79a9-4baa-b77e-ef3d92b27f3c" index="2" />
      <bitmap_item guid="bca0a23f-5397-475b-9a42-1ef72c11f863" index="3" />
      <bitmap_item guid="f3c1fd4a-470f-412b-98a3-4374e134c963" index="4" />
      <bitmap_item guid="dd2745d9-c95b-4c6c-9b58-be8e9cb1be24" index="5" />
      <bitmap_item guid="bd3a0457-e280-44b4-95ec-68bf6d152c4f" index="6" />
      <bitmap_item guid="4bec978a-dd98-4658-b848-0f810eefd6bf" index="7" />
      <bitmap_item guid="16c8e3ab-3ee8-44c9-98cb-0ba5c7a82676" index="8" />
      <bitmap_item guid="7c225bac-4566-4c22-8529-19795734ecf8" index="9" />
      <bitmap_item guid="3a30ba51-3cf2-4d5a-ae4e-e7727296e181" index="10" />
      <bitmap_item guid="5ecdbeb8-4c26-464d-965a-d29084b78338" index="11" />
      <bitmap_item guid="3f736f77-7940-4134-9713-dac547abd1c6" index="12" />
      <bitmap_item guid="c351dd99-b010-4a89-86fe-835dd645a1b8" index="13" />
      <bitmap_item guid="5bb47664-de86-4b8e-88ce-835cfa2b3981" index="14" />
      <bitmap_item guid="5e8ac9ba-79e9-48e6-bdff-a3a3cf4780bb" index="15" />
      <bitmap_item guid="b54432f0-91ec-43b6-8b11-4a7654e19716" index="16" />
      <bitmap_item guid="d59a330a-0413-4632-9c5c-1d8f613a7bd0" index="17" />
      <bitmap_item guid="8fa94ce8-b572-453c-8fec-ae23f13cb9ad" index="18" />
      <bitmap_item guid="adf3520d-c901-4048-a55a-24d4466b0615" index="19" />
      <bitmap_item guid="61624676-c9c5-49bf-ad20-9aa2092d1576" index="20" />
      <bitmap_item guid="85a60542-9518-495a-80eb-1e3ee6470955" index="21" />
      <bitmap_item guid="6e502bab-241b-4e5b-ab6e-45895a855e3d" index="22" />
      <bitmap_item guid="e665d72d-4470-43f1-9a74-a7f1a96e66ba" index="23" />
      <bitmap_item guid="0c6dcc76-9701-40e5-a9cb-b791cf15160c" index="24" />
      <bitmap_item guid="6783bd35-8013-48ef-b051-efcca66e123d" index="25" />
      <bitmap>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
+jJ1JAwAAAAASUVORK5CYII=</bitmap>
    </large_bitmap>
  </bitmaps>
  <scripts />
</RhinoUI>